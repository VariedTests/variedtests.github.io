"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[15627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32910:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const i={id:"ssr-nextjs",title:"SSR-Next.js"},o=void 0,s={unversionedId:"guides-and-concepts/ssr-nextjs",id:"version-2.xx.xx/guides-and-concepts/ssr-nextjs",title:"SSR-Next.js",description:"refine can be used with Next.js to SSR your pages. It doesn't get in the way and follows Next.js conventions and also provides helper modules when necessary.",source:"@site/versioned_docs/version-2.xx.xx/guides-and-concepts/ssr-nextjs.md",sourceDirName:"guides-and-concepts",slug:"/guides-and-concepts/ssr-nextjs",permalink:"/docs/2.xx.xx/guides-and-concepts/ssr-nextjs",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/versioned_docs/version-2.xx.xx/guides-and-concepts/ssr-nextjs.md",tags:[],version:"2.xx.xx",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{id:"ssr-nextjs",title:"SSR-Next.js"},sidebar:"version-2.xx.xx/someSidebar",previous:{title:"Appwrite",permalink:"/docs/2.xx.xx/guides-and-concepts/data-provider/appwrite"},next:{title:"Access Control",permalink:"/docs/2.xx.xx/guides-and-concepts/access-control"}},p={},d=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom Page",id:"custom-page",level:2},{value:"SSR",id:"ssr",level:3},{value:"Standard CRUD Page",id:"standard-crud-page",level:2},{value:"SSR",id:"ssr-1",level:3},{value:"Server Side Authentication",id:"server-side-authentication",level:2},{value:"<code>syncWithLocation</code> and Query Parameters in SSR",id:"syncwithlocation-and-query-parameters-in-ssr",level:2},{value:"Live Codesandbox Example",id:"live-codesandbox-example",level:2}],l={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," can be used with ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/getting-started"},(0,a.kt)("strong",{parentName:"a"},"Next.js"))," to SSR your pages. It doesn't get in the way and follows Next.js conventions and also provides helper modules when necessary."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@pankod/refine-nextjs-router"},(0,a.kt)("strong",{parentName:"a"},"nextjs-router"))," package provided by ",(0,a.kt)("strong",{parentName:"p"},"refine")," must be used for the ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/providers/router-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"routerProvider"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine @pankod/refine-nextjs-router\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We recommend ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pankod/superplate"},(0,a.kt)("strong",{parentName:"a"},"superplate"))," to initialize your refine projects. It configures the project according to your needs including SSR with Next.js.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/components/refine-config"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>"))," must wrap your pages in a ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/advanced-features/custom-app"},"custom App")," component. This way your ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/basic-features/pages"},"pages")," are integrated to refine."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/_app.tsx"',title:'"pages/_app.tsx"'},'import { AppProps } from "next/app";\n\nimport { Refine } from "@pankod/refine";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-nextjs-router";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\n    return (\n        // highlight-start\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider(API_URL)}\n        >\n            <Component {...pageProps} />\n        </Refine>\n        // highlight-end\n    );\n}\n\nexport default MyApp;\n')),(0,a.kt)("h2",{id:"custom-page"},"Custom Page"),(0,a.kt)("p",null,"Let's say we want to show a list of users in ",(0,a.kt)("inlineCode",{parentName:"p"},"/users"),". After creating ",(0,a.kt)("inlineCode",{parentName:"p"},"users.tsx")," under ",(0,a.kt)("inlineCode",{parentName:"p"},"pages")," in your Nextjs app, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook to list the users in a table:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/users.tsx"',title:'"pages/users.tsx"'},'import {\n    useTable,\n    List,\n    Table,\n    LayoutWrapper,\n} from "@pankod/refine";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n// highlight-start\nexport const UserList: React.FC = () => {\n    const { tableProps } = useTable<IPost>({\n        resource: "users"\n    });\n\n    return (\n        <LayoutWrapper>\n            <List title="Users">\n                <Table {...tableProps} rowKey="id">\n                    <Table.Column dataIndex="id" title="ID" sorter />\n                    <Table.Column dataIndex="firstName" title="Name" />\n                </Table>\n            </List>\n        </LayoutWrapper>\n    );\n};\n// highlight-end\ninterface IPost {\n    id: string;\n    firstName: string;\n}\n\nexport default UserList;\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Notice how we passed ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," prop to ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/table/useTable"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable")),". This is necessary since for ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," to be able to get ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," name from route, it needs to be a route parameter in a dynamic route. ",(0,a.kt)("a",{parentName:"p",href:"#standard-crud-page"},"Refer here")," where standard CRUD pages can be built with dynamic routing.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"We also used ",(0,a.kt)("inlineCode",{parentName:"p"},"<LayoutWrapper>")," to show the page in the layout provided to ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/components/refine-config"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>")),". This is deliberately opt-in to provide flexibility. ",(0,a.kt)("a",{parentName:"p",href:"#standart-crud-page"},"If you're building a standard CRUD page layout can be baked in automatically"),".")),(0,a.kt)("h3",{id:"ssr"},"SSR"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," uses ",(0,a.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"react-query")," in its hooks for data management. ",(0,a.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/guides/ssr#using-initialdata"},"Following react-query's guide"),", SSR can be achieved like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/users.tsx"',title:'"pages/users.tsx"'},'// highlight-next-line\nimport { GetServerSideProps } from "next";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport {\n    useTable,\n    List,\n    Table,\n    LayoutWrapper,\n// highlight-next-line\n    GetListResponse,\n} from "@pankod/refine";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n// highlight-start\nexport const UserList: React.FC<{ users: GetListResponse<IPost> }> = ({\n    users\n}) => {\n// highlight-end\n    const { tableProps } = useTable<IPost>({\n        resource: "users",\n// highlight-start\n        queryOptions: {\n            initialData: users,\n        },\n// highlight-end\n    });\n\n    return (\n        <LayoutWrapper>\n            <List title="Users">\n                <Table {...tableProps} rowKey="id">\n                    <Table.Column dataIndex="id" title="ID" sorter />\n                    <Table.Column dataIndex="firstName" title="Name" />\n                </Table>\n            </List>\n        </LayoutWrapper>\n    );\n};\n\n// highlight-start\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n    const data = await dataProvider(API_URL).getList({\n        resource: "users",\n    });\n\n    return {\n        props: { users: data },\n    };\n};\n// highlight-end\n\ninterface IPost {\n    id: string;\n    firstName: string;\n}\n\nexport default UserList;\n')),(0,a.kt)("p",null,"We use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/providers/data-provider#getlist"},(0,a.kt)("inlineCode",{parentName:"a"},"getList"))," method from our ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/providers/data-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider"))," to fetch ",(0,a.kt)("inlineCode",{parentName:"p"},"users")," data and pass through ",(0,a.kt)("inlineCode",{parentName:"p"},"props")," as conventionally done in Next.js. Then ",(0,a.kt)("inlineCode",{parentName:"p"},"users")," data is available in the props of our ",(0,a.kt)("inlineCode",{parentName:"p"},"/users")," page. ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/table/useTable"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," can take options for underlying react-query queries with ",(0,a.kt)("inlineCode",{parentName:"p"},"queryOptions"),". Passing ",(0,a.kt)("inlineCode",{parentName:"p"},"users")," data to its ",(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," loads the data on server side."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We used ",(0,a.kt)("inlineCode",{parentName:"p"},"getList")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," but data can be fetched in any way you desire.")),(0,a.kt)("h2",{id:"standard-crud-page"},"Standard CRUD Page"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"nextjs-router")," package provides ",(0,a.kt)("inlineCode",{parentName:"p"},"NextRouteComponent")," for pages with the dynamic route ",(0,a.kt)("inlineCode",{parentName:"p"},"/[resource]/[action]/[id]")," and root ",(0,a.kt)("inlineCode",{parentName:"p"},"/"),". Simply export the component from the page and add a ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/basic-features/data-fetching"},"data fetching function")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/[resource]/index.tsx"',title:'"pages/[resource]/index.tsx"'},'export { NextRouteComponent as default } from "@pankod/refine-nextjs-router";\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n    return { props: {} };\n};\n')),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"NextRouteComponent")," doesn't support ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/advanced-features/automatic-static-optimization"},"automatic static optimization")," currently, since it requires route parameters thus a data fetching function must be defined.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NextRouteComponent")," can be used in the following pages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pages/[resource].tsx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pages/[resource]/[action].tsx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pages/[resource]/[action]/[id].tsx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pages/index.tsx"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NextRouteComponent")," will use route parameters ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," and render the associated component defined in ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/components/refine-config"},(0,a.kt)("inlineCode",{parentName:"a"},"resources")),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," component will be rendered for ",(0,a.kt)("inlineCode",{parentName:"li"},"/[resource]")," route"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"edit")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"show")," will be rendered for ",(0,a.kt)("inlineCode",{parentName:"li"},"/[resource]/[action]")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"/[resource]/[action]/[id]")," routes"),(0,a.kt)("li",{parentName:"ul"},"For the root ",(0,a.kt)("inlineCode",{parentName:"li"},"/")," route, it will render ",(0,a.kt)("inlineCode",{parentName:"li"},"DashboardPage")," if it's defined and if not will navigate to the first resource in ",(0,a.kt)("inlineCode",{parentName:"li"},"resources"),".")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"NextRouteComponent")," will wrap the page with ",(0,a.kt)("inlineCode",{parentName:"p"},"Layout")," provided to ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/components/refine-config"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>")))),(0,a.kt)("h3",{id:"ssr-1"},"SSR"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NextRouteComponent")," accepts a ",(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," prop for SSR data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type NextRouteComponentProps = {\n    initialData?: any;\n};\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," must be passed as props from ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"NextRouteComponent")," will pass this data as ",(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," components."),(0,a.kt)("p",null,"For example, for a ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," component that will be rendered for ",(0,a.kt)("inlineCode",{parentName:"p"},"/[resource]"),", the page can use SSR like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/[resource]/index.tsx"',title:'"pages/[resource]/index.tsx"'},'export { NextRouteComponent as default } from "@pankod/refine-nextjs-router";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport { GetServerSideProps } from "next";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n\n    const { query } = context;\n\n   try {\n        const data = await dataProvider(API_URL).getList({\n            resource: query["resource"] as string,\n        });\n\n        return {\n            props: {\n                initialData: data,\n            },\n        };\n    } catch (error) {\n        return { props: {} };\n    }\n};\n\n')),(0,a.kt)("p",null,"And in the ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," component for a ",(0,a.kt)("inlineCode",{parentName:"p"},"resource"),' e.g. "posts":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/posts/list.tsx"',title:'"src/components/posts/list.tsx"'},'import {\n    useTable,\n    List,\n    Table,\n    GetListResponse,\n} from "@pankod/refine";\nimport type { IResourceComponentsProps } from "@pankod/refine";\n\nexport const PostList: React.FC<\n    IResourceComponentsProps<GetListResponse<IPost>>\n// highlight-next-line\n> = ({ initialData }) => {\n    const { tableProps } = useTable<IPost>({\n        // highlight-start\n        queryOptions: {\n            initialData,\n        },\n        // highlight-end\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="status" title="Status" />\n            </Table>\n        </List>\n    );\n};\n\ninterface IPost {\n    id: string;\n    firstName: string;\n}\n')),(0,a.kt)("h2",{id:"server-side-authentication"},"Server Side Authentication"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"nextjs-router")," package provides ",(0,a.kt)("inlineCode",{parentName:"p"},"checkAuthentication")," to easily handle server side authentication."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/[resource]/index.tsx"',title:'"pages/[resource]/index.tsx"'},'export { NextRouteComponent as default } from "@pankod/refine-nextjs-router";\n// highlight-next-line\nimport { checkAuthentication } from "@pankod/refine-nextjs-router";\n \nimport { GetServerSideProps } from "next";\n\nimport {authProvider} from "../../src/authProvider";\n \nconst API_URL = "https://api.fake-rest.refine.dev";\n \nexport const getServerSideProps: GetServerSideProps = async (context) => {\n \n    // highlight-start\n    const { isAuthenticated, ...props } = await checkAuthentication(\n        authProvider,\n        context,\n    );\n\n    if (!isAuthenticated) {\n        return props;\n    }\n    // highlight-end\n \n    return {\n        props: {},\n    };\n};\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"checkAuthentication")," expects your ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," and ",(0,a.kt)("strong",{parentName:"p"},"getServerSideProps"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"context"),". It uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"checkAuth")," from the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," to check for authentication and returns ",(0,a.kt)("inlineCode",{parentName:"p"},"isAuthenticated")," accordingly. It also returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect")," object to handle unauthenticated case. It redirects to ",(0,a.kt)("inlineCode",{parentName:"p"},"/login")," while keeping the original route to be navigated to after successful login."),(0,a.kt)("h2",{id:"syncwithlocation-and-query-parameters-in-ssr"},(0,a.kt)("inlineCode",{parentName:"h2"},"syncWithLocation")," and Query Parameters in SSR"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," is enabled, query parameters must be handled while doing SSR."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/users.tsx"',title:'"pages/users.tsx"'},'import { GetServerSideProps } from "next";\n// highlight-next-line\nimport { parseTableParamsFromQuery } from "@pankod/refine";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n\n    // highlight-start\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParamsFromQuery(context.query);\n    // highlight-end\n    const data = await dataProvider(API_URL).getList({\n        resource: "users",\n        // highlight-start\n        filters: parsedFilters,\n        pagination: {\n            current: parsedCurrent || 1,\n            pageSize: parsedPageSize || 10,\n        },\n        sort: parsedSorter,\n        // highlight-end\n    });\n\n    return {\n        props: { users: data },\n    };\n};\n\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"parseTableParams")," parses the query string and returns query parameters(",(0,a.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/interfaceReferences/#crudfilters"},"refer here for their interfaces"),"). They can be directly used for ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," methods that accepts them."),(0,a.kt)("h2",{id:"live-codesandbox-example"},"Live Codesandbox Example"),(0,a.kt)("iframe",{src:"https://codesandbox.io/embed/refine-next-q94fw?autoresize=1&fontsize=14&module=%2Fpages%2F_app.tsx&theme=dark&view=preview",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-next",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}c.isMDXComponent=!0}}]);