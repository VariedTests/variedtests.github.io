"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[53990],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),l=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,u=d["".concat(m,".").concat(h)]||d[h]||c[h]||i;return n?r.createElement(u,a(a({ref:t},p),{},{components:n})):r.createElement(u,a({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},82094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const i={id:"mui-custom-theme",title:"Theme"},a=void 0,s={unversionedId:"api-reference/mui/customization/mui-custom-theme",id:"api-reference/mui/customization/mui-custom-theme",title:"Theme",description:"Theme specifies the color of the components, the darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc. You can either create your own Theme or use Themes that provide from Refine. There are two types of Themes: LightTheme and DarkTheme. LightTheme tend to have dark text on a light background, while DarkTheme have light text on a dark background. Theme provides a way to your app's design to meet them.",source:"@site/docs/api-reference/mui/customization/theme.md",sourceDirName:"api-reference/mui/customization",slug:"/api-reference/mui/customization/mui-custom-theme",permalink:"/docs/api-reference/mui/customization/mui-custom-theme",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/mui/customization/theme.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{id:"mui-custom-theme",title:"Theme"},sidebar:"someSidebar",previous:{title:"Url",permalink:"/docs/api-reference/mui/components/fields/url"},next:{title:"Layout",permalink:"/docs/api-reference/mui/customization/mui-custom-layout"}},m={},l=[{value:"Theme Provider",id:"theme-provider",level:2},{value:"Passing the Theme to ThemeProvider",id:"passing-the-theme-to-themeprovider",level:2},{value:"Overriding Variables",id:"overriding-variables",level:2},{value:"Create Custom Theme",id:"create-custom-theme",level:2},{value:"Create Theme with Custom Variables",id:"create-theme-with-custom-variables",level:3},{value:"Dark Mode",id:"dark-mode",level:2},{value:"System Preference",id:"system-preference",level:3},{value:"Dark Mode Toggle",id:"dark-mode-toggle",level:3},{value:"Notification Snackbars compatible with Theme",id:"notification-snackbars-compatible-with-theme",level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Theme specifies the color of the components, the darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc. You can either create your own Theme or use Themes that provide from Refine. There are two types of Themes: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/theme/index.ts#L16"},(0,o.kt)("inlineCode",{parentName:"a"},"LightTheme"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/theme/index.ts#L46"},(0,o.kt)("inlineCode",{parentName:"a"},"DarkTheme")),". ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/theme/index.ts#L16"},(0,o.kt)("inlineCode",{parentName:"a"},"LightTheme"))," tend to have dark text on a light background, while ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/theme/index.ts#L46"},(0,o.kt)("inlineCode",{parentName:"a"},"DarkTheme"))," have light text on a dark background. Theme provides a way to your app's design to meet them."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/"},"Refer to the Material UI documentation for more information about Material UI Theming. ","\u2192")),(0,o.kt)("h2",{id:"theme-provider"},"Theme Provider"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#theme-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"ThemeProvider"))," component is a simple wrapper around React's Context API that allows you to inject a Theme object into your application. By default, Material-UI components come with a default Theme. In addition, you can also use the ThemeProvider component to inject a custom theme that you have created yourself. This is a feature that allows for great flexibility in how you design your application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx',title:'"src/App.tsx'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    // highlight-next-line\n    ThemeProvider,\n    CssBaseline,\n    GlobalStyles,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n\nconst App: React.FC = () => {\n    return (\n        // highlight-next-line\n        <ThemeProvider theme={YOUR_THEME_OBJECT}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                ReadyPage={ReadyPage}\n                Layout={Layout}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostsList,\n                        create: PostCreate,\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n            // highlight-next-line\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"We recommend using ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started/quickstart"},(0,o.kt)("inlineCode",{parentName:"a"},"create refine-app"))," to initialize your Refine projects. It configures the project according to your needs including SSR and Theme with Next.js.")),(0,o.kt)("h2",{id:"passing-the-theme-to-themeprovider"},"Passing the Theme to ThemeProvider"),(0,o.kt)("p",null,"In order to use the theme in your app, you just have one choice: pass it on! Refine provide two types of themes ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/theme/index.ts#L16"},(0,o.kt)("inlineCode",{parentName:"a"},"LightTheme"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/theme/index.ts#L46"},(0,o.kt)("inlineCode",{parentName:"a"},"DarkTheme")),"."),(0,o.kt)("p",null,"If you don't wrap your app with ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#theme-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"ThemeProvider"))," and theme, it looks like this when using the Material UI default:"),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/theme/mui/withoutTheme.png",alt:"App without ThemeProvider"})),(0,o.kt)("br",null),(0,o.kt)("p",null,"In our example, we will be using LightTheme."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    ThemeProvider,\n    CssBaseline,\n    GlobalStyles,\n    // highlight-next-line\n    LightTheme,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n\nconst App: React.FC = () => {\n    return (\n        // highlight-next-line\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                ReadyPage={ReadyPage}\n                Layout={Layout}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostsList,\n                        create: PostCreate,\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n')),(0,o.kt)("p",null,"The design has been changed to match the LightTheme, so you can enjoy these amazing interfaces without any hassle!"),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/theme/mui/withTheme.png",alt:"App with ThemeProvider"})),(0,o.kt)("h2",{id:"overriding-variables"},"Overriding Variables"),(0,o.kt)("p",null,"The best way to customize your theme is by changing the configuration variables. These sections cover some of those most important options, like ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/palette/"},(0,o.kt)("inlineCode",{parentName:"a"},"palette"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/typography/"},(0,o.kt)("inlineCode",{parentName:"a"},"typography")),"!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    ThemeProvider,\n    CssBaseline,\n    GlobalStyles,\n    LightTheme,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n\n// highlight-start\nconst overridedLightTheme = {\n    ...LightTheme,\n    palette: {\n        ...LightTheme.palette,\n        primary: {\n            main: "#44d0c7",\n        },\n        secondary: {\n            main: "#2f82f1",\n        },\n    },\n};\n// highlight-end\n\nconst App: React.FC = () => {\n    return (\n        // highlight-next-line\n        <ThemeProvider theme={overridedLightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                ReadyPage={ReadyPage}\n                Layout={Layout}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostsList,\n                        create: PostCreate,\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Get a designer's opinion anyway - you'll be happy with the end result!")),(0,o.kt)("p",null,"When we easy-override our LightTheme, it's going to look like this:"),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/theme/mui/overridedTheme.png",alt:"Theme variable override"})),(0,o.kt)("br",null),(0,o.kt)("p",null,"You can also change the Default Font Family. Refine uses the ",(0,o.kt)("a",{parentName:"p",href:"https://fonts.google.com/specimen/Montserrat"},(0,o.kt)("inlineCode",{parentName:"a"},"Montserrat"))," font family by default and you can change it like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    ThemeProvider,\n    CssBaseline,\n    LightTheme,\n    GlobalStyles,\n    // highlight-next-line\n    TypographyVariantsOptions,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n// highlight-start\n\nexport const typography: TypographyVariantsOptions = {\n    fontFamily: [\n        "Montserrat",\n        "-apple-system",\n        "BlinkMacSystemFont",\n        \'"Segoe UI"\',\n        "Roboto",\n        \'"Helvetica Neue"\',\n        "Arial",\n        "sans-serif",\n        \'"Apple Color Emoji"\',\n        \'"Segoe UI Emoji"\',\n        \'"Segoe UI Symbol"\',\n    ].join(","),\n};\n// highlight-end\n\n// highlight-start\nconst overridedLightTheme = {\n    ...LightTheme,\n    ...typography,\n};\n// highlight-end\n\nconst App: React.FC = () => {\n    return (\n        // highlight-next-line\n        <ThemeProvider theme={overridedLightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                ReadyPage={ReadyPage}\n                Layout={Layout}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostsList,\n                        create: PostCreate,\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/"},"Refer to the Material UI documentation for more information about Material UI Theme Configuration Variables. ","\u2192")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you are overriding the ",(0,o.kt)("inlineCode",{parentName:"p"},"fontFamily")," in typography, you can add the ",(0,o.kt)("inlineCode",{parentName:"p"},"<link>")," tags in your ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," like the following:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        // highlight-start\n        <link\n            href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap"\n            rel="stylesheet"\n        />\n        // highlight-end\n        <title>refine adding font family example</title>\n    </head>\n\n    <body>\n        ...\n    </body>\n</html>\n'))),(0,o.kt)("h2",{id:"create-custom-theme"},"Create Custom Theme"),(0,o.kt)("p",null,"With the help of Refine's themes, you can customize your site in a matter of minutes. Alternatively, there is also an option to create a custom theme with the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#createtheme-options-args-theme"},(0,o.kt)("inlineCode",{parentName:"a"},"createTheme()"))," method so you can create a custom theme with the configuration variables and use it in the whole application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    ThemeProvider,\n    CssBaseline,\n    GlobalStyles,\n    // highlight-next-line\n    createTheme,\n    // highlight-next-line\n    responsiveFontSizes,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n// highlight-start\nlet customTheme = createTheme({\n    palette: {\n        primary: {\n            main: "#330f49",\n        },\n        secondary: {\n            main: "#45d0c8",\n        },\n    },\n});\n// highlight-end\n\n// highlight-start\ncustomTheme = responsiveFontSizes(customTheme);\n// highlight-end\n\nconst App: React.FC = () => {\n    return (\n        // highlight-next-line\n        <ThemeProvider theme="https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/theme/mui/customTheme.png">\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                ReadyPage={ReadyPage}\n                Layout={Layout}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostsList,\n                        create: PostCreate,\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can use the responsiveFontSizes() helper to make Typography font sizes in your theme automated.\nFor more information, you can review ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/typography/#responsive-font-sizes"},(0,o.kt)("inlineCode",{parentName:"a"},"responsiveFontSizes()"))," in the mui document.")),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/customTheme.png",alt:"Custom Theme"})),(0,o.kt)("h3",{id:"create-theme-with-custom-variables"},"Create Theme with Custom Variables"),(0,o.kt)("p",null,"Creating a theme with default variables is easy and we can see it in the example above. You can also create your theme with custom variables, you can check it out our example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'const customTheme = createTheme({\n    customVariable: {\n        custom: "#330f49",\n    },\n});\n')),(0,o.kt)("p",null,"You need to use ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation"},(0,o.kt)("inlineCode",{parentName:"a"},"module augmentation"))," for the theme to accept your custom values."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces/theme.d.ts"',title:'"src/interfaces/theme.d.ts"'},'import "@pankod/refine-mui";\n\nexport interface CustomTheme {\n    customVariable: {\n        custom: string;\n    };\n}\n\ndeclare module "@pankod/refine-mui" {\n    interface Theme extends import("@pankod/refine-mui").Theme, CustomTheme {}\n    interface ThemeOptions\n        extends import("@pankod/refine-mui").ThemeOptions,\n            CustomTheme {}\n}\n')),(0,o.kt)("p",null,"You can see an example of how to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/examples/finefoods-mui/src/theme.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"create your own theme with custom variables"))," and its ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/examples/finefoods-mui/src/interfaces/theme.d.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"interface"))," by accessing the links."),(0,o.kt)("h2",{id:"dark-mode"},"Dark Mode"),(0,o.kt)("p",null,"You might prefer to use dark mode in your applications. If you want to add dark mode to your application, you can easily use ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-use-media-query/"},(0,o.kt)("inlineCode",{parentName:"a"},"useMediaQuery"))," to set your color mode or dynamic toggle to switch your mode by using a context. This will help you maintain a consistent look and feel throughout your app."),(0,o.kt)("h3",{id:"system-preference"},"System Preference"),(0,o.kt)("p",null,"With the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-use-media-query/"},(0,o.kt)("inlineCode",{parentName:"a"},"useMediaQuery"))," hook, you can query a user's preference for light or dark mode and then adjust your site accordingly. This will make things easier on those who prefer darker colors as it simplifies their experience by eliminating any confusion about what browser they are using!\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    ThemeProvider,\n    CssBaseline,\n    GlobalStyles,\n    // highlight-next-line\n    useMediaQuery,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n// highlight-next-line\nconst prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)");\n\nconst App: React.FC = () => {\n    return (\n        // highlight-next-line\n        <ThemeProvider theme={prefersDarkMode ? DarkTheme : LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                ReadyPage={ReadyPage}\n                Layout={Layout}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostsList,\n                        create: PostCreate,\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n')),(0,o.kt)("h3",{id:"dark-mode-toggle"},"Dark Mode Toggle"),(0,o.kt)("p",null,"Control the Dark Mode with just one click! We prepared an example that shows how you can manage to toggle Dark Mode with help of a context in your Header component, which is given as a prop to Refine."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Dark Mode Toggle Code Example"),(0,o.kt)("div",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"ColorModeContext"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/contexts/index.tsx"',title:'"src/contexts/index.tsx"'},'import React, {\n    PropsWithChildren,\n    createContext,\n    useEffect,\n    useState,\n} from "react";\nimport { ThemeProvider } from "@pankod/refine-mui";\nimport { DarkTheme, LightTheme } from "@pankod/refine-mui";\n\ntype ColorModeContextType = {\n    mode: string;\n    setMode: () => void;\n};\n\nexport const ColorModeContext = createContext<ColorModeContextType>(\n    {} as ColorModeContextType,\n);\n\nexport const ColorModeContextProvider: React.FC<PropsWithChildren> = ({\n    children,\n}) => {\n    const colorModeFromLocalStorage = localStorage.getItem("colorMode");\n    const isSystemPreferenceDark = window?.matchMedia(\n        "(prefers-color-scheme: dark)",\n    ).matches;\n\n    const systemPreference = isSystemPreferenceDark ? "dark" : "light";\n    const [mode, setMode] = useState(\n        colorModeFromLocalStorage || systemPreference,\n    );\n\n    useEffect(() => {\n        window.localStorage.setItem("colorMode", mode);\n    }, [mode]);\n\n    const setColorMode = () => {\n        if (mode === "light") {\n            setMode("dark");\n        } else {\n            setMode("light");\n        }\n    };\n\n    return (\n        <ColorModeContext.Provider\n            value={{\n                setMode: setColorMode,\n                mode,\n            }}\n        >\n            <ThemeProvider theme={mode === "light" ? LightTheme : DarkTheme}>\n                {children}\n            </ThemeProvider>\n        </ColorModeContext.Provider>\n    );\n};\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"App.tsx"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    CssBaseline,\n    RefineSnackbarProvider,\n    notificationProvider,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\nimport { ColorModeContextProvider, ColorModeContext } from "./contexts";\n\nconst Header = () => {\n    const { mode, setMode } = useContext(ColorModeContext);\n    return (\n        <AppBar color="default" position="sticky">\n            <Stack width="100%" direction="row" justifyContent="end">\n                <Box marginRight="20px">\n                    <IconButton\n                        onClick={() => {\n                            setMode();\n                        }}\n                    >\n                        {mode === "dark" ? (\n                            <LightModeOutlined />\n                        ) : (\n                            <DarkModeOutlined />\n                        )}\n                    </IconButton>\n                </Box>\n            </Stack>\n        </AppBar>\n    );\n};\n\nconst App: React.FC = () => {\n    return (\n        <ColorModeContextProvider>\n            <CssBaseline />\n            <RefineSnackbarProvider>\n                <Refine\n                    notificationProvider={notificationProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    ReadyPage={ReadyPage}\n                    Layout={Layout}\n                    catchAll={<ErrorComponent />}\n                    Header={Header}\n                    resources={[\n                        {\n                            name: "posts",\n                            list: PostsList,\n                            create: PostCreate,\n                            edit: PostEdit,\n                        },\n                    ]}\n                />\n            </RefineSnackbarProvider>\n        </ColorModeContextProvider>\n    );\n};\n\nexport default App;\n')))))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://stackblitz.com/github/refinedev/refine/tree/master/examples/customization-theme-mui/?preset=node"},"You can use this StackBlitz link to access this example. ","\u2192")),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/theme/mui/toggleDarkMode.gif",alt:"Dark Mode"})),(0,o.kt)("h2",{id:"notification-snackbars-compatible-with-theme"},"Notification Snackbars compatible with Theme"),(0,o.kt)("p",null,"We use the ",(0,o.kt)("a",{parentName:"p",href:"https://iamhosseindhv.com/notistack"},(0,o.kt)("inlineCode",{parentName:"a"},"notistack"))," library for notifications in our Material UI package provides an elegant way to engage with your users.\nThe main motivation for us to use the Notistack was that while the Notistack provider ( ",(0,o.kt)("inlineCode",{parentName:"p"},"<SnackbarProvider>")," ) is a child of our ThemeProvider, it works in harmony with the theme."),(0,o.kt)("p",null,"We provide ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/providers/refineSnackbarProvider/index.tsx"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefineSnackbarProvider>"))," that extended ",(0,o.kt)("inlineCode",{parentName:"p"},"<SnackbarProvider>")," with theme style. You have to wrap Refine with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/providers/refineSnackbarProvider/index.tsx"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefineSnackbarProvider>"))," and also pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"notificationProvider")," as props."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    LightTheme\n    ErrorComponent,\n    ReadyPage,\n    ThemeProvider,\n    CssBaseline,\n    GlobalStyles,\n    // highlight-next-line\n    RefineSnackbarProvider,\n    // highlight-next-line\n    notificationProvider\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            // highlight-next-line\n            <RefineSnackbarProvider>\n                <Refine\n                    notificationProvider={notificationProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                    ReadyPage={ReadyPage}\n                    Layout={Layout}\n                    catchAll={<ErrorComponent />}\n                    resources={[\n                        {\n                            name: "posts",\n                            list: PostsList,\n                            create: PostCreate,\n                            edit: PostEdit,\n                        },\n                    ]}\n                />\n            // highlight-next-line\n            <RefineSnackbarProvider />\n        </ThemeProvider>\n\n    );\n};\n\nexport default App;\n')),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/theme/mui/notistackTheme.gif",alt:"Notistack Snackbars with Theme"})),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you want to use notistack snackbars with the default style, simply wrap Refine in ",(0,o.kt)("inlineCode",{parentName:"p"},"<SnackbarProvider>"),".")))}d.isMDXComponent=!0}}]);