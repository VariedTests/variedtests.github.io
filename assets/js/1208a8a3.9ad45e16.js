"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[68533],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,g=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},52626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={id:"useTable",title:"useTable"},l=void 0,o={unversionedId:"api-reference/antd/hooks/table/useTable",id:"api-reference/antd/hooks/table/useTable",title:"useTable",description:"By using useTable, you are able to get properties that are compatible with Ant Design `` component. All features such as sorting, filtering and pagination comes as out of box.",source:"@site/docs/api-reference/antd/hooks/table/useTable.md",sourceDirName:"api-reference/antd/hooks/table",slug:"/api-reference/antd/hooks/table/useTable",permalink:"/docs/api-reference/antd/hooks/table/useTable",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/table/useTable.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{id:"useTable",title:"useTable"},sidebar:"someSidebar",previous:{title:"useEditableTable",permalink:"/docs/api-reference/antd/hooks/table/useEditableTable"},next:{title:"useModal",permalink:"/docs/api-reference/antd/hooks/ui/useModal"}},s={},p=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Listing",id:"listing",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Initial sort status",id:"initial-sort-status",level:3},{value:"Filtering",id:"filtering",level:2},{value:"Default filter value",id:"default-filter-value",level:3},{value:"API",id:"api",level:2},{value:"Properties",id:"properties",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values",level:3},{value:"Example",id:"example",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=d("PropsTable"),m=d("StackblitzExample"),c={toc:p};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By using useTable, you are able to get properties that are compatible with Ant Design ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table/"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table>"))," component. All features such as sorting, filtering and pagination comes as out of box."),(0,r.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"Lets say that the data we are going to show on the table came like this from the endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="https://api.fake-rest.refine.dev/posts"',title:'"https://api.fake-rest.refine.dev/posts"'},'[\n    {\n        "id": 182,\n        "title": "A aspernatur rerum molestiae.",\n        "content": "Natus molestias incidunt voluptatibus. Libero delectus facilis...",\n        "status": "published"\n    },\n    {\n        "id": 989,\n        "title": "A molestiae vel voluptatem enim.",\n        "content": "Voluptas consequatur quia beatae. Ipsa est qui culpa deleniti...",\n        "status": "draft",\n        "createdAt": "2020-01-28T02:57:58.892Z"\n    }\n]\n')),(0,r.kt)("p",null,"If we want to make a sorting page where we show the ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'import { List, Table, TextField, useTable } from "@pankod/refine-antd";\n\nexport const PostList: React.FC = () => {\n    // highlight-next-line\n    const { tableProps } = useTable<IPost>();\n\n    return (\n        <List>\n            // highlight-start\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="title" title="Title" />\n                <Table.Column dataIndex="content" title="Content" />\n            </Table>\n            // highlight-end\n        </List>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In a page in resource given to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," component, ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," decides which sources are going to be shown automatically.\nIf you want to show the data that comes from the endpoint of another ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," . You can do so with the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource: string")," option in the option object that the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable(options)")," hook takes.\nIf the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," option is given, ",(0,r.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," will not work."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany")," while pulling data from the given resource.")),(0,r.kt)("h2",{id:"listing"},"Listing"),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to make a change in the pagination of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>"),". You should pass the pagination object of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tableProps")," to the pagination property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>")," as below."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable<IPost>();\n\n<Table\n    {...tableProps}\n    rowKey="id"\n    // highlight-start\n    pagination={{\n        ...tableProps.pagination,\n        position: ["bottomCenter"],\n        size: "small",\n    }}\n    // highlight-end\n>\n    ...\n</Table>;\n'))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To disable pagination, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," which is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," by default. If ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," has set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", pagination elements will be hidden in the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table/>"),". If you want to handle the pagination on the client-side you can override the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," property in ",(0,r.kt)("inlineCode",{parentName:"p"},"tableProps"),".")),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,"If we want to give a column the sorting property, the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table.Column>")," component must be given the ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#components-table-demo-head"},"sorter")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'import {\n    List,\n    Table,\n    TextField,\n    useTable,\n    // highlight-next-line\n    getDefaultSortOrder,\n} from "@pankod/refine-antd";\n\nexport const PostList: React.FC = () => {\n    // highlight-next-line\n    const { tableProps, sorter } = useTable<IPost>();\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column\n                    dataIndex="id"\n                    title="ID"\n                    render={(value) => <TextField value={value} />}\n                    // highlight-start\n                    sorter\n                    defaultSortOrder={getDefaultSortOrder("id", sorter)}\n                    // highlight-end\n                />\n                <Table.Column\n                    dataIndex="title"\n                    title="Title"\n                    render={(value) => <TextField value={value} />}\n                    // highlight-start\n                    sorter={{ multiple: 1 }}\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                    // highlight-end\n                />\n                <Table.Column dataIndex="content" title="Content" />\n            </Table>\n        </List>\n    );\n};\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"During the sorting process, the ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," property of your ",(0,r.kt)("inlineCode",{parentName:"p"},"<Column />")," component is used as the property name in the API request. If your Column component does not have a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," value, the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataIndex")," property is used.\nIt can be used when your DataIndex and your sorting key are different.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When using multiple sorting, ",(0,r.kt)("inlineCode",{parentName:"p"},"multiple")," value we had given to the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorter")," property specifies the priority of this column in sorting.")),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/hooks/useTable/table-sorting.gif",alt:"Table sorting in action"})),(0,r.kt)("h3",{id:"initial-sort-status"},"Initial sort status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'const { tableProps, sorter } = useTable<IPost>({\n    // highlight-start\n    initialSorter: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n    // highlight-end\n});\n')),(0,r.kt)("p",null,"By using ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," setting, you can select which ",(0,r.kt)("inlineCode",{parentName:"p"},"field")," is going to start with which sorting status (",(0,r.kt)("inlineCode",{parentName:"p"},'"asc"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"desc"'),")."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you're using the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter"),", don't forget to add ",(0,r.kt)("inlineCode",{parentName:"p"},"getDefaultSortOrder")," to your ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table.Column>")," component. Otherwise, during filter and paging operations, the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," might be lost."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'...\n<Table.Column\n    dataIndex="title"\n    title="Title"\n    sorter={{ multiple: 2 }}\n    // highlight-next-line\n    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n/>\n...\n'))),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"Every ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," that comes from endpoint has a ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," value. This value can either be ",(0,r.kt)("inlineCode",{parentName:"p"},"published")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"draft"),". We can show the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," value with a Ant Design ",(0,r.kt)("inlineCode",{parentName:"p"},"<TagField>"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'...\n<Table.Column\n    dataIndex="status"\n    title="Status"\n    render={(value) => <TagField value={value} />}\n/>\n...\n')),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterDropdown")," property to make filtering based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," value. In order to do this, we need to put the filtering form inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"<FilterDropdown>")," component and pass the properties coming to the function to these component's properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'import {\n    List,\n    Table,\n    // highlight-start\n    Radio,\n    FilterDropdown,\n    // highlight-end\n    TagField,\n    useTable,\n    getDefaultSortOrder,\n} from "@pankod/refine-antd";\n\nexport const PostList: React.FC = () => {\n    const { tableProps, sorter } = useTable<IPost>({\n        initialSorter: [\n            {\n                field: "title",\n                order: "asc",\n            },\n        ],\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" sorter />\n                <Table.Column\n                    dataIndex="title"\n                    title="Title"\n                    sorter={{ multiple: 2 }}\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                />\n                <Table.Column\n                    dataIndex="content"\n                    title="Content"\n                    sorter={{ multiple: 1 }}\n                />\n                <Table.Column\n                    dataIndex="status"\n                    title="Status"\n                    render={(value) => <TagField value={value} />}\n                    // highlight-start\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Radio.Group>\n                                <Radio value="published">Published</Radio>\n                                <Radio value="draft">Draft</Radio>\n                                <Radio value="rejected">Rejected</Radio>\n                            </Radio.Group>\n                        </FilterDropdown>\n                    )}\n                    // highlight-end\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/hooks/useTable/filters.gif",alt:"Table filtering in action"})),(0,r.kt)("h3",{id:"default-filter-value"},"Default filter value"),(0,r.kt)("p",null,"In order to set a default filter value, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," option of the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable(options)")," hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'const { tableProps, sorter, filters } = useTable<IPost>({\n    initialSorter: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n    initialFilter: [\n        {\n            field: "status",\n            operator: "eq",\n            value: "draft",\n        },\n    ],\n});\n')),(0,r.kt)("p",null,"If you give default filter values, ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultFilteredValue")," property needs to be properly given to the relevant ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table.Column>")," components so that those filter fields come with default values when the page is opened."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'// highlight-next-line\nimport { getDefaultFilter } from "@pankod/refine-core";\nimport {\n    List,\n    Table,\n    Radio,\n    FilterDropdown,\n    TagField,\n    useTable,\n    getDefaultSortOrder,\n} from "@pankod/refine-antd";\n\nexport const PostList: React.FC = () => {\n    const { tableProps, sorter, filters } = useTable<IPost>({\n        initialSorter: [\n            {\n                field: "title",\n                order: "asc",\n            },\n        ],\n        // highlight-start\n        initialFilter: [\n            {\n                field: "status",\n                operator: "eq",\n                value: "draft",\n            },\n        ],\n        // highlight-end\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" sorter />\n                <Table.Column\n                    dataIndex="title"\n                    title="Title"\n                    sorter={{ multiple: 2 }}\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                />\n                <Table.Column\n                    dataIndex="content"\n                    title="Content"\n                    sorter={{ multiple: 1 }}\n                />\n                <Table.Column\n                    dataIndex="status"\n                    title="Status"\n                    render={(value) => <TagField value={value} />}\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Radio.Group>\n                                <Radio value="published">Published</Radio>\n                                <Radio value="draft">Draft</Radio>\n                                <Radio value="rejected">Rejected</Radio>\n                            </Radio.Group>\n                        </FilterDropdown>\n                    )}\n                    // highlight-next-line\n                    defaultFilteredValue={getDefaultFilter("status", filters)}\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Filters we give to ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," are default filters. In order to prevent filters from being changed, ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," must be used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter"),".")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)(u,{module:"@pankod/refine-antd/useTable",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Desription"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data of the query. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TSearchVariables"),(0,r.kt)("td",{parentName:"tr",align:null},"Values for search params"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("h3",{id:"return-values"},"Return values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"searchFormProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant Design ",(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"<Form>"))," props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"FormProps<TSearchVariables>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant Design ",(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table>"))," props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"TableProps<TData>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableQueryResult"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the ",(0,r.kt)("inlineCode",{parentName:"td"},"react-query"),"'s ",(0,r.kt)("inlineCode",{parentName:"td"},"useQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," data: TData[];"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," total: number; },"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," TError>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"current"),(0,r.kt)("td",{parentName:"tr",align:null},"Current page index state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"totalPage"),(0,r.kt)("td",{parentName:"tr",align:null},"Total page count (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setCurrent"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the current (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Current pageSize state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setPageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the pageSize. (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sorter"),(0,r.kt)("td",{parentName:"tr",align:null},"Current sorting state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters"),(0,r.kt)("td",{parentName:"tr",align:null},"Current filters state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setFilters"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new filter state"),(0,r.kt)("td",{parentName:"tr",align:null},"- ",(0,r.kt)("inlineCode",{parentName:"td"},'(filters: CrudFilters, behavior?: "merge" \\| "replace" = "merge") => void')," ",(0,r.kt)("br",null)," - ",(0,r.kt)("inlineCode",{parentName:"td"},"(setter: (previousFilters: CrudFilters) => CrudFilters) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setSorter"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorter state."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(sorter: CrudSorting) => void"))))),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(m,{path:"table-antd-use-table",mdxType:"StackblitzExample"}))}g.isMDXComponent=!0}}]);