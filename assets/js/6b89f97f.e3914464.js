"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[55476],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(n),k=r,c=m["".concat(p,".").concat(k)]||m[k]||u[k]||i;return n?a.createElement(c,o(o({ref:t},s),{},{components:n})):a.createElement(c,o({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},64581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={id:"useDataGrid",title:"useDataGrid"},o=void 0,l={unversionedId:"api-reference/mui/hooks/useDataGrid",id:"api-reference/mui/hooks/useDataGrid",title:"useDataGrid",description:"By using useDataGrid, you are able to get properties that are compatible with MUI X ` component. All features such as sorting, filtering and pagination comes as out of box. For all the other features, you can refer to the MUI X ` documentation.",source:"@site/docs/api-reference/mui/hooks/useDataGrid.md",sourceDirName:"api-reference/mui/hooks",slug:"/api-reference/mui/hooks/useDataGrid",permalink:"/docs/api-reference/mui/hooks/useDataGrid",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/mui/hooks/useDataGrid.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{id:"useDataGrid",title:"useDataGrid"},sidebar:"someSidebar",previous:{title:"useAutocomplete",permalink:"/docs/api-reference/mui/hooks/useAutocomplete"},next:{title:"<AuthPage>",permalink:"/docs/api-reference/mui/components/mui-auth-page"}},p={},d=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Filtering",id:"filtering",level:2},{value:"API",id:"api",level:2},{value:"Properties",id:"properties",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values",level:3},{value:"Example",id:"example",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=s("PropsTable"),u=s("StackblitzExample"),k={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By using ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataGrid"),", you are able to get properties that are compatible with MUI X ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," component. All features such as sorting, filtering and pagination comes as out of box. For all the other features, you can refer to the MUI X ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/x/react-data-grid/"},(0,r.kt)("inlineCode",{parentName:"a"},"<DataGrid>"))," documentation."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook works in compatible with both the ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGridPro>")," component.")),(0,r.kt)("p",null,"This hook is extended from ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useTable"},(0,r.kt)("inlineCode",{parentName:"a"},"useTable"))," from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/core"},(0,r.kt)("inlineCode",{parentName:"a"},"@pankod/refine-core"))," package."),(0,r.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"Let's assume that the data we are going to show on the table came like this from the endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="https://api.fake-rest.refine.dev/posts"',title:'"https://api.fake-rest.refine.dev/posts"'},'[\n    {\n        "id": 1,\n        "title": "A aspernatur rerum molestiae.",\n        "content": "Natus molestias incidunt voluptatibus. Libero delectus facilis...",\n        "status": "published"\n    },\n    {\n        "id": 2,\n        "title": "A molestiae vel voluptatem enim.",\n        "content": "Voluptas consequatur quia beatae. Ipsa est qui culpa deleniti...",\n        "status": "draft"\n    }\n]\n')),(0,r.kt)("p",null,"To see basic usage, let's create a table with the ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," columns."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/src/pages/posts/list.tsx"',title:'"/src/pages/posts/list.tsx"'},'import React from "react";\nimport { useDataGrid, DataGrid, GridColumns, List } from "@pankod/refine-mui";\n\nconst columns: GridColumns = [\n    {\n        field: "id",\n        headerName: "ID",\n        type: "number",\n    },\n    { field: "title", headerName: "Title" },\n    { field: "status", headerName: "Status" },\n];\n\nexport const PostsList: React.FC = () => {\n    const { dataGridProps } = useDataGrid<IPost>();\n\n    return (\n        <List>\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Within the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," component, a resource page knows which resource name it has by reading from the URL."),(0,r.kt)("p",{parentName:"admonition"},"If you want to use a different resource name, you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," as a prop like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { dataGridProps } = useDataGrid({\n    //highlight-next-line\n    resource: "categories",\n});\n')),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"If the resource option is given, ",(0,r.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," will not work."))),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"The hook handles pagination by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"paginationMode"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"page"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onPageChange"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onPageSizeChange")," props that are compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To disable pagination, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," which is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," by default. If pagination is disabled, ",(0,r.kt)("inlineCode",{parentName:"p"},"hideFooterPagination")," property will be send as ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"paginationMode"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"page,")," ",(0,r.kt)("inlineCode",{parentName:"p"},"onPageChange"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onPageSizeChange")," set to undefined.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export const PostsList: React.FC = () => {\n    const { dataGridProps } = useDataGrid();\n\n    const {\n        //highlight-start\n        paginationMode,\n        page,\n        onPageChange,\n        pageSize,\n        onPageSizeChange,\n        //highlight-end\n        ...restDataGridProps\n    } = dataGridProps;\n\n    return (\n        <List>\n            <DataGrid\n                columns={columns}\n                {...restDataGridProps}\n                //highlight-start\n                paginationMode={paginationMode}\n                page={page}\n                onPageChange={onPageChange}\n                pageSize={pageSize}\n                onPageSizeChange={onPageSizeChange}\n                //highlight-end\n                autoHeight\n            />\n        </List>\n    );\n};\n")),(0,r.kt)("p",null,"Above, you can see the pagination properties from ",(0,r.kt)("inlineCode",{parentName:"p"},"dataGridProps"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To see how the pagination works, you can look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/master/packages/master/src/hooks/useDataGrid/index.ts"},"source code")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can set initial values for the pagination by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"initialCurrent")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"initialPageSize")," props."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { dataGridProps } = useDataGrid({\n    initialCurrent: 2,\n    initialPageSize: 10,\n});\n"))),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,"The hook handles sorting by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"sortingMode"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sortModel")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onSortModelChange"),"props that are compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export const PostsList: React.FC = () => {\n    const { dataGridProps } = useDataGrid();\n\n    //highlight-start\n    const { sortingMode, sortModel, onSortModelChange, ...restDataGridProps } =\n        dataGridProps;\n    //highlight-end\n\n    return (\n        <List>\n            <DataGrid\n                columns={columns}\n                {...restDataGridProps}\n                //highlight-start\n                sortingMode={sortingMode}\n                sortModel={sortModel}\n                onSortModelChange={onSortModelChange}\n                //highlight-end\n                autoHeight\n            />\n        </List>\n    );\n};\n")),(0,r.kt)("p",null,"Above, you can see the sorting properties from ",(0,r.kt)("inlineCode",{parentName:"p"},"dataGridProps"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To see how the sorting works, you can look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/master/packages/master/src/hooks/useDataGrid/index.ts"},"source code")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," prop to set initial sorting and ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentSorter")," prop to set permanent sorting."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { dataGridProps } = useDataGrid({\n    initialSorter: [{ field: "id", order: "desc" }],\n    permanentSorter: [{ field: "title", order: "asc" }],\n});\n'))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you want to sort externally from the ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," component. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"setSorter")," like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    useDataGrid,\n    DataGrid,\n    GridColumns,\n    List,\n    Button,\n    ButtonGroup,\n} from "@pankod/refine-mui";\n\nconst columns: GridColumns = [\n    {\n        field: "id",\n        headerName: "ID",\n        type: "number",\n    },\n    { field: "title", headerName: "Title" },\n    { field: "status", headerName: "Status" },\n];\n\nexport const PostsList: React.FC = () => {\n    const { dataGridProps, setSorter } = useDataGrid();\n\n    const handleSorting = (order: "asc" | "desc") => {\n        setSorter([\n            {\n                field: "title",\n                order,\n            },\n        ]);\n    };\n\n    return (\n        <List>\n            <ButtonGroup variant="outlined">\n                <Button onClick={() => handleSorting("asc")}>Asc</Button>\n                <Button onClick={() => handleSorting("desc")}>Desc</Button>\n            </ButtonGroup>\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n')),(0,r.kt)("p",{parentName:"admonition"},"Mui X community version only sorts the rows according to one criterion at a time. To use multi-sorting, you need to upgrade to the ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/pricing/"},"Pro plan"),"."),(0,r.kt)("p",{parentName:"admonition"},"However, multiple sorting can be done as server-side without specifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"sortModel"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"return <DataGrid {...dataGridProps} sortModel={undefined} autoHeight />;\n")),(0,r.kt)("p",{parentName:"admonition"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"sortModel")," is not passed, it supports more than one criteria at a time, but cannot show which fields are sorted in ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," headers.")),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"The hook handles filtering by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterMode"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filterModel")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onFilterModelChange"),"props that are compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export const PostsList: React.FC = () => {\n    const { dataGridProps } = useDataGrid();\n\n    //highlight-start\n    const {\n        filterMode,\n        filterModel,\n        onFilterModelChange,\n        ...restDataGridProps\n    } = dataGridProps;\n    //highlight-end\n\n    return (\n        <List>\n            <DataGrid\n                columns={columns}\n                {...restDataGridProps}\n                //highlight-start\n                filterMode={filterMode}\n                filterModel={filterModel}\n                onFilterModelChange={onFilterModelChange}\n                //highlight-end\n                autoHeight\n            />\n        </List>\n    );\n};\n")),(0,r.kt)("p",null,"Above, you can see the filtering properties from ",(0,r.kt)("inlineCode",{parentName:"p"},"dataGridProps"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To see how the filtering works, you can look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/master/packages/master/src/hooks/useDataGrid/index.ts"},"source code")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," prop to set initial filter and ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," prop to set permanent filter."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { dataGridProps } = useDataGrid({\n    initialFilter: [{ field: "title", value: "lorem", operator: "contains" }],\n    permanentFilter: [{ field: "status", value: "draft", operator: "eq" }],\n});\n'))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you want to filter externally from the ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," component. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"setFilter")," like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    useDataGrid,\n    DataGrid,\n    GridColumns,\n    List,\n    FormControlLabel,\n    Checkbox,\n} from "@pankod/refine-mui";\n\nconst columns: GridColumns = [\n    {\n        field: "id",\n        headerName: "ID",\n        type: "number",\n    },\n    { field: "title", headerName: "Title" },\n    { field: "status", headerName: "Status" },\n];\n\nexport const PostsList: React.FC = () => {\n    const { dataGridProps, setFilters } = useDataGrid();\n\n    const handleFilter = (\n        e: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean,\n    ) => {\n        setFilters([\n            {\n                field: "status",\n                value: checked ? "draft" : undefined,\n                operator: "eq",\n            },\n        ]);\n    };\n\n    return (\n        <List>\n            <FormControlLabel\n                label="Filter by Draft Status"\n                control={<Checkbox onChange={handleFilter} />}\n            />\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n')),(0,r.kt)("p",{parentName:"admonition"},"Mui X community version only filter the rows according to one criterion at a time. To use multi-filtering, you need to upgrade to the ",(0,r.kt)("a",{parentName:"p",href:"#"},"Pro plan"),"."),(0,r.kt)("p",{parentName:"admonition"},"However, multiple filtering can be done as server-side without specifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterModel"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"return <DataGrid {...dataGridProps} filterModel={undefined} autoHeight />;\n")),(0,r.kt)("p",{parentName:"admonition"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"filterModel")," is not passed, it supports more than one criteria at a time, but cannot show which fields are filtered in ",(0,r.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," headers.")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)(m,{module:"@pankod/refine-mui/useDataGrid",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Desription"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data of the query. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TSearchVariables"),(0,r.kt)("td",{parentName:"tr",align:null},"Values for search params"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("h3",{id:"return-values"},"Return values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dataGridProps"),(0,r.kt)("td",{parentName:"tr",align:null},"MUI X ",(0,r.kt)("a",{parentName:"td",href:"https://mui.com/x/react-data-grid/"},(0,r.kt)("inlineCode",{parentName:"a"},"<DataGrid>"))," props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DataGridPropsType"),"*")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableQueryResult"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the ",(0,r.kt)("inlineCode",{parentName:"td"},"react-query"),"'s ",(0,r.kt)("inlineCode",{parentName:"td"},"useQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," data: TData[];"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," total: number; },"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," TError>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"search"),(0,r.kt)("td",{parentName:"tr",align:null},"It sends the parameters it receives to its ",(0,r.kt)("inlineCode",{parentName:"td"},"onSearch")," function"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(value: TSearchVariables) => Promise<void>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"current"),(0,r.kt)("td",{parentName:"tr",align:null},"Current page index state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"totalPage"),(0,r.kt)("td",{parentName:"tr",align:null},"Total page count (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setCurrent"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the current (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Current pageSize state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setPageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the pageSize (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hideFooterPagination"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to hide the footer pagination or not. This value is only returned if ",(0,r.kt)("inlineCode",{parentName:"td"},"hasPagination")," is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sorter"),(0,r.kt)("td",{parentName:"tr",align:null},"Current sorting state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setSorter"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorter state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(sorter: CrudSorting) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters"),(0,r.kt)("td",{parentName:"tr",align:null},"Current filters state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setFilters"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new filter state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(filters: CrudFilters) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"createLinkForSyncWithLocation"),(0,r.kt)("td",{parentName:"tr",align:null},"A function create accessible links for syncWithLocation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(params: "),(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#syncwithlocationparams"},"SyncWithLocationParams"),(0,r.kt)("inlineCode",{parentName:"td"},") => string;"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"DataGridProps")),(0,r.kt)("table",{parentName:"blockquote"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rows"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"25"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rowCount"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"onPageSizeChange"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disableSelectionOnClick"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"sortingMode"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"server"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loading"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"sortModel"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"paginationMode"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"server"')),(0,r.kt)("td",{parentName:"tr",align:null},"onSortModelChange"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"page"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"filterMode"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"server"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onPageChange"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"filterModel"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onStateChange"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"onFilterModelChange"),(0,r.kt)("td",{parentName:"tr",align:null}))))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onStateChange")," callback is used internally by the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook. If you want to override it, you can use like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export const PostsList: React.FC = () => {\n    const { dataGridProps } = useDataGrid<IPost>();\n\n    return (\n        <List>\n            <DataGrid\n                {...dataGridProps}\n                columns={columns}\n                autoHeight\n                //highlight-start\n                onStateChange={(state) => {\n                    dataGridProps.onStateChange(state);\n                    // do something else\n                }}\n                //highlight-end\n            />\n        </List>\n    );\n};\n"))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(u,{path:"table-mui-use-data-grid",mdxType:"StackblitzExample"}))}c.isMDXComponent=!0}}]);