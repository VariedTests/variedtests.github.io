"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[19494],{19494:e=>{e.exports=JSON.parse('{"filePath":"/home/runner/work/variedtests.github.io/variedtests.github.io/packages/core/src/index.tsx","description":"`useCustom` is a modified version of `react-query`\'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\\n\\nIt uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.","displayName":"useCustom","props":{"url":{"defaultValue":null,"description":"request\'s URL","name":"url","required":true,"type":{"name":"string"},"tags":{}},"method":{"defaultValue":null,"description":"request\'s method (`GET`, `POST`, etc.)","name":"method","required":true,"type":{"name":"\\"get\\" | \\"delete\\" | \\"head\\" | \\"options\\" | \\"post\\" | \\"put\\" | \\"patch\\"","raw":"\\"get\\" | \\"delete\\" | \\"head\\" | \\"options\\" | \\"post\\" | \\"put\\" | \\"patch\\"","value":[{"value":"\\"get\\""},{"value":"\\"delete\\""},{"value":"\\"head\\""},{"value":"\\"options\\""},{"value":"\\"post\\""},{"value":"\\"put\\""},{"value":"\\"patch\\""}]},"tags":{}},"config":{"defaultValue":null,"description":"The config of your request. You can send headers, payload, query, filters and sort using this field","name":"config","required":false,"type":{"name":"UseCustomConfig<TQuery, TPayload>"},"tags":{}},"queryOptions":{"defaultValue":null,"description":"react-query\'s [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\\"","name":"queryOptions","required":false,"type":{"name":"any"},"tags":{}},"metaData":{"defaultValue":null,"description":"Metadata query for `dataProvider`","name":"metaData","required":false,"type":{"name":"[MetaDataQuery](/docs/api-reference/core/interfaceReferences/#metadataquery)"},"tags":{}},"dataProviderName":{"defaultValue":null,"description":"If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.","name":"dataProviderName","required":false,"type":{"name":"string"},"tags":{}},"successNotification":{"defaultValue":{"value":"\'\\"There was an error creating resource (status code: `statusCode`)\\" or \\"Error when updating resource (status code: statusCode)\\"\'"},"description":"Success notification configuration to be displayed when the mutation is successful.","name":"successNotification","required":false,"type":{"name":"false | OpenNotificationParams | (data, values, resource) => OpenNotificationParams"},"tags":{"default":"\'\\"There was an error creating resource (status code: `statusCode`)\\" or \\"Error when updating resource (status code: statusCode)\\"\'"}},"errorNotification":{"defaultValue":{"value":"\'\\"There was an error creating resource (status code: `statusCode`)\\" or \\"Error when updating resource (status code: statusCode)\\"\'"},"description":"Error notification configuration to be displayed when the mutation fails.","name":"errorNotification","required":false,"type":{"name":"false | OpenNotificationParams | (error, values, resource) => OpenNotificationParams"},"tags":{"default":"\'\\"There was an error creating resource (status code: `statusCode`)\\" or \\"Error when updating resource (status code: statusCode)\\"\'"}}},"generatedAt":1671164284775}')}}]);