"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[74523],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(87462),r=n(67294),o=n(86010),i=n(72389),s=n(67392),p=n(7094),l=n(12466);const d="tabList__CuJ",m="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:i,values:c,groupId:u,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=c??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,s.l)(f,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:v}=(0,p.U)(),[b,C]=(0,r.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:P}=(0,l.o5)();if(null!=u){const e=N[u];null!=e&&e!==b&&f.some((t=>t.value===e))&&C(e)}const x=e=>{const t=e.currentTarget,n=w.indexOf(t),a=f[n].value;a!==b&&(P(t),C(a),null!=u&&v(u,String(a)))},T=e=>{let t=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},h)},f.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,key:t,ref:e=>w.push(e),onKeyDown:T,onClick:x},i,{className:(0,o.Z)("tabs__item",m,i?.className,{"tabs__item--active":b===t})}),n??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==b})))))}function u(e){const t=(0,i.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},51732:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>p,metadata:()=>d,toc:()=>c});var a=n(87462),r=n(67294),o=n(3905),i=n(65488),s=n(85162);const p={id:"material-ui-tutorial",title:"Your First App using Material UI"},l=void 0,d={unversionedId:"tutorials/material-ui-tutorial",id:"tutorials/material-ui-tutorial",title:"Your First App using Material UI",description:"Introduction",source:"@site/docs/tutorials/mui.md",sourceDirName:"tutorials",slug:"/tutorials/material-ui-tutorial",permalink:"/docs/tutorials/material-ui-tutorial",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/tutorials/mui.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1671163008,formattedLastUpdatedAt:"Dec 16, 2022",frontMatter:{id:"material-ui-tutorial",title:"Your First App using Material UI"},sidebar:"someSidebar",previous:{title:"Your First App using Mantine",permalink:"/docs/tutorials/mantine-tutorial"},next:{title:"Your First Headless App using Tailwind.css",permalink:"/docs/tutorials/headless-tutorial"}},m={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Setting up",id:"setting-up",level:2},{value:"About Fake REST API",id:"about-fake-rest-api",level:2},{value:"Using a Dataprovider",id:"using-a-dataprovider",level:2},{value:"Bootstrapping the Application",id:"bootstrapping-the-application",level:2},{value:"Adding Resources",id:"adding-resources",level:2},{value:"Creating a List Page",id:"creating-a-list-page",level:2},{value:"Handling relationships",id:"handling-relationships",level:2},{value:"Adding search and filters",id:"adding-search-and-filters",level:2},{value:"Showing a single record",id:"showing-a-single-record",level:2},{value:"Editing a record",id:"editing-a-record",level:2},{value:"Creating a record",id:"creating-a-record",level:2},{value:"Deleting a record",id:"deleting-a-record",level:2},{value:"Example",id:"example",level:2},{value:"Next Steps",id:"next-steps",level:2}],u=(h="StackblitzExample",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var h;const g={toc:c};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This tutorial will go through process of building a simple ",(0,o.kt)("em",{parentName:"p"},"admin panel")," for a ",(0,o.kt)("em",{parentName:"p"},"CMS-like")," application."),(0,o.kt)("p",null,"Step by step, you're going to learn how to consume a ",(0,o.kt)("em",{parentName:"p"},"REST API")," and add basic CRUD functionality to your panel leveraging the unique capabilities of ",(0,o.kt)("strong",{parentName:"p"},"refine"),"."),(0,o.kt)("p",null,"Let's begin by setting up a new ",(0,o.kt)("strong",{parentName:"p"},"refine")," project."),(0,o.kt)("h2",{id:"setting-up"},"Setting up"),(0,o.kt)("p",null,"There are two alternative methods to set up a ",(0,o.kt)("strong",{parentName:"p"},"refine")," application."),(0,o.kt)("p",null,"The recommended way is using the ",(0,o.kt)("inlineCode",{parentName:"p"},"create refine-app")," tool. ",(0,o.kt)("em",{parentName:"p"},"create refine-app"),"'s ",(0,o.kt)("em",{parentName:"p"},"CLI wizard")," will let you create and customize your application in seconds."),(0,o.kt)("p",null,"Alternatively, you may use the ",(0,o.kt)("em",{parentName:"p"},"create-react-app")," tool to create an empty ",(0,o.kt)("em",{parentName:"p"},"React")," application and then add ",(0,o.kt)("strong",{parentName:"p"},"refine")," module via ",(0,o.kt)("em",{parentName:"p"},"npm"),"."),(0,o.kt)(i.Z,{defaultValue:"create-refine-app",values:[{label:"use create refine-app",value:"create-refine-app"},{label:"use create-react-app",value:"create-react-app"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"create-react-app",mdxType:"TabItem"},(0,o.kt)("p",null,"First, run the ",(0,o.kt)("em",{parentName:"p"},"create-react-app")," tool to bootstrap an empty ",(0,o.kt)("em",{parentName:"p"},"React project"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npx create-react-app tutorial --template typescript\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("em",{parentName:"p"},"--template typescript")," flag will ensure that the Typescript language is selected.")),(0,o.kt)("p",null,"Navigate to the project folder and install ",(0,o.kt)("strong",{parentName:"p"},"refine")," with the following ",(0,o.kt)("em",{parentName:"p"},"npm")," command:"),(0,o.kt)(i.Z,{defaultValue:"npm",values:[{label:"use npm",value:"npm"},{label:"use yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-core @pankod/refine-mui @pankod/refine-react-router-v6 @pankod/refine-react-hook-form\n"))),(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add  @pankod/refine-core @pankod/refine-mui @pankod/refine-react-router-v6 @pankod/refine-react-hook-form\n")))),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"This tutorial assumes your project is configured for absolute imports. Since CRA does not configure it by default, you should configure it yourself to be able to use absolute imports. You should configure a ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#baseUrl"},(0,o.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," with ",(0,o.kt)("inlineCode",{parentName:"p"},"baseUrl")," setting pointing to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/src")," directory in your project."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/importing-a-component/#absolute-imports"},"Refer to CRA docs for more information about absolute imports. ","\u2192")))),(0,o.kt)(s.Z,{value:"create-refine-app",mdxType:"TabItem"},(0,o.kt)("p",null,"First, run the ",(0,o.kt)("strong",{parentName:"p"},"create refine-app")," with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm create refine-app@latest -- -o refine-mui tutorial\n")))),(0,o.kt)("h2",{id:"about-fake-rest-api"},"About Fake REST API"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"refine")," is designed to consume data from APIs."),(0,o.kt)("p",null,"For the sake of this tutorial, we will provide you a fully working, ",(0,o.kt)("em",{parentName:"p"},"fake REST API")," located at ",(0,o.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/"},"https://api.fake-rest.refine.dev/"),". You may take a look at available ",(0,o.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/"},"resources and routes of the API")," before proceeding to the next step."),(0,o.kt)("h2",{id:"using-a-dataprovider"},"Using a Dataprovider"),(0,o.kt)("p",null,"Dataproviders are ",(0,o.kt)("strong",{parentName:"p"},"refine")," components making it possible to consume different API's and data services conveniently. To consume our ",(0,o.kt)("em",{parentName:"p"},"Fake REST API"),", we'll use the ",(0,o.kt)("strong",{parentName:"p"},'"Simple REST Dataprovider"'),"."),(0,o.kt)("p",null,"Next, navigate to the project folder and run the following command to install the required package:"),(0,o.kt)(i.Z,{defaultValue:"npm",values:[{label:"use npm",value:"npm"},{label:"use yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-simple-rest\n"))),(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @pankod/refine-simple-rest\n")))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you used ",(0,o.kt)("inlineCode",{parentName:"p"},"create refine-app")," to bootstrap the project, you can skip issuing this command as ",(0,o.kt)("inlineCode",{parentName:"p"},"create refine-app")," already installs the selected data provider.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Fake REST API is based on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server"},"JSON Server Project"),". ",(0,o.kt)("strong",{parentName:"p"},"Simple REST Dataprovider")," is fully compatible with the REST rules and methods of the ",(0,o.kt)("strong",{parentName:"p"},"JSON Server"),".")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," includes many out-of-the-box data providers to use in your projects like"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/simple-rest"},"Simple REST API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/graphql"},"GraphQL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nestjsx-crud"},"NestJS CRUD")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/airtable"},"Airtable")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi"},"Strapi")," - ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-v4"},"Strapi v4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-graphql"},"Strapi GraphQL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/supabase"},"Supabase")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/hasura"},"Hasura")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nhost"},"Nhost")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/appwrite"},"Appwrite")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/medusa"},"Medusa")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/altogic"},"Altogic"))),(0,o.kt)("h3",{parentName:"admonition",id:"community-\ufe0f"},"Community \u2764\ufe0f"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/rturan29/refine-firebase"},"Firebase")," by ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/rturan29"},"rturan29")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-rest"},"Elide")," by ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar"))),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider")," documentation for detailed usage. ","\u2192"))),(0,o.kt)("h2",{id:"bootstrapping-the-application"},"Bootstrapping the Application"),(0,o.kt)("p",null,"Replace the contents of ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    LightTheme,\n    CssBaseline,\n    ThemeProvider,\n    GlobalStyles,\n    RefineSnackbarProvider,\n    notificationProvider,\n} from "@pankod/refine-mui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    notificationProvider={notificationProvider}\n                    Layout={Layout}\n                    ReadyPage={ReadyPage}\n                    catchAll={<ErrorComponent />}\n                />\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"<CssBaseline>")," is a component that is used to apply the global reset CSS to the application. You may refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-css-baseline/"},(0,o.kt)("strong",{parentName:"a"},"CssBaseline")," documentation")," for more information."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"<GlobalStyles>")," is a component that is used to apply the global styles to the application. You may refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/global-styles/"},(0,o.kt)("strong",{parentName:"a"},"GlobalStyles")," documentation")," for more information.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Refine application uses ",(0,o.kt)("a",{parentName:"p",href:"https://fonts.google.com/specimen/Montserrat"},(0,o.kt)("inlineCode",{parentName:"a"},"Montserrat"))," font by default as it is defined in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/mui/src/theme/typography.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"typography"))," property of the theme. But to use ",(0,o.kt)("a",{parentName:"p",href:"https://fonts.google.com/specimen/Montserrat"},(0,o.kt)("inlineCode",{parentName:"a"},"Montserrat")),", you need to embed it to your ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," file.\nFor more information about adding font family in your Refine application, you can look at ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/customization/mui-custom-theme#overriding-variables"},(0,o.kt)("inlineCode",{parentName:"a"},"Material UI Theme Customization")),"."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        // highlight-start\n        <link\n            href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap"\n            rel="stylesheet"\n        />\n        // highlight-end\n        <title>refine adding font family example</title>\n    </head>\n\n    <body>\n        ...\n    </body>\n</html>\n'))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," comes native with Light/Dark theme support. Check out the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/customization/mui-custom-theme"},(0,o.kt)("inlineCode",{parentName:"a"},"theme"))," documentation for more information.")),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Refine/>")," is the root component of a ",(0,o.kt)("strong",{parentName:"p"},"refine")," application. Using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider"))," prop, we made our ",(0,o.kt)("strong",{parentName:"p"},"Simple REST Dataprovider")," available to the entire application."),(0,o.kt)("p",null,"Run the following command to launch the app in development mode:"),(0,o.kt)(i.Z,{defaultValue:"create-refine-app",values:[{label:"with create refine-app",value:"create-refine-app"},{label:"with create-react-app",value:"create-react-app"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"create-refine-app",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm run dev\n"))),(0,o.kt)(s.Z,{value:"create-react-app",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm run start\n")))),(0,o.kt)("p",null,"Your ",(0,o.kt)("strong",{parentName:"p"},"refine")," application should be up and running!",(0,o.kt)("br",{parentName:"p"}),"\n","Point your browser to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," to access it. You will see the welcome page."),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/mui/ready-page.png",alt:"Ready Page"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"adding-resources"},"Adding Resources"),(0,o.kt)("p",null,"Now we are ready to start connecting to our API by adding a resource to our application."),(0,o.kt)("p",null,"Let's add ",(0,o.kt)("strong",{parentName:"p"},"/posts/")," endpoint from our API as a resource. First take a look to the raw API response for the request made to the ",(0,o.kt)("strong",{parentName:"p"},"/posts/")," route:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Show response"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="GET https://api.fake-rest.refine.dev/posts/"',title:'"GET','https://api.fake-rest.refine.dev/posts/"':!0},'[\n  {\n    "id": 1,\n    "title": "Eius ea autem sapiente placeat fuga voluptas quos quae.",\n    "slug": "beatae-esse-dolor",\n    "content": "Explicabo nihil delectus. Nam aliquid sunt numquam...",\n    "category": {\n      "id": 24\n    },\n    "user": {\n      "id": 7\n    },\n    "status": "draft",\n    "createdAt": "2021-03-13T03:09:30.186Z",\n    "image": [],\n    "tags": [\n      7,\n      4\n    ],\n    "language": 2\n  },\n  ...\n]\n')))),(0,o.kt)("br",null),(0,o.kt)("p",null,"Now, add the highlighted code to your ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," to connect to the endpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ReadyPage,\n    ErrorComponent,\n    LightTheme,\n    CssBaseline,\n    GlobalStyles,\n    ThemeProvider,\n    RefineSnackbarProvider,\n    notificationProvider,\n} from "@pankod/refine-mui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nexport const App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    notificationProvider={notificationProvider}\n                    Layout={Layout}\n                    ReadyPage={ReadyPage}\n                    catchAll={<ErrorComponent />}\n                    // highlight-next-line\n                    resources={[{ name: "posts" }]}\n                />\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"resources")," is a property of ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine/>")," representing API Endpoints. The ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property of every single resource should match one of the endpoints in your API!")),(0,o.kt)("p",null,"Instead of showing the welcome page, the application should redirect now to an URL defined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property. Open your application to check that the URL is routed to ",(0,o.kt)("strong",{parentName:"p"},"/posts"),":"),(0,o.kt)(r.Fragment,null,(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/mui/resource-1.png",alt:"Resource only with name"})),(0,o.kt)("br",null)),(0,o.kt)("p",null,"You'll still see a ",(0,o.kt)("strong",{parentName:"p"},"404")," error page because no ",(0,o.kt)("strong",{parentName:"p"},"Page")," component is assigned to our resource yet."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"resources")," use ",(0,o.kt)("strong",{parentName:"p"},"Page")," components to handle data and perform rendering. ",(0,o.kt)("strong",{parentName:"p"},"Page")," components are passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"resources")," as an array of objects.\nFor basic ",(0,o.kt)("em",{parentName:"p"},"CRUD")," operations, there are ",(0,o.kt)("strong",{parentName:"p"},"four")," predefined props: ",(0,o.kt)("strong",{parentName:"p"},"list"),", ",(0,o.kt)("strong",{parentName:"p"},"create"),", ",(0,o.kt)("strong",{parentName:"p"},"edit")," and ",(0,o.kt)("strong",{parentName:"p"},"show"),".")),(0,o.kt)("p",null,"Let's create a ",(0,o.kt)("strong",{parentName:"p"},"Page")," component to fetch ",(0,o.kt)("strong",{parentName:"p"},"posts")," and display them as a table. Later, we will pass the component as the ",(0,o.kt)("strong",{parentName:"p"},"list")," prop to our resource."),(0,o.kt)("h2",{id:"creating-a-list-page"},"Creating a List Page"),(0,o.kt)("p",null,"First, we'll need an interface to work with the data from the API endpoint."),(0,o.kt)("p",null,"Create a new folder named ",(0,o.kt)("em",{parentName:"p"},'"interfaces"')," under ",(0,o.kt)("em",{parentName:"p"},'"/src"')," if you don't already have one. Then create a ",(0,o.kt)("em",{parentName:"p"},'"index.d.ts"')," file with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="interfaces/index.d.ts"',title:'"interfaces/index.d.ts"'},'export interface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n    createdAt: string;\n}\n')),(0,o.kt)("p",null,"We'll be using ",(0,o.kt)("strong",{parentName:"p"},"title"),", ",(0,o.kt)("strong",{parentName:"p"},"status")," and ",(0,o.kt)("strong",{parentName:"p"},"createdAt")," fields of every ",(0,o.kt)("strong",{parentName:"p"},"post")," record."),(0,o.kt)("p",null,"Now, create a new folder named ",(0,o.kt)("em",{parentName:"p"},'"pages/posts"')," under ",(0,o.kt)("em",{parentName:"p"},'"/src"'),". Under that folder, create a ",(0,o.kt)("em",{parentName:"p"},'"list.tsx"')," file with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport {\n    useDataGrid,\n    DataGrid,\n    GridColumns,\n    TagField,\n    DateField,\n    List,\n} from "@pankod/refine-mui";\n\nimport { IPost } from "interfaces";\n\nconst columns: GridColumns<IPost> = [\n    { field: "title", headerName: "Title", flex: 1, minWidth: 350 },\n    {\n        field: "status",\n        headerName: "Status",\n        minWidth: 150,\n        flex: 1,\n        renderCell: function render(params) {\n            return <TagField value={params.row.status} />;\n        },\n    },\n    {\n        field: "createdAt",\n        headerName: "CreatedAt",\n        minWidth: 220,\n        renderCell: function render(params) {\n            return <DateField format="LLL" value={params.row.createdAt} />;\n        },\n    },\n];\n\nexport const PostList: React.FC = () => {\n    const { dataGridProps } = useDataGrid<IPost>();\n\n    return (\n        <List>\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"We didn't use arrow functions for rendering cell because of the react/display-name is not compatible with arrow functions. If you want to use arrow functions, you can use like this:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},"// eslint-disable-next-line react/display-name\nrenderCell: (params) => <TagField value={params.row.status} />;\n"))),(0,o.kt)("br",null),(0,o.kt)("p",null,"Let's break down the ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList/>")," component to understand what's going on here:"),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>")," is a native ",(0,o.kt)("strong",{parentName:"p"},"Material UI")," component. It renders records row by row as a table.\n",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>")," expects a ",(0,o.kt)("inlineCode",{parentName:"p"},"columns")," prop as a required."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," uses ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/x/react-data-grid/#mit-version"},"Material UI")," components to render data.\nYou may refer to ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/x/api/data-grid/data-grid/"},"Material UI Docs")," for further information about the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>")," component.")),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook is a helper function to simplify the creation of a ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>")," component. ",(0,o.kt)("inlineCode",{parentName:"p"},"useDataGrid()")," is passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>")," component as ",(0,o.kt)("inlineCode",{parentName:"p"},"{...dataGridProps}"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook works in compatible with both the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGridPro>")," component.")),(0,o.kt)("p",null,"This is the point where the \u2728real magic\u2728 happens!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"refine")," hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useDataGrid()")," fetches data from API and wraps them with various helper hooks required for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>")," component. Data interaction functions like ",(0,o.kt)("strong",{parentName:"p"},"sorting"),", ",(0,o.kt)("strong",{parentName:"p"},"filtering"),", and ",(0,o.kt)("strong",{parentName:"p"},"pagination")," will be instantly available on the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>")," with this single line of code."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," depends heavily on hooks and ",(0,o.kt)("inlineCode",{parentName:"p"},"useDataGrid()")," is only one among many others.\nOn ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/hooks/useDataGrid"},"useDataGrid() documentation")," you may find more information about the usage of this hook.")),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"columns")," array are used for mapping and formatting each field shown on the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid/>"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"field")," prop maps the field to a matching key from the API response. ",(0,o.kt)("inlineCode",{parentName:"p"},"renderCell")," prop is used to choose the appropriate ",(0,o.kt)("strong",{parentName:"p"},"Field")," component for the given data type and also you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"valueGetter")," prop is used to format the data."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The example uses ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/fields/tag"},(0,o.kt)("inlineCode",{parentName:"a"},"<TagField>"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/fields/date"},(0,o.kt)("inlineCode",{parentName:"a"},"<DateField>"))," components.")),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<List>")," is a ",(0,o.kt)("strong",{parentName:"p"},"refine")," component. It acts as a wrapper to ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," to add some extras like ",(0,o.kt)("em",{parentName:"p"},"Create Button")," and ",(0,o.kt)("em",{parentName:"p"},"title"),"."),(0,o.kt)("p",null,"Finally, we are ready to add ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," to our resource. Add the highlighted line to your ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    LoginPage,\n    ErrorComponent,\n    ReadyPage,\n    LightTheme,\n    CssBaseline,\n    GlobalStyles,\n    ThemeProvider,\n    notificationProvider,\n    RefineSnackbarProvider,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\n// highlight-next-line\nimport { PostList } from "pages/posts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(API_URL)}\n                    notificationProvider={notificationProvider}\n                    ReadyPage={ReadyPage}\n                    Layout={Layout}\n                    catchAll={<ErrorComponent />}\n                    resources={[\n                        {\n                            name: "posts",\n                            // highlight-next-line\n                            list: PostList,\n                        },\n                    ]}\n                />\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n')),(0,o.kt)("p",null,"Note you will need a few more files which help ",(0,o.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," to find your pages and posts. In the ",(0,o.kt)("inlineCode",{parentName:"p"},"/pages")," folder, put this ",(0,o.kt)("inlineCode",{parentName:"p"},"index.tsx")," file in it which allows everything in the ",(0,o.kt)("inlineCode",{parentName:"p"},"posts")," folder to be used elsewhere."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/index.tsx"',title:'"src/pages/index.tsx"'},'export * from "./posts";\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Similarly, put a file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/src/pages/posts")," folder which accomplishes the same function. We will use the commented out code later as we add more capabilities to our app. Remember as you add functions, uncomment each appropriate line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/index.tsx"',title:'"src/pages/posts/index.tsx"'},'export * from "./list";\n// export * from "./edit";\n// export * from "./create";\n// export * from "./show";\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Open your application in your browser. You will see ",(0,o.kt)("strong",{parentName:"p"},"posts")," are displayed correctly in a table structure and even the pagination works out-of-the box."),(0,o.kt)("p",null,"On the next step, we are going to add a category field to the table which involves handling data relationships."),(0,o.kt)(r.Fragment,null,(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/mui/resource-2.png",alt:"Resource only List component"})),(0,o.kt)("br",null)),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"handling-relationships"},"Handling relationships"),(0,o.kt)("p",null,"Remember the records from ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint that had a category id field."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/posts/1"',title:'"https://api.fake-rest.refine.dev/posts/1"'},'...\n  "category": {\n    "id": 26\n  }\n...\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"To display category titles on our table, we need to category id to their corresponding titles.\nThe category title data can be obtained from the ",(0,o.kt)("inlineCode",{parentName:"p"},"/categories")," endpoint for each record."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/categories/26"',title:'"https://api.fake-rest.refine.dev/categories/26"'},'  {\n    "id": 26,\n    "title": "mock category title",\n  }\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"At this point, we need to join records from different resources. For this, we're going to use the refine hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useMany"),"."),(0,o.kt)("p",null,"Before we start, just edit our interface for the new ",(0,o.kt)("inlineCode",{parentName:"p"},"ICategory")," type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="interfaces/index.d.ts"',title:'"interfaces/index.d.ts"'},'// highlight-start\nexport interface ICategory {\n    id: number;\n    title: string;\n}\n// highlight-end\n\nexport interface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n    // highlight-next-line\n    category: { id: number };\n    createdAt: string;\n}\n')),(0,o.kt)("p",null,"So we can update our ",(0,o.kt)("inlineCode",{parentName:"p"},"list.tsx")," with the highlighted lines:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\n// highlight-next-line\nimport { useMany } from "@pankod/refine-core";\nimport {\n    useDataGrid,\n    DataGrid,\n    GridColumns,\n    TagField,\n    DateField,\n    List,\n} from "@pankod/refine-mui";\n\n// highlight-next-line\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { dataGridProps } = useDataGrid<IPost>();\n\n    // highlight-start\n    const categoryIds = dataGridProps.rows.map((item) => item.category.id);\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n    // highlight-end\n\n    const columns = React.useMemo<GridColumns<IPost>>(\n        () => [\n            { field: "title", headerName: "Title", flex: 1, minWidth: 350 },\n            // highlight-start\n            {\n                field: "category.id",\n                headerName: "Category",\n                type: "number",\n                minWidth: 250,\n                flex: 1,\n                renderCell: function render({ row }) {\n                    if (isLoading) {\n                        return "Loading...";\n                    }\n\n                    const category = categoriesData?.data.find(\n                        (item) => item.id === row.category.id,\n                    );\n                    return category?.title;\n                },\n            },\n            // highlight-end\n            {\n                field: "status",\n                headerName: "Status",\n                minWidth: 150,\n                flex: 1,\n                renderCell: function render(params) {\n                    return <TagField value={params.row.status} />;\n                },\n            },\n            {\n                field: "createdAt",\n                headerName: "CreatedAt",\n                minWidth: 220,\n                renderCell: function render(params) {\n                    return (\n                        <DateField format="LLL" value={params.row.createdAt} />\n                    );\n                },\n            },\n        ],\n        // highlight-next-line\n        [categoriesData, isLoading],\n    );\n\n    return (\n        <List>\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,"We construct an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"categoryId"),"'s from ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint and pass it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"useMany")," hook. ",(0,o.kt)("inlineCode",{parentName:"p"},"categoriesData")," will be filled with ",(0,o.kt)("em",{parentName:"p"},"id-title")," tuples to be used for rendering our component."),(0,o.kt)("p",null,"Try the result on your browser and you'll notice that the category column is filled correctly with the matching category titles for the each record's category id's. Even the loading state is managed by ",(0,o.kt)("strong",{parentName:"p"},"refine"),"."),(0,o.kt)("p",null,"To get more detailed information about this hook, please refer the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany"},"useMany Documentation"),"."),(0,o.kt)("h2",{id:"adding-search-and-filters"},"Adding search and filters"),(0,o.kt)("p",null,"We're done with displaying ",(0,o.kt)("inlineCode",{parentName:"p"},"post")," records on our ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid>"),". Let's see search and filtering capabilities to the component, so that the user can have more control over the data."),(0,o.kt)("p",null,"Thanks ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/x/react-data-grid/components/#main-content"},(0,o.kt)("inlineCode",{parentName:"a"},"<DataGrid>"))," for the default ",(0,o.kt)("inlineCode",{parentName:"p"},"filtering")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sorting")," UI. The ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/hooks/useDataGrid"},(0,o.kt)("inlineCode",{parentName:"a"},"useDataGrid"))," hook works in harmony with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," component, and you have ",(0,o.kt)("inlineCode",{parentName:"p"},"filtering")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sorting")," without additional code. Our way to handle these is to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useDataGrid")," hook and pass the props to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<DataGrid>")," component."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To see how the filtering works and more detail, you can look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/hooks/useDataGrid#sorting"},(0,o.kt)("inlineCode",{parentName:"a"},"useDataGrid"))," hook.")),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/mui/filter.gif",alt:"Filter and search"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"showing-a-single-record"},"Showing a single record"),(0,o.kt)("p",null,"At this point we are able to list all ",(0,o.kt)("em",{parentName:"p"},"post")," records on the table component with pagination, sorting and filtering functionality. Next, we are going to add a ",(0,o.kt)("em",{parentName:"p"},"details page")," to fetch and display data from a single record."),(0,o.kt)("p",null,"Let's create a ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostShow>")," component on ",(0,o.kt)("inlineCode",{parentName:"p"},"/pages/posts")," folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/show.tsx"',title:'"src/pages/posts/show.tsx"'},'import { useOne, useShow } from "@pankod/refine-core";\nimport { Show, Stack, Typography, TagField } from "@pankod/refine-mui";\n\nimport { ICategory, IPost } from "interfaces";\n\nexport const PostShow: React.FC = () => {\n    const { queryResult } = useShow<IPost>();\n\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    const { data: categoryData } = useOne<ICategory>({\n        resource: "categories",\n        id: record?.category.id || "",\n        queryOptions: {\n            enabled: !!record?.category.id,\n        },\n    });\n\n    return (\n        <Show isLoading={isLoading}>\n            <Stack gap={1}>\n                <Typography variant="body1" fontWeight="bold">\n                    Title\n                </Typography>\n                <Typography variant="body2">{record?.title}</Typography>\n                <Typography variant="body1" fontWeight="bold">\n                    Status\n                </Typography>\n                <Typography variant="body2">\n                    <TagField value={record?.status} />\n                </Typography>\n                <Typography variant="body1" fontWeight="bold">\n                    Category\n                </Typography>\n                <Typography variant="body2">\n                    {categoryData?.data.title}\n                </Typography>\n            </Stack>\n        </Show>\n    );\n};\n')),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"useShow()")," is a ",(0,o.kt)("strong",{parentName:"p"},"refine")," hook used to fetch a single record of data. The ",(0,o.kt)("inlineCode",{parentName:"p"},"queryResult")," has the response and also ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," state."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/show/useShow"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useShow")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("p",null,"\u2733\ufe0f To retrieve the category title, again we need to make a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"/categories")," endpoint. This time we used ",(0,o.kt)("inlineCode",{parentName:"p"},"useOne()")," hook to get a single record from another resource."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useOne"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useOne")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("admonition",{title:"attention",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"useShow()")," is the preferred hook for fetching data from the current resource. To query foreign resources you may use the low-level ",(0,o.kt)("inlineCode",{parentName:"p"},"useOne()")," hook.")),(0,o.kt)("p",null,"Since we've got access to raw data returning from ",(0,o.kt)("inlineCode",{parentName:"p"},"useShow()"),", there is no restriction on how it's displayed on your components. If you prefer presenting your content with a nicer wrapper, ",(0,o.kt)("strong",{parentName:"p"},"refine")," provides you\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component which has extra features like ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"refresh")," buttons."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/basic-views/show"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<Show>")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("br",null),(0,o.kt)("p",null,"Now we can add the newly created component to our resource with ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    LoginPage,\n    ErrorComponent,\n    ReadyPage,\n    LightTheme,\n    CssBaseline,\n    GlobalStyles,\n    ThemeProvider,\n    RefineSnackbarProvider,\n    notificationProvider,\n} from "@pankod/refine-mui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// highlight-next-line\nimport { PostList, PostShow } from "./pages/posts";\n\nexport const App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    Layout={Layout}\n                    ReadyPage={ReadyPage}\n                    catchAll={<ErrorComponent />}\n                    // highlight-start\n                    resources={[\n                        {\n                            name: "posts",\n                            list: PostList,\n                            show: PostShow,\n                        },\n                    ]}\n                    // highlight-end\n                />\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"And then we can add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<ShowButton>")," on the list page to make it possible for users to navigate to detail pages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport { useMany } from "@pankod/refine-core";\nimport {\n    useDataGrid,\n    DataGrid,\n    GridColumns,\n    ShowButton,\n    TagField,\n    DateField,\n    List,\n} from "@pankod/refine-mui";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { dataGridProps } = useDataGrid<IPost>();\n\n    const categoryIds = dataGridProps.rows.map((item) => item.category.id);\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    const columns = React.useMemo<GridColumns<IPost>>(\n        () => [\n            { field: "title", headerName: "Title", flex: 1, minWidth: 350 },\n            // highlight-start\n            {\n                field: "category.id",\n                headerName: "Category",\n                type: "number",\n                minWidth: 250,\n                flex: 1,\n                renderCell: function render({ row }) {\n                    if (isLoading) {\n                        return "Loading...";\n                    }\n\n                    const category = categoriesData?.data.find(\n                        (item) => item.id === row.category.id,\n                    );\n                    return category?.title;\n                },\n            },\n            // highlight-end\n            {\n                field: "status",\n                headerName: "Status",\n                minWidth: 150,\n                flex: 1,\n                renderCell: function render(params) {\n                    return <TagField value={params.row.status} />;\n                },\n            },\n            {\n                field: "createdAt",\n                headerName: "CreatedAt",\n                minWidth: 220,\n                renderCell: function render(params) {\n                    return (\n                        <DateField format="LLL" value={params.row.createdAt} />\n                    );\n                },\n            },\n            // highlight-start\n            {\n                headerName: "Actions",\n                field: "actions",\n                minWidth: 250,\n                renderCell: function render(params) {\n                    return <ShowButton hideText recordItemId={params.row.id} />;\n                },\n            },\n            // highlight-end\n        ],\n        [categoriesData, isLoading],\n    );\n\n    return (\n        <List>\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/mui/show.gif",alt:"Show record action"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"editing-a-record"},"Editing a record"),(0,o.kt)("p",null,"Until this point, we were basically working with reading operations such as fetching and displaying data from resources. From now on, we are going to start creating and updating records by using ",(0,o.kt)("strong",{parentName:"p"},"refine")),(0,o.kt)("p",null,"The Material UI provides already styled, but still very customizable inputs that encapsulate adding labels and error handling with helper texts. However, we need a third-party library to handle forms when using Material UI. ",(0,o.kt)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form")," is one of the best options for this job!\nThe React Hook Form library has been integrated with ",(0,o.kt)("strong",{parentName:"p"},"refine")," (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/react-hook-form"},(0,o.kt)("inlineCode",{parentName:"a"},"@pankod/refine-react-hook-form")),") . This means you can now use Material UI for your forms and manage them using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/react-hook-form"},(0,o.kt)("inlineCode",{parentName:"a"},"@pankod/refine-react-hook-form")),"!"),(0,o.kt)("p",null,"Let's start by creating a new ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," page responsible for ",(0,o.kt)("inlineCode",{parentName:"p"},"editing")," a single record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/edit.tsx"',title:'"src/pages/posts/edit.tsx"'},'import { HttpError } from "@pankod/refine-core";\nimport {\n    Edit,\n    Box,\n    TextField,\n    Autocomplete,\n    useAutocomplete,\n} from "@pankod/refine-mui";\nimport { Controller, useForm } from "@pankod/refine-react-hook-form";\n\nimport { ICategory, IPost } from "interfaces";\n\nexport const PostEdit: React.FC = () => {\n    const {\n        refineCore: { formLoading, queryResult },\n        saveButtonProps,\n        register,\n        control,\n        formState: { errors },\n    } = useForm<IPost, HttpError, IPost & { category: ICategory }>();\n\n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n        defaultValue: queryResult?.data?.data.category.id,\n        queryOptions: { enabled: !!queryResult?.data?.data.category.id },\n    });\n\n    return (\n        <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <Box\n                component="form"\n                sx={{ display: "flex", flexDirection: "column" }}\n                autoComplete="off"\n            >\n                <TextField\n                    {...register("title", { required: "Title is required" })}\n                    error={!!errors?.title}\n                    helperText={errors.title?.message}\n                    margin="normal"\n                    required\n                    fullWidth\n                    id="title"\n                    label="Title"\n                    name="title"\n                    defaultValue={" "}\n                    autoFocus\n                />\n                <Controller\n                    control={control}\n                    name="status"\n                    rules={{ required: "Status is required" }}\n                    defaultValue={null as any}\n                    render={({ field }) => (\n                        <Autocomplete\n                            {...field}\n                            options={["published", "draft", "rejected"]}\n                            onChange={(_, value) => {\n                                field.onChange(value);\n                            }}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label="status"\n                                    margin="normal"\n                                    variant="outlined"\n                                    error={!!errors.status}\n                                    helperText={errors.status?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n                <Controller\n                    control={control}\n                    name="category"\n                    rules={{ required: "Category is required" }}\n                    defaultValue={null as any}\n                    render={({ field }) => (\n                        <Autocomplete\n                            {...autocompleteProps}\n                            {...field}\n                            onChange={(_, value) => {\n                                field.onChange(value);\n                            }}\n                            getOptionLabel={(item) => {\n                                return item.title\n                                    ? item.title\n                                    : autocompleteProps?.options?.find(\n                                          (p) =>\n                                              p.id.toString() ===\n                                              item.toString(),\n                                      )?.title ?? "";\n                            }}\n                            isOptionEqualToValue={(option, value) =>\n                                value === undefined ||\n                                option.id.toString() === value.toString()\n                            }\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label="Category"\n                                    margin="normal"\n                                    variant="outlined"\n                                    error={!!errors.category}\n                                    helperText={errors.category?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n            </Box>\n        </Edit>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Let's see what's going on our ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component in detail:"),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"useForm")," is a refine hook for handling form data.\nIn the example, it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"formProps")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"saveButtonProps"),", where the former includes all necessary props to build the form and the latter has the ones for the save button."),(0,o.kt)("admonition",{title:"Attention",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"In edit page, ",(0,o.kt)("inlineCode",{parentName:"p"},"useForm")," hook initializes the form with current record values."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useForm")," documentation for detailed usage information . ","\u2192")),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f You can give form property to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Box>")," component and it will render the form."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/fields/text"},(0,o.kt)("inlineCode",{parentName:"a"},"<TextField>"))," is Material UI components to build form inputs."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Autocomplete>")," is a text input that helps you find what you're looking for by suggesting options. useAutocomplete is a refine hook for handling ",(0,o.kt)("inlineCode",{parentName:"p"},"<Autocomplete>")," data. It returns ",(0,o.kt)("inlineCode",{parentName:"p"},"autocompleteProps")," which includes all necessary props to build the autocomplete.\nYou may refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/hooks/useAutocomplete"},(0,o.kt)("inlineCode",{parentName:"a"},"useAutocomplete"))," to get the full information about the hook."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," is a wrapper ",(0,o.kt)("strong",{parentName:"p"},"refine")," component for ",(0,o.kt)("inlineCode",{parentName:"p"},"<form>"),". It provides save, delete and refresh buttons that can be used for form actions."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f Form data is set automatically with ",(0,o.kt)("inlineCode",{parentName:"p"},"register")," coming out of the",(0,o.kt)("inlineCode",{parentName:"p"},"useForm")," hook, whenever children inputs ",(0,o.kt)("inlineCode",{parentName:"p"},"<TextField>"),"'s are edited."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f Save button submits the form by executing the ",(0,o.kt)("inlineCode",{parentName:"p"},"useUpdate")," method provided by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider")),". After a successful response, the application will be redirected to the listing page.")),(0,o.kt)("br",null),(0,o.kt)("p",null,"Now we can add the newly created component to our resource with ",(0,o.kt)("inlineCode",{parentName:"p"},"edit")," prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    LightTheme,\n    CssBaseline,\n    GlobalStyles,\n    ThemeProvider,\n    RefineSnackbarProvider,\n    notificationProvider,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "authProvider";\n// highlight-next-line\nimport { PostEdit, PostList, PostShow } from "pages/posts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    authProvider={authProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(API_URL)}\n                    notificationProvider={notificationProvider}\n                    ReadyPage={ReadyPage}\n                    Layout={Layout}\n                    catchAll={<ErrorComponent />}\n                    resources={[\n                        {\n                            name: "posts",\n                            list: PostList,\n                            // highlight-next-line\n                            edit: PostEdit,\n                            show: PostShow,\n                        },\n                    ]}\n                />\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n')),(0,o.kt)("p",null,"We are going to need an ",(0,o.kt)("em",{parentName:"p"},"edit")," button on each row to display the ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component. ",(0,o.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add one, so we have to update our ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," component to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<EditButton>")," for each record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport { useMany } from "@pankod/refine-core";\nimport {\n    useDataGrid,\n    DataGrid,\n    GridColumns,\n    ShowButton,\n    // highlight-next-line\n    EditButton,\n    TagField,\n    DateField,\n    List,\n    // highlight-next-line\n    Stack,\n} from "@pankod/refine-mui";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { dataGridProps } = useDataGrid<IPost>();\n\n    const categoryIds = dataGridProps.rows.map((item) => item.category.id);\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    const columns = React.useMemo<GridColumns<IPost>>(\n        () => [\n            { field: "title", headerName: "Title", flex: 1, minWidth: 350 },\n            {\n                field: "category.id",\n                headerName: "Category",\n                type: "number",\n                minWidth: 250,\n                flex: 1,\n                renderCell: function render({ row }) {\n                    if (isLoading) {\n                        return "Loading...";\n                    }\n\n                    const category = categoriesData?.data.find(\n                        (item) => item.id === row.category.id,\n                    );\n                    return category?.title;\n                },\n            },\n            {\n                field: "status",\n                headerName: "Status",\n                minWidth: 150,\n                flex: 1,\n                renderCell: function render(params) {\n                    return <TagField value={params.row.status} />;\n                },\n            },\n            {\n                field: "createdAt",\n                headerName: "CreatedAt",\n                minWidth: 220,\n                renderCell: function render(params) {\n                    return (\n                        <DateField format="LLL" value={params.row.createdAt} />\n                    );\n                },\n            },\n            {\n                headerName: "Actions",\n                field: "actions",\n                minWidth: 250,\n                renderCell: function render(params) {\n                    return (\n                        // highlight-start\n                        <Stack direction="row" spacing={1}>\n                            <EditButton hideText recordItemId={params.row.id} />\n                            <ShowButton hideText recordItemId={params.row.id} />\n                        </Stack>\n                        // highlight-end\n                    );\n                },\n            },\n        ],\n        [categoriesData, isLoading],\n    );\n\n    return (\n        <List>\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/edit-button"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("p",null,"You can try using edit buttons which will trigger the edit forms for each record, allowing you to update the record data."),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/mui/edit.gif",alt:"Edit record action"})),(0,o.kt)("h2",{id:"creating-a-record"},"Creating a record"),(0,o.kt)("p",null,"Creating a record in ",(0,o.kt)("strong",{parentName:"p"},"refine")," follows a similar flow as ",(0,o.kt)("inlineCode",{parentName:"p"},"editing")," records."),(0,o.kt)("p",null,"First, we'll create a ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostCreate>")," page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},'import { HttpError } from "@pankod/refine-core";\nimport {\n    Box,\n    TextField,\n    Autocomplete,\n    useAutocomplete,\n    Create,\n} from "@pankod/refine-mui";\nimport { useForm, Controller } from "@pankod/refine-react-hook-form";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        control,\n        formState: { errors },\n    } = useForm<IPost, HttpError, IPost & { category: ICategory }>();\n\n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n    });\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <Box\n                component="form"\n                sx={{ display: "flex", flexDirection: "column" }}\n                autoComplete="off"\n            >\n                <TextField\n                    {...register("title", { required: "Title is required" })}\n                    error={!!errors?.title}\n                    helperText={errors.title?.message}\n                    margin="normal"\n                    required\n                    fullWidth\n                    id="title"\n                    label="Title"\n                    name="title"\n                    autoFocus\n                />\n                <Controller\n                    control={control}\n                    name="status"\n                    rules={{ required: "Status is required" }}\n                    render={({ field }) => (\n                        <Autocomplete\n                            {...field}\n                            options={["published", "draft", "rejected"]}\n                            onChange={(_, value) => {\n                                field.onChange(value);\n                            }}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label="Status"\n                                    margin="normal"\n                                    variant="outlined"\n                                    error={!!errors.status}\n                                    helperText={errors.status?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n                <Controller\n                    control={control}\n                    name="category"\n                    rules={{ required: "Category is required" }}\n                    render={({ field }) => (\n                        <Autocomplete\n                            {...autocompleteProps}\n                            {...field}\n                            onChange={(_, value) => {\n                                field.onChange(value);\n                            }}\n                            getOptionLabel={(item) => {\n                                return item.title ? item.title : "";\n                            }}\n                            isOptionEqualToValue={(option, value) =>\n                                value === undefined || option.id === value.id\n                            }\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label="Category"\n                                    margin="normal"\n                                    variant="outlined"\n                                    error={!!errors.category}\n                                    helperText={errors.category?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n            </Box>\n        </Create>\n    );\n};\n')),(0,o.kt)("p",null,"We should notice some minor differences from the edit example:"),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form>")," is wrapped with ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create>")," component."),(0,o.kt)("p",null,"\u2733\ufe0f Save button submits the form by executing the ",(0,o.kt)("inlineCode",{parentName:"p"},"useCreate")," method provided by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider")),"."),(0,o.kt)("p",null,"\u2733\ufe0f No ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," is passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete"),"."),(0,o.kt)("br",null),(0,o.kt)("p",null,"After creating the ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostCreate>")," component, add it to resource with ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," prop:"),(0,o.kt)("br",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    ErrorComponent,\n    ReadyPage,\n    LightTheme,\n    CssBaseline,\n    GlobalStyles,\n    ThemeProvider,\n    RefineSnackbarProvider,\n    notificationProvider,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "authProvider";\n// highlight-next-line\nimport { PostCreate, PostEdit, PostList, PostShow } from "pages/posts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    authProvider={authProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(API_URL)}\n                    notificationProvider={notificationProvider}\n                    ReadyPage={ReadyPage}\n                    Layout={Layout}\n                    catchAll={<ErrorComponent />}\n                    resources={[\n                        {\n                            name: "posts",\n                            list: PostList,\n                            // highlight-next-line\n                            create: PostCreate,\n                            edit: PostEdit,\n                            show: PostShow,\n                        },\n                    ]}\n                />\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n')),(0,o.kt)("p",null,"And that's it! Try it on the browser and see if you can create new posts from scratch."),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/mui/create.gif",alt:"Create record action"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"deleting-a-record"},"Deleting a record"),(0,o.kt)("p",null,"Deleting a record can be done in two ways."),(0,o.kt)("p",null,"The first way is adding a delete button on each row since ",(0,o.kt)("em",{parentName:"p"},"refine")," doesn't automatically add one, so we have to update our ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," component to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," for each record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport { useMany } from "@pankod/refine-core";\nimport {\n    useDataGrid,\n    DataGrid,\n    GridColumns,\n    EditButton,\n    ShowButton,\n    // highlight-next-line\n    DeleteButton,\n    TagField,\n    DateField,\n    List,\n    Stack,\n} from "@pankod/refine-mui";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { dataGridProps } = useDataGrid<IPost>();\n\n    const categoryIds = dataGridProps.rows.map((item) => item.category.id);\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    const columns = React.useMemo<GridColumns<IPost>>(\n        () => [\n            { field: "title", headerName: "Title", flex: 1, minWidth: 350 },\n            {\n                field: "category.id",\n                headerName: "Category",\n                type: "number",\n                minWidth: 250,\n                renderCell: function render({ row }) {\n                    if (isLoading) {\n                        return "Loading...";\n                    }\n\n                    const category = categoriesData?.data.find(\n                        (item) => item.id === row.category.id,\n                    );\n                    return category?.title;\n                },\n            },\n            {\n                field: "status",\n                headerName: "Status",\n                minWidth: 150,\n                renderCell: function render(params) {\n                    return <TagField value={params.row.status} />;\n                },\n            },\n            {\n                field: "createdAt",\n                headerName: "CreatedAt",\n                minWidth: 150,\n                renderCell: function render(params) {\n                    return (\n                        <DateField format="LLL" value={params.row.createdAt} />\n                    );\n                },\n            },\n            {\n                headerName: "Actions",\n                field: "actions",\n                minWidth: 250,\n                renderCell: function render(params) {\n                    return (\n                        <Stack direction="row" spacing={1}>\n                            <EditButton hideText recordItemId={params.row.id} />\n                            <ShowButton hideText recordItemId={params.row.id} />\n                            // highlight-start\n                            <DeleteButton\n                                hideText\n                                recordItemId={params.row.id}\n                            />\n                            // highlight-end\n                        </Stack>\n                    );\n                },\n            },\n        ],\n        [categoriesData, isLoading],\n    );\n\n    return (\n        <List>\n            <DataGrid {...dataGridProps} columns={columns} autoHeight />\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/delete-button"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("p",null,"Now you can try deleting records yourself. Just click on the delete button of the record you want to delete and confirm."),(0,o.kt)("p",null,"The second way is showing delete button in ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component. To show delete button in edit page, ",(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," prop needs to be passed to resource object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    LoginPage,\n    ErrorComponent,\n    ReadyPage,\n    LightTheme,\n    CssBaseline,\n    GlobalStyles,\n    ThemeProvider,\n    RefineSnackbarProvider,\n    notificationProvider,\n} from "@pankod/refine-mui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "authProvider";\n// highlight-next-line\nimport { PostCreate, PostEdit, PostList, PostShow } from "pages/posts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    authProvider={authProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider(API_URL)}\n                    ReadyPage={ReadyPage}\n                    Layout={Layout}\n                    catchAll={<ErrorComponent />}\n                    resources={[\n                        {\n                            name: "posts",\n                            list: PostList,\n                            create: PostCreate,\n                            edit: PostEdit,\n                            show: PostShow,\n                            // highlight-next-line\n                            canDelete: true,\n                        },\n                    ]}\n                />\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n')),(0,o.kt)("p",null,"After adding ",(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," prop, ",(0,o.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," will appear in edit form."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Our tutorial is complete. Below you'll find a Live StackBlitz Example displaying what we have done so far:"),(0,o.kt)(u,{path:"tutorial-mui",mdxType:"StackblitzExample"}),(0,o.kt)("h2",{id:"next-steps"},"Next Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"Read about the authProvider to implement authentication for your refine application. ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},"Read about the dataProvider to consume custom API's ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/i18n-provider"},"Read about the i18nProvider to add language support. ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/docs/advanced-tutorials/upload/multipart-upload"},"Check the Guides & Concept section to learn generic solutions to common problems ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/docs/examples/customization/topMenuLayout"},"Check example section for code snippets ","\u2192")))))}f.isMDXComponent=!0}}]);