"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[89878],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,g=c["".concat(l,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(87462),r=n(67294),o=n(86010),i=n(72389),s=n(67392),l=n(7094),p=n(12466);const d="tabList__CuJ",c="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:i,values:m,groupId:u,className:g}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=m??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,s.l)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===i?i:i??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:N}=(0,l.U)(),[y,x]=(0,r.useState)(v),w=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=u){const e=b[u];null!=e&&e!==y&&k.some((t=>t.value===e))&&x(e)}const P=e=>{const t=e.currentTarget,n=w.indexOf(t),a=k[n].value;a!==y&&(C(t),x(a),null!=u&&N(u,String(a)))},T=e=>{let t=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},g)},k.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>w.push(e),onKeyDown:T,onClick:P},i,{className:(0,o.Z)("tabs__item",c,i?.className,{"tabs__item--active":y===t})}),n??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function u(e){const t=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},34823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>m});var a=n(87462),r=n(67294),o=n(3905),i=n(65488),s=n(85162);const l={slug:"/",id:"tutorial",title:"Tutorial",sidebar_label:"Tutorial"},p=void 0,d={unversionedId:"tutorial",id:"version-2.xx.xx/tutorial",title:"Tutorial",description:"Introduction",source:"@site/versioned_docs/version-2.xx.xx/tutorial.md",sourceDirName:".",slug:"/",permalink:"/docs/2.xx.xx/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/versioned_docs/version-2.xx.xx/tutorial.md",tags:[],version:"2.xx.xx",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{slug:"/",id:"tutorial",title:"Tutorial",sidebar_label:"Tutorial"},sidebar:"version-2.xx.xx/someSidebar",previous:{title:"Comparison | Refine vs React-Admin vs AdminBro vs Retool",permalink:"/docs/2.xx.xx/comparison"},next:{title:"Auth Provider",permalink:"/docs/2.xx.xx/api-references/providers/auth-provider"}},c={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Setting up",id:"setting-up",level:2},{value:"About Fake REST API",id:"about-fake-rest-api",level:2},{value:"Using a Dataprovider",id:"using-a-dataprovider",level:2},{value:"Bootstrapping the Application",id:"bootstrapping-the-application",level:2},{value:"Adding Resources",id:"adding-resources",level:2},{value:"Creating a List Page",id:"creating-a-list-page",level:2},{value:"Handling relationships",id:"handling-relationships",level:2},{value:"Adding search and filters",id:"adding-search-and-filters",level:2},{value:"Showing a single record",id:"showing-a-single-record",level:2},{value:"Editing a record",id:"editing-a-record",level:2},{value:"Creating a record",id:"creating-a-record",level:2},{value:"Deleting a record",id:"deleting-a-record",level:2},{value:"Live Codesandbox Example",id:"live-codesandbox-example",level:2},{value:"Next Steps",id:"next-steps",level:2}],u={toc:m};function g(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This tutorial will go through process of building a simple ",(0,o.kt)("em",{parentName:"p"},"admin panel")," for a ",(0,o.kt)("em",{parentName:"p"},"CMS-like")," application."),(0,o.kt)("p",null,"Step by step, you're going to learn how to consume a ",(0,o.kt)("em",{parentName:"p"},"REST API")," and add basic CRUD functionality to your panel leveraging the unique capabilities of ",(0,o.kt)("strong",{parentName:"p"},"refine"),"."),(0,o.kt)("p",null,"Let's begin by setting up a new ",(0,o.kt)("strong",{parentName:"p"},"refine")," project."),(0,o.kt)("h2",{id:"setting-up"},"Setting up"),(0,o.kt)("p",null,"There are two alternative methods to set up a ",(0,o.kt)("strong",{parentName:"p"},"refine")," application."),(0,o.kt)("p",null,"The recommended way is using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pankod/superplate"},"superplate")," tool. ",(0,o.kt)("em",{parentName:"p"},"superplate"),"'s ",(0,o.kt)("em",{parentName:"p"},"CLI wizard")," will let you create and customize your application in seconds."),(0,o.kt)("p",null,"Alternatively, you may use the ",(0,o.kt)("em",{parentName:"p"},"create-react-app")," tool to create an empty ",(0,o.kt)("em",{parentName:"p"},"React")," application and then add ",(0,o.kt)("strong",{parentName:"p"},"refine")," module via ",(0,o.kt)("em",{parentName:"p"},"npm"),"."),(0,o.kt)(i.Z,{defaultValue:"superplate",values:[{label:"use superplate",value:"superplate"},{label:"use create-react-app",value:"create-react-app"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"create-react-app",mdxType:"TabItem"},(0,o.kt)("p",null,"First, run the ",(0,o.kt)("em",{parentName:"p"},"create-react-app")," tool to bootstrap an empty ",(0,o.kt)("em",{parentName:"p"},"React project"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npx create-react-app tutorial --template typescript\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("em",{parentName:"p"},"--template typescript")," flag will ensure that the Typescript language is selected.")),(0,o.kt)("p",null,"Navigate to the project folder and install ",(0,o.kt)("strong",{parentName:"p"},"refine")," with the following ",(0,o.kt)("em",{parentName:"p"},"npm")," command:"),(0,o.kt)(i.Z,{defaultValue:"npm",values:[{label:"use npm",value:"npm"},{label:"use yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine @pankod/refine-react-router\n"))),(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @pankod/refine @pankod/refine-react-router\n")))),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"This tutorial assumes your project is configured for absolute imports. Since CRA does not configure it by default, you should configure it yourself to be able to use absolute imports. You should configure a ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#baseUrl"},(0,o.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," with ",(0,o.kt)("inlineCode",{parentName:"p"},"baseUrl")," setting pointing to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/src")," directory in your project."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/importing-a-component/#absolute-imports"},"Refer to CRA docs for more information about absolute imports. ","\u2192")))),(0,o.kt)(s.Z,{value:"superplate",mdxType:"TabItem"},(0,o.kt)("p",null,"First, run the ",(0,o.kt)("strong",{parentName:"p"},"superplate")," with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npx superplate-cli -p refine-react tutorial\n")),(0,o.kt)("p",null,"Select the following options to complete the ",(0,o.kt)("em",{parentName:"p"},"CLI wizard"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"? Select your project type:\n\u276f refine-react\n\n? What will be the name of your app:\ntutorial\n\n? Package manager:\n\u276f Npm\n\n? Do you want to customize the theme?:\n\u276f No (Ant Design default theme)\n\n? Data Provider :\n\u276f REST API\n\n? Auth Provider :\n\u276f None\n\n? Do you want to add an example page?:\n\u276f No\n\n? i18n - Internationalization:\n\u276f No\n")))),(0,o.kt)("h2",{id:"about-fake-rest-api"},"About Fake REST API"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"refine")," is designed to consume data from APIs."),(0,o.kt)("p",null,"For the sake of this tutorial, we will provide you a fully working, ",(0,o.kt)("em",{parentName:"p"},"fake REST API")," located at ",(0,o.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/"},"https://api.fake-rest.refine.dev/"),". You may take a look at available ",(0,o.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/"},"resources and routes of the API")," before proceeding to the next step."),(0,o.kt)("h2",{id:"using-a-dataprovider"},"Using a Dataprovider"),(0,o.kt)("p",null,"Dataproviders are ",(0,o.kt)("strong",{parentName:"p"},"refine")," components making it possible to consume different API's and data services conveniently. To consume our ",(0,o.kt)("em",{parentName:"p"},"Fake REST API"),", we'll use the ",(0,o.kt)("strong",{parentName:"p"},'"Simple REST Dataprovider"'),"."),(0,o.kt)("p",null,"Next, navigate to the project folder and run the following command to install the required package:"),(0,o.kt)(i.Z,{defaultValue:"npm",values:[{label:"use npm",value:"npm"},{label:"use yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-simple-rest\n"))),(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @pankod/refine-simple-rest\n")))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you used ",(0,o.kt)("inlineCode",{parentName:"p"},"superplate")," to bootstrap the project, you can skip issuing this command as ",(0,o.kt)("inlineCode",{parentName:"p"},"superplate")," already installs the selected data provider.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Fake REST API is based on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server"},"JSON Server Project"),". ",(0,o.kt)("strong",{parentName:"p"},"Simple REST Dataprovider")," is fully compatible with the REST rules and methods of the ",(0,o.kt)("strong",{parentName:"p"},"JSON Server"),".")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," includes many out-of-the-box data providers to use in your projects like"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/simple-rest"},"Simple REST API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/graphql"},"GraphQL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nestjsx-crud"},"NestJS CRUD")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/airtable"},"Airtable")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi"},"Strapi")," - ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-v4"},"Strapi v4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-graphql"},"Strapi GraphQL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/supabase"},"Supabase")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/hasura"},"Hasura")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/appwrite"},"Appwrite")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/altogic"},"Altogic"))),(0,o.kt)("h3",{parentName:"admonition",id:"community-\ufe0f"},"Community \u2764\ufe0f"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/resulturan/refine-firebase"},"Firebase")," by ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/resulturan"},"rturan29")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek"))),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/providers/data-provider"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider")," documentation for detailed usage. ","\u2192"))),(0,o.kt)("h2",{id:"bootstrapping-the-application"},"Bootstrapping the Application"),(0,o.kt)("p",null,"Replace the contents of ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine";\nimport routerProvider from "@pankod/refine-react-router";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport "@pankod/refine/dist/styles.min.css";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        />\n    );\n};\n\nexport default App;\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Refine/>")," is the root component of a ",(0,o.kt)("strong",{parentName:"p"},"refine")," application. Using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider"))," prop, we made our ",(0,o.kt)("strong",{parentName:"p"},"Simple REST Dataprovider")," available to the entire application."),(0,o.kt)("p",null,"Run the following command to install the required package:"),(0,o.kt)(i.Z,{defaultValue:"superplate",values:[{label:"with superplate",value:"superplate"},{label:"with create-react-app",value:"create-react-app"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"superplate",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm run dev\n"))),(0,o.kt)(s.Z,{value:"create-react-app",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm run start\n")))),(0,o.kt)("p",null,"Your ",(0,o.kt)("strong",{parentName:"p"},"refine")," application should be up and running!",(0,o.kt)("br",{parentName:"p"}),"\n","Point your browser to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," to access it. You will see the welcome page."),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/ready-page.png",alt:"Ready Page"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"adding-resources"},"Adding Resources"),(0,o.kt)("p",null,"Now we are ready to start connecting to our API by adding a resource to our application."),(0,o.kt)("p",null,"Let's add ",(0,o.kt)("strong",{parentName:"p"},"/posts/")," endpoint from our API as a resource. First take a look to the raw API response for the request made to the ",(0,o.kt)("strong",{parentName:"p"},"/posts/")," route:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Show response"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="GET https://api.fake-rest.refine.dev/posts/"',title:'"GET','https://api.fake-rest.refine.dev/posts/"':!0},'[\n  {\n    "id": 1,\n    "title": "Eius ea autem sapiente placeat fuga voluptas quos quae.",\n    "slug": "beatae-esse-dolor",\n    "content": "Explicabo nihil delectus. Nam aliquid sunt numquam...",\n    "category": {\n      "id": 24\n    },\n    "user": {\n      "id": 7\n    },\n    "status": "draft",\n    "createdAt": "2021-03-13T03:09:30.186Z",\n    "image": [],\n    "tags": [\n      7,\n      4\n    ],\n    "language": 2\n  },\n  ...\n]\n')))),(0,o.kt)("br",null),(0,o.kt)("p",null,"Now, add the highlighted code to your ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," to connect to the endpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine";\nimport routerProvider from "@pankod/refine-react-router";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            // highlight-next-line\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"resources")," is a property of ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine/>")," representing API Endpoints. The ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property of every single resource should match one of the endpoints in your API!")),(0,o.kt)("p",null,"Instead of showing the welcome page, the application should redirect now? to an URL defined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property. Open your application to check that the URL is routed to ",(0,o.kt)("strong",{parentName:"p"},"/posts"),":"),(0,o.kt)(r.Fragment,null,(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/resource-1.png",alt:"Resource only with name"})),(0,o.kt)("br",null)),(0,o.kt)("p",null,"You'll still see a ",(0,o.kt)("strong",{parentName:"p"},"404")," error page because no ",(0,o.kt)("strong",{parentName:"p"},"Page")," component is assigned to our resource yet."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"resources")," use ",(0,o.kt)("strong",{parentName:"p"},"Page")," components to handle data and perform rendering. ",(0,o.kt)("strong",{parentName:"p"},"Page")," components are passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"resources")," as an array of objects.\nFor basic ",(0,o.kt)("em",{parentName:"p"},"CRUD")," operations, there are ",(0,o.kt)("strong",{parentName:"p"},"four")," predefined props: ",(0,o.kt)("strong",{parentName:"p"},"list"),", ",(0,o.kt)("strong",{parentName:"p"},"create"),", ",(0,o.kt)("strong",{parentName:"p"},"edit")," and ",(0,o.kt)("strong",{parentName:"p"},"show"),".")),(0,o.kt)("p",null,"Let's create a ",(0,o.kt)("strong",{parentName:"p"},"Page")," component to fetch ",(0,o.kt)("strong",{parentName:"p"},"posts")," and display them as a table. Later, we will pass the component as the ",(0,o.kt)("strong",{parentName:"p"},"list")," prop to our resource."),(0,o.kt)("h2",{id:"creating-a-list-page"},"Creating a List Page"),(0,o.kt)("p",null,"First, we'll need an interface to work with the data from the API endpoint."),(0,o.kt)("p",null,"Create a new folder named ",(0,o.kt)("em",{parentName:"p"},'"interface"')," under ",(0,o.kt)("em",{parentName:"p"},'"/src"')," if you don't already have one. Then create a ",(0,o.kt)("em",{parentName:"p"},'"index.d.ts"')," file with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="interfaces/index.d.ts"',title:'"interfaces/index.d.ts"'},'export interface IPost {\n    id: string;\n    title: string;\n    status: "published" | "draft" | "rejected";\n    createdAt: string;\n}\n')),(0,o.kt)("p",null,"We'll be using ",(0,o.kt)("strong",{parentName:"p"},"title"),", ",(0,o.kt)("strong",{parentName:"p"},"status")," and ",(0,o.kt)("strong",{parentName:"p"},"createdAt")," fields of every ",(0,o.kt)("strong",{parentName:"p"},"post")," record."),(0,o.kt)("p",null,"Now, create a new folder named ",(0,o.kt)("em",{parentName:"p"},'"pages/posts"')," under ",(0,o.kt)("em",{parentName:"p"},'"/src"'),". Under that folder, create a ",(0,o.kt)("em",{parentName:"p"},'"list.tsx"')," file with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},'import {\n    List,\n    TextField,\n    TagField,\n    DateField,\n    Table,\n    useTable,\n} from "@pankod/refine";\n\nimport { IPost } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="title" title="title" />\n                <Table.Column\n                    dataIndex="status"\n                    title="status"\n                    render={(value) => <TagField value={value} />}\n                />\n                <Table.Column\n                    dataIndex="createdAt"\n                    title="createdAt"\n                    render={(value) => <DateField format="LLL" value={value} />}\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Let's break down the ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList/>")," component to understand what's going on here:"),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table/>")," is a native ",(0,o.kt)("strong",{parentName:"p"},"Ant Design")," component. It renders records row by row as a table.\n",(0,o.kt)("inlineCode",{parentName:"p"},"<Table/>")," expects a ",(0,o.kt)("inlineCode",{parentName:"p"},"rowKey")," prop as the unique key of the records."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," uses ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/overview/"},"Ant Design")," components to render data.\nYou may refer to ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},"Ant Design Docs")," for further information about the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table/>")," component.")),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable<IPost>();")," is passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table/>")," component as ",(0,o.kt)("inlineCode",{parentName:"p"},"{...tableProps}"),"."),(0,o.kt)("p",null,"This is the point where the \u2728real magic\u2728 happens!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"refine")," hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable()")," fetches data from API and wraps them with various helper hooks required for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table/>")," component. Data interaction functions like ",(0,o.kt)("strong",{parentName:"p"},"sorting"),", ",(0,o.kt)("strong",{parentName:"p"},"filtering"),", and ",(0,o.kt)("strong",{parentName:"p"},"pagination")," will be instantly available on the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table/>")," with this single line of code."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," depends heavily on hooks and ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable()")," is only one among many others.\nOn ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/table/useTable"},"useTable() Documentation")," you may find more information about the usage of this hook.")),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table.Column>")," components are used for mapping and formatting each field shown on the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table/>"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"dataIndex")," prop maps the field to a matching key from the API response. ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," prop is used to choose the appropriate ",(0,o.kt)("strong",{parentName:"p"},"Field")," component for the given data type."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The example uses ",(0,o.kt)("inlineCode",{parentName:"p"},"<TagField>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<DateField>")," components. To get the full list of available components, you may refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/components/fields/boolean"},"Field Components Documentation"),".")),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<List>")," is a ",(0,o.kt)("strong",{parentName:"p"},"refine")," component. It acts as a wrapper to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table>")," to add some extras like ",(0,o.kt)("em",{parentName:"p"},"Create Button")," and ",(0,o.kt)("em",{parentName:"p"},"title"),"."),(0,o.kt)("p",null,"Finally, we are ready to add ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," to our resource. Add the highlighted line to your ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine";\nimport routerProvider from "@pankod/refine-react-router";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// highlight-next-line\nimport { PostList } from "./pages/posts";\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            // highlight-next-line\n            resources={[{ name: "posts", list: PostList }]}\n        />\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Open your application in your browser. You will see ",(0,o.kt)("strong",{parentName:"p"},"posts")," are displayed correctly in a table structure and even the pagination works out-of-the box."),(0,o.kt)("p",null,"On the next step, we are going to add a category field to the table which involves handling data relationships."),(0,o.kt)(r.Fragment,null,(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/resource-2.png",alt:"Resource only List component"})),(0,o.kt)("br",null)),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"handling-relationships"},"Handling relationships"),(0,o.kt)("p",null,"Remember the records from ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint that had a category id field?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/posts/1"',title:'"https://api.fake-rest.refine.dev/posts/1"'},'...\n  "category": {\n    "id": 26\n  }\n...\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"To display category titles on our table, we first need to map category id's to their corresponding titles.\nThe category title data can be obtained from the ",(0,o.kt)("inlineCode",{parentName:"p"},"/categories")," endpoint for each record."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/categories/26"',title:'"https://api.fake-rest.refine.dev/categories/26"'},'  {\n    "id": 26,\n    "title": "mock category title",\n  }\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"At this point, we need to join records from different resources. For this, we're goint to use the refine hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useMany"),"."),(0,o.kt)("p",null,"Before we start, just edit our interface for the new ",(0,o.kt)("inlineCode",{parentName:"p"},"ICategory")," type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="interfaces/index.d.ts"',title:'"interfaces/index.d.ts"'},'// highlight-start\nexport interface ICategory {\n    id: string;\n    title: string;\n}\n// highlight-end\n\nexport interface IPost {\n    id: string;\n    title: string;\n    status: "published" | "draft" | "rejected";\n// highlight-next-line\n    category: { id: string };\n    createdAt: string;\n}\n')),(0,o.kt)("p",null,"So we can update our ",(0,o.kt)("inlineCode",{parentName:"p"},"list.tsx")," with the highlighted lines:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},'import {\n    List,\n    TextField,\n    TagField,\n    DateField,\n    Table,\n    useTable,\n    // highlight-next-line\n    useMany,\n} from "@pankod/refine";\n\n// highlight-next-line\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    // highlight-start\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n    // highlight-end\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="title" title="title" />\n                <Table.Column\n                    dataIndex="status"\n                    title="status"\n                    render={(value) => <TagField value={value} />}\n                />\n                <Table.Column\n                    dataIndex="createdAt"\n                    title="createdAt"\n                    render={(value) => <DateField format="LLL" value={value} />}\n                />\n                // highlight-start\n                <Table.Column\n                    dataIndex={["category", "id"]}\n                    title="category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value="Loading..." />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    categoriesData?.data.find(\n                                        (item) => item.id === value,\n                                    )?.title\n                                }\n                            />\n                        );\n                    }}\n                />\n                // highlight-end\n            </Table>\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,"We construct an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"categoryId"),"'s from ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint and pass it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"useMany")," hook. ",(0,o.kt)("inlineCode",{parentName:"p"},"categoriesData")," will be filled with ",(0,o.kt)("em",{parentName:"p"},"id-title")," tuples to be used for rendering our component."),(0,o.kt)("p",null,"Try the result on your browser and you'll notice that the category column is filled correctly with the matching category titles for the each record's category id's. Even the loading state is managed by ",(0,o.kt)("strong",{parentName:"p"},"refine"),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can access nested properties of table data by using an array:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},' dataIndex={["category", "id"]}\n'))),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"enabled: categoryIds.length > 0;\n")),(0,o.kt)("p",{parentName:"admonition"},"Here, we set a condition to start fetching only when data is available.")),(0,o.kt)("p",null,"To get more detailed information about this hook, please refer the ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/data/useMany"},"useMany Documentation"),"."),(0,o.kt)("h2",{id:"adding-search-and-filters"},"Adding search and filters"),(0,o.kt)("p",null,"We're done with displaying ",(0,o.kt)("inlineCode",{parentName:"p"},"post")," records on our ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table>"),". Let's add search and filtering capabilities to the component, so that the user can have more control over the data."),(0,o.kt)("p",null,"We are going to use ",(0,o.kt)("inlineCode",{parentName:"p"},"<Table.Column>"),"'s ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#Column"},(0,o.kt)("inlineCode",{parentName:"a"},"filterDropdown"))," property and ",(0,o.kt)("inlineCode",{parentName:"p"},"<FilterDropdown>")," component as following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},'import {\n    List,\n    TextField,\n    TagField,\n    DateField,\n    Table,\n    useTable,\n    useMany,\n    FilterDropdown,\n    // highlight-start\n    Select,\n    useSelect,\n    // highlight-end\n} from "@pankod/refine";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n    // highlight-start\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n    // highlight-end\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="title" title="title" />\n                <Table.Column\n                    dataIndex="status"\n                    title="status"\n                    render={(value) => <TagField value={value} />}\n                />\n                <Table.Column\n                    dataIndex="createdAt"\n                    title="createdAt"\n                    render={(value) => <DateField format="LLL" value={value} />}\n                />\n                <Table.Column\n                    dataIndex={["category", "id"]}\n                    title="category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value="Loading..." />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    categoriesData?.data.find(\n                                        (item) => item.id === value,\n                                    )?.title\n                                }\n                            />\n                        );\n                    }}\n                    // highlight-start\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                placeholder="Select Category"\n                                {...categorySelectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                    // highlight-end\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<FilterDropdown>")," component serves as a bridge between its child input and ",(0,o.kt)("strong",{parentName:"p"},"refine"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," hook. It passes childs input value to ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"filterDropdown"),"'s embedded props and provides a filter button."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"api-references/components/filter-dropdown"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<FilterDropdown>")," documentation for detailed usage. ","\u2192")),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"useSelect")," hook populates props for ",(0,o.kt)("inlineCode",{parentName:"p"},"<Select>")," component from a given resource."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/select/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Select")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/field/useSelect"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useSelect")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," is used to get the value for the current item. It's not affected by search, sort and filter parameters.")),(0,o.kt)("h2",{id:"showing-a-single-record"},"Showing a single record"),(0,o.kt)("p",null,"At this point we are able to list all ",(0,o.kt)("em",{parentName:"p"},"post")," records on the table component with pagination, sorting and filtering functionality. Next, we are going to add a ",(0,o.kt)("em",{parentName:"p"},"details page")," to fetch and display data from a single record."),(0,o.kt)("p",null,"Let's create a ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostShow>")," component on ",(0,o.kt)("inlineCode",{parentName:"p"},"/pages/posts")," folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/show.tsx"',title:'"pages/posts/show.tsx"'},'import { Show, useShow, Typography, Tag, useOne } from "@pankod/refine";\nimport { IPost, ICategory } from "interfaces";\n\nconst { Title, Text } = Typography;\n\nexport const PostShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    const { data: categoryData } = useOne<ICategory>({\n        resource: "categories",\n        id: record?.category.id || "",\n        queryOptions: {\n            enabled: !!record?.category.id,\n        },\n    });\n\n    return (\n        <Show isLoading={isLoading}>\n            <Title level={5}>Title</Title>\n            <Text>{record?.title}</Text>\n\n            <Title level={5}>Status</Title>\n            <Text>\n                <Tag>{record?.status}</Tag>\n            </Text>\n\n            <Title level={5}>Category</Title>\n            <Text>{categoryData?.data.title}</Text>\n        </Show>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Now we can add the newly created component to our resource with ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine";\nimport routerProvider from "@pankod/refine-react-router";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// highlight-next-line\nimport { PostList, PostShow } from "./pages/posts";\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            // highlight-start\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    show: PostShow,\n                },\n            ]}\n            // highlight-end\n        />\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"And then we can add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<ShowButton>")," on the list page to make it possible for users to navigate to detail pages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n    List,\n    TextField,\n    TagField,\n    DateField,\n    Table,\n    useTable,\n    useMany,\n    FilterDropdown,\n    Select,\n    // highlight-next-line\n    ShowButton,\n    useSelect,\n} from "@pankod/refine";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="title" title="title" />\n                <Table.Column\n                    dataIndex="status"\n                    title="status"\n                    render={(value) => <TagField value={value} />}\n                />\n                <Table.Column\n                    dataIndex="createdAt"\n                    title="createdAt"\n                    render={(value) => <DateField format="LLL" value={value} />}\n                />\n                <Table.Column\n                    dataIndex={["category", "id"]}\n                    title="category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value="Loading..." />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    categoriesData?.data.find(\n                                        (item) => item.id === value,\n                                    )?.title\n                                }\n                            />\n                        );\n                    }}\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                placeholder="Select Category"\n                                {...categorySelectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column<IPost>\n                    title="Actions"\n                    dataIndex="actions"\n                    // highlight-start\n                    render={(_text, record): React.ReactNode => {\n                        return (\n                            <ShowButton\n                                size="small"\n                                recordItemId={record.id}\n                                hideText\n                            />\n                        );\n                    }}\n                    // highlight-end\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"useShow()")," is a ",(0,o.kt)("strong",{parentName:"p"},"refine")," hook used to fetch a single record data. The ",(0,o.kt)("inlineCode",{parentName:"p"},"queryResult")," has the response and also ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," state."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/show/useShow"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useShow")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("p",null,"\u2733\ufe0f To retrieve the category title, again we need to make a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"/categories")," endpoint. This time we used ",(0,o.kt)("inlineCode",{parentName:"p"},"useOne()")," hook to get a single record from another resource."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/data/useOne"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useOne")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("admonition",{title:"attention",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"useShow()")," is the preferred hook for fetching data from current resource. For query foreign resources you may use the low-level ",(0,o.kt)("inlineCode",{parentName:"p"},"useOne()")," hook.")),(0,o.kt)("p",null,"Since we've got access to raw data returning from ",(0,o.kt)("inlineCode",{parentName:"p"},"useShow()"),", there is no restriction how it's displayed on your components. If you prefer presenting your content with a nicer wrapper, ",(0,o.kt)("strong",{parentName:"p"},"refine")," provides you\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component which has extra features like ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"refresh")," buttons."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"api-references/components/basic-views/show"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<Show>")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/show.gif",alt:"Show record action"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"editing-a-record"},"Editing a record"),(0,o.kt)("p",null,"Until this point, we were basically working with read operations such as fetching and displaying data from resources. From now on, we are going to start creating and updating records by using ",(0,o.kt)("strong",{parentName:"p"},"refine"),"."),(0,o.kt)("p",null,"Let's start by creating a new ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," page responsible for editing a single record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/edit.tsx"',title:'"pages/posts/edit.tsx"'},'import { useForm, Form, Input, Select, Edit, useSelect } from "@pankod/refine";\nimport { IPost } from "interfaces";\n\nexport const PostEdit: React.FC = () => {\n    const { formProps, saveButtonProps, queryResult } = useForm<IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<IPost>({\n        resource: "categories",\n        defaultValue: queryResult?.data?.data?.category.id,\n    });\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout="vertical">\n                <Form.Item label="Title" name="title">\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Status" name="status">\n                    <Select\n                        options={[\n                            {\n                                label: "Published",\n                                value: "published",\n                            },\n                            {\n                                label: "Draft",\n                                value: "draft",\n                            },\n                            {\n                                label: "Rejected",\n                                value: "rejected",\n                            },\n                        ]}\n                    />\n                </Form.Item>\n                <Form.Item label="Category" name={["category", "id"]}>\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Now we can add the newly created component to our resource with ",(0,o.kt)("inlineCode",{parentName:"p"},"edit")," prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine";\nimport routerProvider from "@pankod/refine-react-router";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// highlight-next-line\nimport { PostList, PostShow, PostEdit } from "./pages/posts";\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            // highlight-start\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    edit: PostEdit,\n                    show: PostShow,\n                },\n            ]}\n            // highlight-end\n        />\n    );\n};\n')),(0,o.kt)("p",null,"We are going to need an ",(0,o.kt)("em",{parentName:"p"},"edit")," button on each row to diplay the ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component. ",(0,o.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add one, so we have to update our ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," component to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<EditButton>")," for each record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/pages/posts.tsx"',title:'"components/pages/posts.tsx"'},'import {\n    List,\n    TextField,\n    TagField,\n    DateField,\n    Table,\n    useTable,\n    useMany,\n    FilterDropdown,\n    Select,\n    ShowButton,\n    useSelect,\n    // highlight-start\n    Space,\n    EditButton,\n    // highlight-end\n} from "@pankod/refine";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="title" title="title" />\n                <Table.Column\n                    dataIndex="status"\n                    title="status"\n                    render={(value) => <TagField value={value} />}\n                />\n                <Table.Column\n                    dataIndex="createdAt"\n                    title="createdAt"\n                    render={(value) => <DateField format="LLL" value={value} />}\n                />\n                <Table.Column\n                    dataIndex={["category", "id"]}\n                    title="category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value="Loading..." />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    categoriesData?.data.find(\n                                        (item) => item.id === value,\n                                    )?.title\n                                }\n                            />\n                        );\n                    }}\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                placeholder="Select Category"\n                                {...categorySelectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column<IPost>\n                    title="Actions"\n                    dataIndex="actions"\n                    // highlight-start\n                    render={(_text, record): React.ReactNode => {\n                        return (\n                            <Space>\n                                <ShowButton\n                                    size="small"\n                                    recordItemId={record.id}\n                                    hideText\n                                />\n                                <EditButton\n                                    size="small"\n                                    recordItemId={record.id}\n                                    hideText\n                                />\n                            </Space>\n                        );\n                    }}\n                    // highlight-end\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/components/buttons/edit-button"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("p",null,"You can try using edit buttons which will trigger the edit forms for each record, allowing you to update the record data."),(0,o.kt)("p",null,"Let's see what's going on our ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component in detail:"),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"useForm")," is a refine hook for handling form data.\nOn the example it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"formProps")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"saveButtonProps"),", where the former includes all necessary props to build the form and the latter has the ones for the save button."),(0,o.kt)("admonition",{title:"Attention",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"In edit page, ",(0,o.kt)("inlineCode",{parentName:"p"},"useForm")," hook initializes the form with current record values."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/hooks/form/useForm"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useForm")," documentation for detailed usage information . ","\u2192")),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form.Item>")," are Ant Design components to build form inputs."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," is a wrapper ",(0,o.kt)("strong",{parentName:"p"},"refine")," component for ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form>"),". It provides save, delete and refresh buttons that can be used for form actions."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f Form data is set automatically, whenever children inputs ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form.Item>"),"'s are edited."),(0,o.kt)("p",{parentName:"admonition"},"\u2733\ufe0f Save button submits the form by executing the ",(0,o.kt)("inlineCode",{parentName:"p"},"useUpdate")," method provided by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider")),". After a succesfull response, the application will be redirected to the listing page."),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/edit.gif",alt:"Edit record action"})),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("h2",{id:"creating-a-record"},"Creating a record"),(0,o.kt)("p",null,"Creating a record in ",(0,o.kt)("strong",{parentName:"p"},"refine")," follows a similar flow as editing records."),(0,o.kt)("p",null,"First, we'll create a ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostCreate>")," page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import {\n    // highlight-next-line\n    Create,\n    Form,\n    Input,\n    Select,\n    useForm,\n    useSelect,\n} from "@pankod/refine";\n\nimport { IPost } from "interfaces";\n\nexport const PostCreate = () => {\n    const { formProps, saveButtonProps } = useForm<IPost>();\n    const { selectProps: categorySelectProps } = useSelect<IPost>({\n        resource: "categories",\n    });\n\n    return (\n        // highlight-start\n        <Create saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout="vertical">\n                <Form.Item label="Title" name="title">\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Status" name="status">\n                    <Select\n                        options={[\n                            {\n                                label: "Published",\n                                value: "published",\n                            },\n                            {\n                                label: "Draft",\n                                value: "draft",\n                            },\n                            {\n                                label: "Rejected",\n                                value: "rejected",\n                            },\n                        ]}\n                    />\n                </Form.Item>\n                <Form.Item label="Category" name={["category", "id"]}>\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n            </Form>\n        </Create>\n        // highlight-end\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"After creating the ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostCreate>")," component, add it to resource with ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," prop:"),(0,o.kt)("br",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router";\n\n// highlight-next-line\nimport { PostList, PostShow, PostEdit, PostCreate } from "./pages/posts";\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            // highlight-start\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    show: PostShow,\n                    edit: PostEdit,\n                    create: PostCreate,\n                },\n            ]}\n            // highlight-end\n        />\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"And that's it! Try it on browser and see if you can create new posts from scratch."),(0,o.kt)("p",null,"We should notice some minor differences from the edit example:"),(0,o.kt)("p",null,"\u2733\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form>")," is wrapped with ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create>")," component."),(0,o.kt)("p",null,"\u2733\ufe0f Save button submits the form by executing the ",(0,o.kt)("inlineCode",{parentName:"p"},"useCreate")," method provided by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider")),"."),(0,o.kt)("p",null,"\u2733\ufe0f No ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," is passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"useSelect"),"."),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/tutorial/create.gif",alt:"Create record action"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"deleting-a-record"},"Deleting a record"),(0,o.kt)("p",null,"Deleting a record can be done in two ways."),(0,o.kt)("p",null,"First way is adding an delete button on each row since ",(0,o.kt)("em",{parentName:"p"},"refine")," doesn't automatically add one, so we have to update our ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," component to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," for each record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/pages/posts.tsx"',title:'"components/pages/posts.tsx"'},'import {\n    List,\n    TextField,\n    TagField,\n    DateField,\n    Table,\n    useTable,\n    useMany,\n    FilterDropdown,\n    Select,\n    ShowButton,\n    useSelect,\n    Space,\n    EditButton,\n    // highlight-next-line\n    DeleteButton,\n} from "@pankod/refine";\n\nimport { IPost, ICategory } from "../../interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="title" title="title" />\n                <Table.Column\n                    dataIndex="status"\n                    title="status"\n                    render={(value) => <TagField value={value} />}\n                />\n                <Table.Column\n                    dataIndex="createdAt"\n                    title="createdAt"\n                    render={(value) => <DateField format="LLL" value={value} />}\n                />\n                <Table.Column\n                    dataIndex={["category", "id"]}\n                    title="category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value="Loading..." />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    categoriesData?.data.find(\n                                        (item) => item.id === value,\n                                    )?.title\n                                }\n                            />\n                        );\n                    }}\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                placeholder="Select Category"\n                                {...categorySelectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column<IPost>\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_text, record): React.ReactNode => {\n                        return (\n                            <Space>\n                                <ShowButton\n                                    size="small"\n                                    recordItemId={record.id}\n                                    hideText\n                                />\n                                <EditButton\n                                    size="small"\n                                    recordItemId={record.id}\n                                    hideText\n                                />\n                                // highlight-start\n                                <DeleteButton\n                                    size="small"\n                                    recordItemId={record.id}\n                                    hideText\n                                />\n                                // highlight-end\n                            </Space>\n                        );\n                    }}\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/api-references/components/buttons/delete-button"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation for detailed usage information. ","\u2192")),(0,o.kt)("p",null,"Now you can try deleting records yourself. Just click on the delete button of the record you want to delete and confirm."),(0,o.kt)("p",null,"The second way is showing delete button in ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component. To show delete button in edit page, ",(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," prop needs to be passed to resource object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine, Resource } from "@pankod/refine";\nimport routerProvider from "@pankod/refine-react-router";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport { PostList, PostShow, PostEdit, PostCreate } from "./pages/posts";\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    show: PostShow,\n                    edit: PostEdit,\n                    create: PostCreate,\n                    // highlight-next-line\n                    canDelete: true,\n                },\n            ]}\n        />\n    );\n};\n')),(0,o.kt)("p",null,"After adding ",(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," prop, ",(0,o.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," will appear in edit form."),(0,o.kt)("h2",{id:"live-codesandbox-example"},"Live Codesandbox Example"),(0,o.kt)("p",null,"Our tutorial is complete. Below you'll find a live Codesandbox example displaying what we have done so far:"),(0,o.kt)("iframe",{src:"https://codesandbox.io/embed/tutorial-grg4u?autoresize=1&fontsize=14&theme=dark&view=preview",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-tutorial",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,o.kt)("h2",{id:"next-steps"},"Next Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"api-references/providers/auth-provider"},"Read about the authProvider to implement authentication for your refine application. ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"api-references/providers/data-provider"},"Read about the dataProvider to consume custom API's ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"api-references/providers/i18n-provider"},"Read about the i18nProvider to add language support. ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"guides-and-concepts/upload/multipart-upload"},"Check the Guides & Concept section to learn generic solutions to common problems ","\u2192"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/docs/2.xx.xx/examples/customization/topMenuLayout"},"Check example section for code snippets ","\u2192")))))}g.isMDXComponent=!0}}]);