"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[72922],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),r=t(86010);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(87462),r=t(67294),o=t(86010),i=t(72389),s=t(67392),l=t(7094),p=t(12466);const d="tabList__CuJ",c="tabItem_LNqP";function u(e){const{lazy:n,block:t,defaultValue:i,values:u,groupId:m,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=u??g.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),k=(0,s.l)(f,((e,n)=>e.value===n.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:C,setTabGroupChoices:b}=(0,l.U)(),[v,T]=(0,r.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:N}=(0,p.o5)();if(null!=m){const e=C[m];null!=e&&e!==v&&f.some((n=>n.value===e))&&T(e)}const x=e=>{const n=e.currentTarget,t=w.indexOf(n),a=f[t].value;a!==v&&(N(n),T(a),null!=m&&b(m,String(a)))},R=e=>{let n=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]??w[w.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},h)},f.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,key:n,ref:e=>w.push(e),onKeyDown:R,onClick:x},i,{className:(0,o.Z)("tabs__item",c,i?.className,{"tabs__item--active":v===n})}),t??n)}))),n?(0,r.cloneElement)(g.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==v})))))}function m(e){const n=(0,i.Z)();return r.createElement(u,(0,a.Z)({key:String(n)},e))}},64100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=t(87462),r=(t(67294),t(3905)),o=t(65488),i=t(85162);const s={id:"chakra-ui-tutorial",title:"Your First App using Chakra UI"},l=void 0,p={unversionedId:"tutorials/chakra-ui-tutorial",id:"tutorials/chakra-ui-tutorial",title:"Your First App using Chakra UI",description:"Introduction",source:"@site/docs/tutorials/chakra-ui.md",sourceDirName:"tutorials",slug:"/tutorials/chakra-ui-tutorial",permalink:"/docs/tutorials/chakra-ui-tutorial",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/tutorials/chakra-ui.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{id:"chakra-ui-tutorial",title:"Your First App using Chakra UI"},sidebar:"someSidebar",previous:{title:"Your First App using Ant Design",permalink:"/docs/tutorials/ant-design-tutorial"},next:{title:"Your First App using Mantine",permalink:"/docs/tutorials/mantine-tutorial"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Setting up",id:"setting-up",level:2},{value:"About Fake REST API",id:"about-fake-rest-api",level:2},{value:"Using a Dataprovider",id:"using-a-dataprovider",level:2},{value:"Bootstrapping the Application",id:"bootstrapping-the-application",level:2},{value:"Adding Resources",id:"adding-resources",level:2},{value:"Creating a List Page",id:"creating-a-list-page",level:2},{value:"Handling relationships",id:"handling-relationships",level:2},{value:"Adding Sorting and Filtering",id:"adding-sorting-and-filtering",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Showing a single record",id:"showing-a-single-record",level:2},{value:"Editing a record",id:"editing-a-record",level:2},{value:"Creating a record",id:"creating-a-record",level:2},{value:"Deleting a record",id:"deleting-a-record",level:2},{value:"Example",id:"example",level:2},{value:"Next Steps",id:"next-steps",level:2}],u=(m="StackblitzExample",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const h={toc:c};function g(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const IconChevronDown = () => (\n    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-down" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">\n   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n   <polyline points="6 9 12 15 18 9"></polyline>\n</svg>\n);\n\nconst IconSelector = () => (\n    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-selector" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">\n   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n   <polyline points="8 9 12 5 16 9"></polyline>\n   <polyline points="16 15 12 19 8 15"></polyline>\n</svg>\n);\n\nconst IconX = () => (\n    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-x" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">\n   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n   <line x1="18" y1="6" x2="6" y2="18"></line>\n   <line x1="6" y1="6" x2="18" y2="18"></line>\n</svg>\n);\n\nconst IconCheck = () => (\n    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-check" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">\n   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n   <path d="M5 12l5 5l10 -10"></path>\n</svg>\n);\n\nconst IconChevronLeft = () => (\n    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-left" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">\n   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n   <polyline points="15 6 9 12 15 18"></polyline>\n</svg>\n);\n\nconst IconChevronRight = () => (\n    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-right" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">\n   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n   <polyline points="9 6 15 12 9 18"></polyline>\n</svg>\n);\n\nconst IconFilter = () => (\n    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-filter" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">\n   <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n   <path d="M5.5 5h13a1 1 0 0 1 .5 1.5l-5 5.5l0 7l-4 -3l0 -4l-5 -5.5a1 1 0 0 1 .5 -1.5"></path>\n</svg>\n);\n\nconst ColumnSorter: React.FC<{ column: Column<any, any> }> = ({ column }) => {\n    if (!column.getCanSort()) {\n        return null;\n    }\n\n    const sorted = column.getIsSorted();\n\n    return (\n        <RefineChakra.IconButton\n            aria-label="Sort"\n            size="xs"\n            onClick={column.getToggleSortingHandler()}\n            style={{\n                transition: "transform 0.25s",\n                transform: `rotate(${sorted === "asc" ? "180" : "0"}deg)`,\n            }}\n            variant={sorted ? "light" : "transparent"}\n            color={sorted ? "primary" : "gray"}\n        >\n            {sorted ? (\n                <IconChevronDown size={18} />\n            ) : (\n                <IconSelector size={18} />\n            )}\n        </RefineChakra.IconButton>\n    );\n};\n\nconst ColumnFilter: React.FC<{ column: Column<any, any> }> = ({ column }) => {\n    const [state, setState] = useState(null as null | { value: any });\n\n    if (!column.getCanFilter()) {\n        return null;\n    }\n\n    const open = () =>\n        setState({\n            value: column.getFilterValue(),\n        });\n\n    const close = () => setState(null);\n\n    // eslint-disable-next-line\n    const change = (value: any) => setState({ value });\n\n    const clear = () => {\n        column.setFilterValue(undefined);\n        close();\n    };\n\n    const save = () => {\n        if (!state) return;\n        column.setFilterValue(state.value);\n        close();\n    };\n\n    \n\n    const renderFilterElement = () => {\n        // eslint-disable-next-line\n        const FilterComponent = (column.columnDef?.meta as any)?.filterElement;\n\n        if (!FilterComponent && !!state) {\n            return (\n                <RefineChakra.Input\n                    borderRadius="md"\n                    size="sm"\n                    autoComplete="off"\n                    value={state.value}\n                    onChange={(e) => change(e.target.value)}\n                />\n            );\n        }\n\n        return (\n            <FilterComponent\n                value={state?.value}\n                onChange={(e: any) => change(e.target.value)}\n            />\n        );\n    };\n\n    return (\n        <RefineChakra.Menu isOpen={!!state} onClose={close}>\n            <RefineChakra.MenuButton\n                onClick={open}\n                as={RefineChakra.IconButton}\n                aria-label="Options"\n                icon={<IconFilter size="16" />}\n                variant="ghost"\n                size="xs"\n            />\n            <RefineChakra.MenuList p="2">\n                {!!state && (\n                    <RefineChakra.VStack align="flex-start">\n                        {renderFilterElement()}\n                        <RefineChakra.HStack spacing="1">\n                            <RefineChakra.IconButton\n                                aria-label="Clear"\n                                size="sm"\n                                colorScheme="red"\n                                onClick={clear}\n                            >\n                                <IconX size={18} />\n                            </RefineChakra.IconButton>\n                            <RefineChakra.IconButton\n                                aria-label="Save"\n                                size="sm"\n                                onClick={save}\n                                colorScheme="green"\n                            >\n                                <IconCheck size={18} />\n                            </RefineChakra.IconButton>\n                        </RefineChakra.HStack>\n                    </RefineChakra.VStack>\n                )}\n            </RefineChakra.MenuList>\n        </RefineChakra.Menu>\n    );\n};\n\nconst PostShow: React.FC = () => {\n    const { queryResult } = RefineCore.useShow<IPost>();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    const { data: categoryData } = RefineCore.useOne<ICategory>({\n        resource: "categories",\n        id: record?.category.id || "",\n        queryOptions: {\n            enabled: !!record?.category.id,\n        },\n    });\n\n    return (\n        <RefineChakra.Show isLoading={isLoading}>\n            <RefineChakra.Heading as="h5" size="sm">\n                Id\n            </RefineChakra.Heading>\n            <RefineChakra.Text mt={2}>{record?.id}</RefineChakra.Text>\n\n            <RefineChakra.Heading as="h5" size="sm" mt={4}>\n                Title\n            </RefineChakra.Heading>\n            <RefineChakra.Text mt={2}>{record?.title}</RefineChakra.Text>\n\n            <RefineChakra.Heading as="h5" size="sm" mt={4}>\n                Status\n            </RefineChakra.Heading>\n            <RefineChakra.Text mt={2}>{record?.status}</RefineChakra.Text>\n\n            <RefineChakra.Heading as="h5" size="sm" mt={4}>\n                Category\n            </RefineChakra.Heading>\n            <RefineChakra.Text mt={2}>{categoryData?.data?.title}</RefineChakra.Text>\n\n            <RefineChakra.Heading as="h5" size="sm" mt={4}>\n                Content\n            </RefineChakra.Heading>\n            <RefineChakra.Spacer mt={2} />\n            <RefineChakra.MarkdownField value={record?.content} />\n        </RefineChakra.Show>\n    );\n};\n\nconst PostEdit = () => {\n    const {\n        refineCore: { formLoading, queryResult },\n        saveButtonProps,\n        register,\n        formState: { errors },\n        resetField,\n    } = RefineReactHookForm.useForm<IPost>();\n\n    const { options } = RefineCore.useSelect({\n        resource: "categories",\n\n        defaultValue: queryResult?.data?.data.category.id,\n        queryOptions: { enabled: !!queryResult?.data?.data.category.id },\n    });\n\n    useEffect(() => {\n        resetField("category.id");\n    }, [options]);\n\n    return (\n        <RefineChakra.Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <RefineChakra.FormControl mb="3" isInvalid={!!errors?.title}>\n                <RefineChakra.FormLabel>Title</RefineChakra.FormLabel>\n                <RefineChakra.Input\n                    id="title"\n                    type="text"\n                    {...register("title", { required: "Title is required" })}\n                />\n                <RefineChakra.FormErrorMessage>\n                    {`${errors.title?.message}`}\n                </RefineChakra.FormErrorMessage>\n            </RefineChakra.FormControl>\n            <RefineChakra.FormControl mb="3" isInvalid={!!errors?.status}>\n                <RefineChakra.FormLabel>Status</RefineChakra.FormLabel>\n                <RefineChakra.Select\n                    id="content"\n                    placeholder="Select Post Status"\n                    {...register("status", {\n                        required: "Status is required",\n                    })}\n                >\n                    <option>published</option>\n                    <option>draft</option>\n                    <option>rejected</option>\n                </RefineChakra.Select>\n                <RefineChakra.FormErrorMessage>\n                    {`${errors.status?.message}`}\n                </RefineChakra.FormErrorMessage>\n            </RefineChakra.FormControl>\n            <RefineChakra.FormControl mb="3" isInvalid={!!errors?.categoryId}>\n                <RefineChakra.FormLabel>Category</RefineChakra.FormLabel>\n                <RefineChakra.Select\n                    id="ca"\n                    placeholder="Select Category"\n                    {...register("category.id", {\n                        required: true,\n                    })}\n                >\n                    {options?.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </RefineChakra.Select>\n                <RefineChakra.FormErrorMessage>\n                    {`${errors.categoryId?.message}`}\n                </RefineChakra.FormErrorMessage>\n            </RefineChakra.FormControl>\n        </RefineChakra.Edit>\n    );\n}\n\nconst PostCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = RefineReactHookForm.useForm<IPost>();\n\n    const { options } = RefineCore.useSelect({\n        resource: "categories",\n    });\n\n    return (\n        <RefineChakra.Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <RefineChakra.FormControl mb="3" isInvalid={!!errors?.title}>\n                <RefineChakra.FormLabel>Title</RefineChakra.FormLabel>\n                <RefineChakra.Input\n                    id="title"\n                    type="text"\n                    {...register("title", { required: "Title is required" })}\n                />\n                <RefineChakra.FormErrorMessage>\n                    {`${errors.title?.message}`}\n                </RefineChakra.FormErrorMessage>\n            </RefineChakra.FormControl>\n            <RefineChakra.FormControl mb="3" isInvalid={!!errors?.status}>\n                <RefineChakra.FormLabel>Status</RefineChakra.FormLabel>\n                <Select\n                    id="content"\n                    placeholder="Select Post Status"\n                    {...register("status", {\n                        required: "Status is required",\n                    })}\n                >\n                    <option>published</option>\n                    <option>draft</option>\n                    <option>rejected</option>\n                </Select>\n                <RefineChakra.FormErrorMessage>\n                    {`${errors.status?.message}`}\n                </RefineChakra.FormErrorMessage>\n            </RefineChakra.FormControl>\n            <RefineChakra.FormControl mb="3" isInvalid={!!errors?.categoryId}>\n                <RefineChakra.FormLabel>Category</RefineChakra.FormLabel>\n                <RefineChakra.Select\n                    id="categoryId"\n                    placeholder="Select Category"\n                    {...register("categoryId", {\n                        required: "Category is required",\n                    })}\n                >\n                    {options?.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </RefineChakra.Select>\n                <RefineChakra.FormErrorMessage>\n                    {`${errors.categoryId?.message}`}\n                </RefineChakra.FormErrorMessage>\n            </RefineChakra.FormControl>\n        </Create>\n    );\n};\n\nconst Pagination: React.FC<{\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n}> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = RefineChakra.usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <RefineChakra.Box display="flex" justifyContent="flex-end">\n            <RefineChakra.HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <RefineChakra.IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >  \n                        <IconChevronLeft size="18" />\n                    </RefineChakra.IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <RefineChakra.Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </RefineChakra.Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <RefineChakra.IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </RefineChakra.IconButton>\n                )}\n            </RefineChakra.HStack>\n        </RefineChakra.Box>\n    );\n};\n\nconst { default: routerProvider } = RefineReactRouterV6;\nconst { default: simpleRest } = RefineSimpleRest;\n// const { notificationProvider } = RefineChakra;\n\nsetRefineProps({\n    routerProvider,\n    // notificationProvider: notificationProvider(),\n    dataProvider: simpleRest("https://api.fake-rest.refine.dev"),\n    Layout: RefineChakra.Layout,\n    catchAll: <RefineChakra.ErrorComponent />,\n    ReadyPage: RefineChakra.ReadyPage,\n});\n\nconst Wrapper = ({ children }) => {\n    return (\n        <RefineChakra.ChakraProvider theme={RefineChakra.refineTheme}>\n            {children}\n        </RefineChakra.ChakraProvider>\n    );\n};\n')),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This tutorial will go through process of building a simple ",(0,r.kt)("em",{parentName:"p"},"admin panel")," for a ",(0,r.kt)("em",{parentName:"p"},"CMS-like")," application with headless."),(0,r.kt)("p",null,"Step by step, you're going to learn how to consume a ",(0,r.kt)("em",{parentName:"p"},"REST API")," and add basic CRUD functionality to your panel leveraging the unique capabilities of ",(0,r.kt)("strong",{parentName:"p"},"refine"),"."),(0,r.kt)("p",null,"Let's begin by setting up a new ",(0,r.kt)("strong",{parentName:"p"},"refine")," project."),(0,r.kt)("h2",{id:"setting-up"},"Setting up"),(0,r.kt)("p",null,"There are two alternative methods to set up a ",(0,r.kt)("strong",{parentName:"p"},"refine")," application."),(0,r.kt)("p",null,"The recommended way is using the ",(0,r.kt)("inlineCode",{parentName:"p"},"create refine-app")," tool. ",(0,r.kt)("em",{parentName:"p"},"create refine-app"),"'s ",(0,r.kt)("em",{parentName:"p"},"CLI wizard")," will let you create and customize your application in seconds."),(0,r.kt)("p",null,"Alternatively, you may use the ",(0,r.kt)("em",{parentName:"p"},"create-react-app")," tool to create an empty ",(0,r.kt)("em",{parentName:"p"},"React")," application and then add ",(0,r.kt)("strong",{parentName:"p"},"refine")," module via ",(0,r.kt)("em",{parentName:"p"},"npm"),"."),(0,r.kt)(o.Z,{defaultValue:"create-refine-app",values:[{label:"use create refine-app",value:"create-refine-app"},{label:"use create-react-app",value:"create-react-app"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"create-react-app",mdxType:"TabItem"},(0,r.kt)("p",null,"First, run the ",(0,r.kt)("em",{parentName:"p"},"create-react-app")," tool to bootstrap an empty ",(0,r.kt)("em",{parentName:"p"},"React project"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npx create-react-app tutorial --template typescript\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"--template typescript")," flag will ensure that the Typescript language is selected.")),(0,r.kt)("p",null,"Navigate to the project folder and install ",(0,r.kt)("strong",{parentName:"p"},"refine")," with the following ",(0,r.kt)("em",{parentName:"p"},"npm")," command:"),(0,r.kt)(o.Z,{defaultValue:"npm",values:[{label:"use npm",value:"npm"},{label:"use yarn",value:"yarn"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-core @pankod/refine-chakra-ui @pankod/refine-react-router-v6 @pankod/refine-react-table @pankod/refine-react-hook-form \n"))),(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add  @pankod/refine-core @pankod/refine-chakra-ui @pankod/refine-react-router-v6 @pankod/refine-react-table @pankod/refine-react-hook-form \n")))),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"This tutorial assumes your project is configured for absolute imports. Since CRA does not configure it by default, you should configure it yourself to be able to use absolute imports. You should configure a ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#baseUrl"},(0,r.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," with ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl")," setting pointing to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/src")," directory in your project."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/importing-a-component/#absolute-imports"},"Refer to CRA docs for more information about absolute imports. ","\u2192")))),(0,r.kt)(i.Z,{value:"create-refine-app",mdxType:"TabItem"},(0,r.kt)("p",null,"First, run the ",(0,r.kt)("strong",{parentName:"p"},"create refine-app")," with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm create refine-app@latest -- -o refine-chakra-ui tutorial\n")))),(0,r.kt)("h2",{id:"about-fake-rest-api"},"About Fake REST API"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," is designed to consume data from APIs."),(0,r.kt)("p",null,"For the sake of this tutorial, we will provide you a fully working, ",(0,r.kt)("em",{parentName:"p"},"fake REST API")," located at ",(0,r.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/"},"https://api.fake-rest.refine.dev/"),". You may take a look at available ",(0,r.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/"},"resources and routes of the API")," before proceeding to the next step."),(0,r.kt)("h2",{id:"using-a-dataprovider"},"Using a Dataprovider"),(0,r.kt)("p",null,"Dataproviders are ",(0,r.kt)("strong",{parentName:"p"},"refine")," components making it possible to consume different API's and data services conveniently. To consume our ",(0,r.kt)("em",{parentName:"p"},"Fake REST API"),", we'll use the ",(0,r.kt)("strong",{parentName:"p"},'"Simple REST Dataprovider"'),"."),(0,r.kt)("p",null,"Next, navigate to the project folder and run the following command to install the required package:"),(0,r.kt)(o.Z,{defaultValue:"npm",values:[{label:"use npm",value:"npm"},{label:"use yarn",value:"yarn"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-simple-rest\n"))),(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @pankod/refine-simple-rest\n")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you used ",(0,r.kt)("inlineCode",{parentName:"p"},"create refine-app")," to bootstrap the project, you can skip issuing this command as ",(0,r.kt)("inlineCode",{parentName:"p"},"create refine-app")," already installs the selected data provider.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Fake REST API is based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server"},"JSON Server Project"),". ",(0,r.kt)("strong",{parentName:"p"},"Simple REST Dataprovider")," is fully compatible with the REST rules and methods of the ",(0,r.kt)("strong",{parentName:"p"},"JSON Server"),".")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"refine")," includes many out-of-the-box data providers to use in your projects like"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/simple-rest"},"Simple REST API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/graphql"},"GraphQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nestjsx-crud"},"NestJS CRUD")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/airtable"},"Airtable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi"},"Strapi")," - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-v4"},"Strapi v4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-graphql"},"Strapi GraphQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/supabase"},"Supabase")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/hasura"},"Hasura")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nhost"},"Nhost")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/appwrite"},"Appwrite")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/medusa"},"Medusa")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/altogic"},"Altogic"))),(0,r.kt)("h3",{parentName:"admonition",id:"community-\ufe0f"},"Community \u2764\ufe0f"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/resulturan/refine-firebase"},"Firebase")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/resulturan"},"rturan29")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-rest"},"Elide")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar"))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"dataProvider")," documentation for detailed usage. ","\u2192"))),(0,r.kt)("h2",{id:"bootstrapping-the-application"},"Bootstrapping the Application"),(0,r.kt)("p",null,"Replace the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport {\n    ChakraProvider,\n    ErrorComponent,\n    Layout,\n    refineTheme,\n    ReadyPage,\n    notificationProvider,\n} from "@pankod/refine-chakra-ui";\n\nconst App = () => {\n    return (\n        <ChakraProvider theme={refineTheme}>\n            <Refine\n                notificationProvider={notificationProvider()}\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                catchAll={<ErrorComponent />}\n            />\n        </ChakraProvider>\n    );\n};\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Refine application uses ",(0,r.kt)("a",{parentName:"p",href:"https://fonts.google.com/specimen/Montserrat"},(0,r.kt)("inlineCode",{parentName:"a"},"Montserrat"))," font by default as it is defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/next/packages/chakra-ui/src/theme/index.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"typography"))," property of the theme. But to use ",(0,r.kt)("a",{parentName:"p",href:"https://fonts.google.com/specimen/Montserrat"},(0,r.kt)("inlineCode",{parentName:"a"},"Montserrat")),", you need to embed it to your ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," file.\nFor more information about adding font family in your Refine application, you can look at ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/chakra-ui/customization/theme"},(0,r.kt)("inlineCode",{parentName:"a"},"Chakra UI Theme Customization")),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        // highlight-start\n        <link\n            href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap"\n            rel="stylesheet"\n        />\n        // highlight-end\n        <title>refine adding font family example</title>\n    </head>\n\n    <body>\n        ...\n    </body>\n</html>\n'))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"refine")," comes native with Light/Dark theme support. Check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/chakra-ui/customization/theme"},(0,r.kt)("inlineCode",{parentName:"a"},"theme"))," documentation for more information.")),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Refine/>")," is the root component of a ",(0,r.kt)("strong",{parentName:"p"},"refine")," application. Using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"dataProvider"))," prop, we made our ",(0,r.kt)("strong",{parentName:"p"},"Simple REST Dataprovider")," available to the entire application."),(0,r.kt)("p",null,"Run the following command to launch the app in development mode:"),(0,r.kt)(o.Z,{defaultValue:"create-refine-app",values:[{label:"with create refine-app",value:"create-refine-app"},{label:"with create-react-app",value:"create-react-app"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"create-refine-app",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm run dev\n"))),(0,r.kt)(i.Z,{value:"create-react-app",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm run start\n")))),(0,r.kt)("p",null,"Your ",(0,r.kt)("strong",{parentName:"p"},"refine")," application should be up and running!",(0,r.kt)("br",{parentName:"p"}),"\n","Point your browser to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," to access it. You will see the welcome page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/"]);\n\nimport { Refine } from "@pankod/refine-core";\n\nconst App = () => {\n    return <Refine />;\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"adding-resources"},"Adding Resources"),(0,r.kt)("p",null,"Now we are ready to start connecting to our API by adding a resource to our application."),(0,r.kt)("p",null,"Let's add ",(0,r.kt)("strong",{parentName:"p"},"/posts/")," endpoint from our API as a resource. First take a look to the raw API response for the request made to the ",(0,r.kt)("strong",{parentName:"p"},"/posts/")," route:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show response"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="GET https://api.fake-rest.refine.dev/posts/"',title:'"GET','https://api.fake-rest.refine.dev/posts/"':!0},'[\n  {\n    "id": 1,\n    "title": "Eius ea autem sapiente placeat fuga voluptas quos quae.",\n    "slug": "beatae-esse-dolor",\n    "content": "Explicabo nihil delectus. Nam aliquid sunt numquam...",\n    "category": {\n      "id": 24\n    },\n    "user": {\n      "id": 7\n    },\n    "status": "draft",\n    "createdAt": "2021-03-13T03:09:30.186Z",\n    "image": [],\n    "tags": [\n      7,\n      4\n    ],\n    "language": 2\n  },\n  ...\n]\n')))),(0,r.kt)("br",null),(0,r.kt)("p",null,"Now, add the highlighted code to your ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," to connect to the endpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport {\n    ChakraProvider,\n    ErrorComponent,\n    Layout,\n    refineTheme,\n    ReadyPage,\n    notificationProvider,\n} from "@pankod/refine-chakra-ui";\n\nconst App = () => {\n    return (\n        <ChakraProvider theme={refineTheme}>\n            <Refine\n                notificationProvider={notificationProvider()}\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                catchAll={<ErrorComponent />}\n                // highlight-next-line\n                resources={[{ name: "posts" }]}\n            />\n        </ChakraProvider>\n    );\n};\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"resources")," is a property of ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine/>")," representing API Endpoints. The ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," property of every single resource should match one of the endpoints in your API!")),(0,r.kt)("p",null,"Instead of showing the welcome page, the application should redirect now to an URL defined by the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," property. Open your application to check that the URL is routed to ",(0,r.kt)("strong",{parentName:"p"},"/posts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly disableScroll",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0,disableScroll:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\n\nconst App = () => {\n    return <Refine resources={[{ name: "posts" }]} />;\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("p",null,"You'll still see a ",(0,r.kt)("strong",{parentName:"p"},"404")," error page because no ",(0,r.kt)("strong",{parentName:"p"},"Page")," component is assigned to our resource yet."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"resources")," use ",(0,r.kt)("strong",{parentName:"p"},"Page")," components to handle data and perform rendering. ",(0,r.kt)("strong",{parentName:"p"},"Page")," components are passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," as an array of objects.\nFor basic ",(0,r.kt)("em",{parentName:"p"},"CRUD")," operations, there are ",(0,r.kt)("strong",{parentName:"p"},"four")," predefined props: ",(0,r.kt)("strong",{parentName:"p"},"list"),", ",(0,r.kt)("strong",{parentName:"p"},"create"),", ",(0,r.kt)("strong",{parentName:"p"},"edit")," and ",(0,r.kt)("strong",{parentName:"p"},"show"),".")),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)("strong",{parentName:"p"},"Page")," component to fetch ",(0,r.kt)("strong",{parentName:"p"},"posts")," and display them as a table. Later, we will pass the component as the ",(0,r.kt)("strong",{parentName:"p"},"list")," prop to our resource."),(0,r.kt)("h2",{id:"creating-a-list-page"},"Creating a List Page"),(0,r.kt)("p",null,"First, we'll need an interface to work with the data from the API endpoint."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We'll use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-table")," for benefit of the ",(0,r.kt)("strong",{parentName:"p"},"TanStack Table v8")," library. However, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," without the ",(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-table")," package.")),(0,r.kt)("p",null,"Create a new folder named ",(0,r.kt)("em",{parentName:"p"},'"interfaces"')," under ",(0,r.kt)("em",{parentName:"p"},'"/src"')," if you don't already have one. Then create a ",(0,r.kt)("em",{parentName:"p"},'"index.d.ts"')," file with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="interfaces/index.d.ts"',title:'"interfaces/index.d.ts"'},'export interface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n    createdAt: string;\n}\n')),(0,r.kt)("p",null,"We'll be using ",(0,r.kt)("strong",{parentName:"p"},"title"),", ",(0,r.kt)("strong",{parentName:"p"},"status")," and ",(0,r.kt)("strong",{parentName:"p"},"createdAt")," fields of every ",(0,r.kt)("strong",{parentName:"p"},"post")," record."),(0,r.kt)("p",null,"Now, create a new folder named ",(0,r.kt)("em",{parentName:"p"},'"pages/posts"')," under ",(0,r.kt)("em",{parentName:"p"},'"/src"'),". Under that folder, create a ",(0,r.kt)("em",{parentName:"p"},'"list.tsx"')," file with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n} from "@pankod/refine-chakra-ui";\n\nimport { IPost } from "../../interfaces";\n\nexport const PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const { getHeaderGroups, getRowModel } = useTable({\n        columns,\n        refineCoreProps: {\n            initialSorter: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n        </List>\n    );\n};\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-table")," hook uses ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable()")," fetches data from API. Normally, ",(0,r.kt)("strong",{parentName:"p"},"TanStack-table"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"useReactTable")," expects a ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," prop but ",(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-table"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," doesn't expect a ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," prop."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-table"},"Refer to the ",(0,r.kt)("strong",{parentName:"a"},"@pankod/refine-react-table")," for more information. \u2192")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We didn't use arrow functions for rendering cell because of the react/display-name is not compatible with arrow functions. If you want to use arrow functions, you can use like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},'// eslint-disable-next-line\nrenderCell: ({ getValue }) => (\n    <DateField value={getValue() as string} format="LLL" />\n);\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/chakra-ui/components/fields/tag"},"Refer to ",(0,r.kt)("inlineCode",{parentName:"a"},"<DateField />")," for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("p",null,"Finally, we are ready to add ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostList>")," to our resource. Add the highlighted line to your ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    ChakraProvider,\n    ErrorComponent,\n    Layout,\n    refineTheme,\n    ReadyPage,\n    notificationProvider,\n} from "@pankod/refine-chakra-ui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\n// highlight-next-line\nimport { PostList } from "./pages";\n\nconst App: React.FC = () => {\n    return (\n        <ChakraProvider theme={refineTheme}>\n            <Refine\n                notificationProvider={notificationProvider()}\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                catchAll={<ErrorComponent />}\n                // highlight-next-line\n                resources={[{ name: "posts", list: PostList }]}\n            />\n        </ChakraProvider>\n    );\n};\n')),(0,r.kt)("p",null,"Note you will need a few more files which help ",(0,r.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," to find your pages and posts. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/pages")," folder, put this ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," file in it which allows everything in the ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," folder to be used elsewhere."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/index.ts"',title:'"src/pages/index.ts"'},'export * from "./posts";\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Similarly, put a file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/src/pages/posts")," folder which accomplishes the same function. We will use the commented out code later as we add more capabilities to our app. Remember as you add functions, uncomment each appropriate line."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/index.ts"',title:'"src/pages/posts/index.ts"'},'export * from "./list";\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Open your application in your browser. You will see ",(0,r.kt)("strong",{parentName:"p"},"posts")," are displayed correctly in a table structure and even the pagination works out-of-the box."),(0,r.kt)("p",null,"On the next step, we are going to add a category field to the table which involves handling data relationships."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n} from "@pankod/refine-chakra-ui";\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const { getHeaderGroups, getRowModel } = useTable({\n        columns,\n    });\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"handling-relationships"},"Handling relationships"),(0,r.kt)("p",null,"Remember the records from ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint that had a category id field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/posts/1"',title:'"https://api.fake-rest.refine.dev/posts/1"'},'...\n  "category": {\n    "id": 26\n  }\n...\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"To display category titles on our table, we need to category id to their corresponding titles.\nThe category title data can be obtained from the ",(0,r.kt)("inlineCode",{parentName:"p"},"/categories")," endpoint for each record."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/categories/26"',title:'"https://api.fake-rest.refine.dev/categories/26"'},'  {\n    "id": 26,\n    "title": "mock category title",\n  }\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"At this point, we need to join records from different resources. For this, we're going to use the refine hook ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany"),"."),(0,r.kt)("p",null,"Before we start, just edit our interface for the new ",(0,r.kt)("inlineCode",{parentName:"p"},"ICategory")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="interfaces/index.d.ts"',title:'"interfaces/index.d.ts"'},'// highlight-start\nexport interface ICategory {\n    id: number;\n    title: string;\n}\n// highlight-end\n\nexport interface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n    // highlight-next-line\n    category: { id: number };\n    createdAt: string;\n}\n')),(0,r.kt)("p",null,"So we can update our ",(0,r.kt)("inlineCode",{parentName:"p"},"list.tsx")," with the highlighted lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n} from "@pankod/refine-chakra-ui";\n// highlight-next-line\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\n// highlight-next-line\nimport { IPost, ICategory } from "../../interfaces";\n\nexport const PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n            },\n            // highlight-start\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            // highlight-end\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        // highlight-start\n        setOptions,\n        refineCore: {\n            tableQueryResult: { data: tableData },\n        },\n        // highlight-end\n    } = useTable({\n        columns,\n    });\n\n    // highlight-start\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n    // highlight-end\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n        </List>\n    );\n};\n')),(0,r.kt)("p",null,"We construct an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"categoryId"),"'s from ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint and pass it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany")," hook. ",(0,r.kt)("inlineCode",{parentName:"p"},"categoriesData")," will be filled with ",(0,r.kt)("em",{parentName:"p"},"id-title")," tuples to be used for rendering our component."),(0,r.kt)("p",null,"Try the result on your browser and you'll notice that the category column is filled correctly with the matching category titles for the each record's category id's. Even the loading state is managed by ",(0,r.kt)("strong",{parentName:"p"},"refine"),"."),(0,r.kt)("p",null,"To get more detailed information about this hook, please refer the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany"},"useMany Documentation"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"adding-sorting-and-filtering"},"Adding Sorting and Filtering"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-table")," package also listens for changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sorting")," states of the ",(0,r.kt)("strong",{parentName:"p"},"Tanstack Table")," and updates the table accordingly. The change in these states triggers the fetch of the new data."),(0,r.kt)("p",null,"So, we can add filters and sorting features to our table as suggested by TanStack Table with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    // highlight-next-line\n    Select,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\n// highlight-next-line\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\n// highlight-next-line\nimport { IPost, ICategory, FilterElementProps } from "../../interfaces";\n\nexport const PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                // highlight-next-line\n                enableColumnFilter: false,\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                // highlight-start\n                meta: {\n                    filterOperator: "contains",\n                },\n                // highlight-end\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                // highlight-start\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n                // highlight-end\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                // highlight-next-line\n                enableColumnFilter: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                // highlight-start\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                                // highlight-end\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n        </List>\n    );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},'export interface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n    createdAt: string;\n}\n\nexport interface ICategory {\n    id: number;\n    title: string;\n}\n\n// highlight-start\nexport interface ColumnButtonProps {\n    column: Column<any, any>;\n}\n\nexport interface FilterElementProps {\n    value: any;\n    onChange: (value: any) => void;\n}\n// highlight-end\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show ColumnFilter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/table/columnFilter.tsx"',title:'"src/components/table/columnFilter.tsx"'},'import React, { useState } from "react";\nimport {\n    Input,\n    Menu,\n    IconButton,\n    MenuButton,\n    MenuList,\n    VStack,\n    HStack,\n} from "@pankod/refine-chakra-ui";\nimport { IconFilter, IconX, IconCheck } from "@tabler/icons";\n\nimport { ColumnButtonProps } from "../../interfaces";\n\nexport const ColumnFilter: React.FC<ColumnButtonProps> = ({ column }) => {\n    // eslint-disable-next-line\n    const [state, setState] = useState(null as null | { value: any });\n\n    if (!column.getCanFilter()) {\n        return null;\n    }\n\n    const open = () =>\n        setState({\n            value: column.getFilterValue(),\n        });\n\n    const close = () => setState(null);\n\n    // eslint-disable-next-line\n    const change = (value: any) => setState({ value });\n\n    const clear = () => {\n        column.setFilterValue(undefined);\n        close();\n    };\n\n    const save = () => {\n        if (!state) return;\n        column.setFilterValue(state.value);\n        close();\n    };\n\n    const renderFilterElement = () => {\n        // eslint-disable-next-line\n        const FilterComponent = (column.columnDef?.meta as any)?.filterElement;\n\n        if (!FilterComponent && !!state) {\n            return (\n                <Input\n                    borderRadius="md"\n                    size="sm"\n                    autoComplete="off"\n                    value={state.value}\n                    onChange={(e) => change(e.target.value)}\n                />\n            );\n        }\n\n        return (\n            <FilterComponent\n                value={state?.value}\n                onChange={(e: any) => change(e.target.value)}\n            />\n        );\n    };\n\n    return (\n        <Menu isOpen={!!state} onClose={close}>\n            <MenuButton\n                onClick={open}\n                as={IconButton}\n                aria-label="Options"\n                icon={<IconFilter size="16" />}\n                variant="ghost"\n                size="xs"\n            />\n            <MenuList p="2">\n                {!!state && (\n                    <VStack align="flex-start">\n                        {renderFilterElement()}\n                        <HStack spacing="1">\n                            <IconButton\n                                aria-label="Clear"\n                                size="sm"\n                                colorScheme="red"\n                                onClick={clear}\n                            >\n                                <IconX size={18} />\n                            </IconButton>\n                            <IconButton\n                                aria-label="Save"\n                                size="sm"\n                                onClick={save}\n                                colorScheme="green"\n                            >\n                                <IconCheck size={18} />\n                            </IconButton>\n                        </HStack>\n                    </VStack>\n                )}\n            </MenuList>\n        </Menu>\n    );\n};\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show ColumnSorter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/table/columnSorter.tsx"',title:'"src/components/table/columnSorter.tsx"'},'import { IconButton } from "@chakra-ui/react";\nimport { IconChevronDown, IconSelector } from "@tabler/icons";\n\nimport { ColumnButtonProps } from "../../interfaces";\n\nexport const ColumnSorter: React.FC<ColumnButtonProps> = ({ column }) => {\n    if (!column.getCanSort()) {\n        return null;\n    }\n\n    const sorted = column.getIsSorted();\n\n    return (\n        <IconButton\n            aria-label="Sort"\n            size="xs"\n            onClick={column.getToggleSortingHandler()}\n            style={{\n                transition: "transform 0.25s",\n                transform: `rotate(${sorted === "asc" ? "180" : "0"}deg)`,\n            }}\n            variant={sorted ? "light" : "transparent"}\n            color={sorted ? "primary" : "gray"}\n        >\n            {sorted ? (\n                <IconChevronDown size={18} />\n            ) : (\n                <IconSelector size={18} />\n            )}\n        </IconButton>\n    );\n};\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    Select,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\n\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                enableColumnFilter: false,\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                enableColumnFilter: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Chakra UI")," does not provide a pagination component. Let's create a simple pagination component."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Pagination Component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/pagination/index.tsx"',title:'"src/components/pagination/index.tsx"'},'import { FC } from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons";\nimport { IconButton, usePagination } from "@pankod/refine-chakra-ui";\n\ntype PaginationProps = {\n    current: number;\n    pageCount: number;\n    setCurrent: (page: number) => void;\n};\n\nexport const Pagination: FC<PaginationProps> = ({\n    current,\n    pageCount,\n    setCurrent,\n}) => {\n    const pagination = usePagination({\n        current,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <IconButton\n                        aria-label="previous page"\n                        onClick={() => setCurrent(current - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        <IconChevronLeft size="18" />\n                    </IconButton>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrent(page)}\n                            variant={page === current ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <IconButton\n                        aria-label="next page"\n                        onClick={() => setCurrent(current + 1)}\n                        variant="outline"\n                    >\n                        <IconChevronRight size="18" />\n                    </IconButton>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    Select,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\nimport { Pagination } from "../../components/pagination";\nimport { IPost, ICategory, FilterElementProps } from "../../interfaces";\n\nexport const PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n                enableColumnFilter: false,\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            tableQueryResult: { data: tableData },\n            // highlight-start\n            setCurrent,\n            pageCount,\n            current,\n            // highlight-end\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            // highlight-start\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n            // highlight-end\n        </List>\n    );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    Select,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\n\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                enableColumnFilter: false,\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                enableColumnFilter: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"showing-a-single-record"},"Showing a single record"),(0,r.kt)("p",null,"At this point we are able to list all ",(0,r.kt)("em",{parentName:"p"},"post")," records on the table component with pagination, sorting and filtering functionality. Next, we are going to add a ",(0,r.kt)("em",{parentName:"p"},"details page")," to fetch and display data from a single record."),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostShow>")," component on ",(0,r.kt)("inlineCode",{parentName:"p"},"/pages/posts")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/pages/posts/show.tsx"',title:'"/pages/posts/show.tsx"'},'import { useShow, useOne } from "@pankod/refine-core";\nimport {\n    Show,\n    Heading,\n    Text,\n    MarkdownField,\n    Spacer,\n} from "@pankod/refine-chakra-ui";\n\nimport { ICategory, IPost } from "../../interfaces";\n\nexport const PostShow: React.FC = () => {\n    const { queryResult } = useShow<IPost>();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    const { data: categoryData } = useOne<ICategory>({\n        resource: "categories",\n        id: record?.category.id || "",\n        queryOptions: {\n            enabled: !!record?.category.id,\n        },\n    });\n\n    return (\n        <Show isLoading={isLoading}>\n            <Heading as="h5" size="sm">\n                Id\n            </Heading>\n            <Text mt={2}>{record?.id}</Text>\n\n            <Heading as="h5" size="sm" mt={4}>\n                Title\n            </Heading>\n            <Text mt={2}>{record?.title}</Text>\n\n            <Heading as="h5" size="sm" mt={4}>\n                Status\n            </Heading>\n            <Text mt={2}>{record?.status}</Text>\n\n            <Heading as="h5" size="sm" mt={4}>\n                Category\n            </Heading>\n            <Text mt={2}>{categoryData?.data?.title}</Text>\n\n            <Heading as="h5" size="sm" mt={4}>\n                Content\n            </Heading>\n            <Spacer mt={2} />\n            <MarkdownField value={record?.content} />\n        </Show>\n    );\n};\n')),(0,r.kt)("p",null,"\u2733\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"useShow()")," is a ",(0,r.kt)("strong",{parentName:"p"},"refine")," hook used to fetch a single record of data. The ",(0,r.kt)("inlineCode",{parentName:"p"},"queryResult")," has the response and also ",(0,r.kt)("inlineCode",{parentName:"p"},"isLoading")," state."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/show/useShow"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"useShow")," documentation for detailed usage information. ","\u2192")),(0,r.kt)("p",null,"\u2733\ufe0f To retrieve the category title, again we need to make a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"/categories")," endpoint. This time we used ",(0,r.kt)("inlineCode",{parentName:"p"},"useOne()")," hook to get a single record from another resource."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useOne"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"useOne")," documentation for detailed usage information. ","\u2192")),(0,r.kt)("admonition",{title:"attention",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useShow()")," is the preferred hook for fetching data from the current resource. To query foreign resources you may use the low-level ",(0,r.kt)("inlineCode",{parentName:"p"},"useOne()")," hook.")),(0,r.kt)("p",null,"Since we've got access to raw data returning from ",(0,r.kt)("inlineCode",{parentName:"p"},"useShow()"),", there is no restriction on how it's displayed on your components. If you prefer presenting your content with a nicer wrapper, ",(0,r.kt)("strong",{parentName:"p"},"refine")," provides you\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component which has extra features like ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"refresh")," buttons."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/basic-views/show"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"<Show>")," documentation for detailed usage information. ","\u2192")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Now we can add the newly created component to our resource with ",(0,r.kt)("inlineCode",{parentName:"p"},"show")," prop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    ChakraProvider,\n    ErrorComponent,\n    Layout,\n    refineTheme,\n    ReadyPage,\n    notificationProvider,\n} from "@pankod/refine-chakra-ui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\n// highlight-next-line\nimport { PostList, PostShow } from "./pages";\n\nconst App: React.FC = () => {\n    return (\n        <ChakraProvider theme={refineTheme}>\n            <Refine\n                notificationProvider={notificationProvider()}\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                catchAll={<ErrorComponent />}\n                // highlight-next-line\n                resources={[{ name: "posts", list: PostList, show: PostShow }]}\n            />\n        </ChakraProvider>\n    );\n};\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"And then we can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"<ShowButton>")," on the list page to make it possible for users to navigate to detail pages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n    ...\n    // highlight-next-line\n    ShowButton,\n} from "@pankod/refine-chakra-ui";\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n           ...\n           //highlight-start\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <ShowButton\n                            hideText\n                            recordItemId={getValue() as number}\n                        />\n                    );\n                },\n            },\n            //highlight-end\n        ],\n        [],\n    );\n\n\n    const { ... } = useTable<IPost>({ columns });\n\n    return (\n        ...\n    );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    Select,\n    ShowButton,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\n\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                enableColumnFilter: false,\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                enableColumnFilter: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <ShowButton\n                            hideText\n                            recordItemId={getValue() as number}\n                        />\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    show: PostShow,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"editing-a-record"},"Editing a record"),(0,r.kt)("p",null,"Until this point, we were basically working with reading operations such as fetching and displaying data from resources. From now on, we are going to start creating and updating records by using ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm"),"."),(0,r.kt)("p",null,"Let's start by creating a new ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," page responsible for editing a single record:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/edit.tsx"',title:'"src/pages/posts/edit.tsx"'},'import { useEffect } from "react";\nimport {\n    Edit,\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Select,\n} from "@pankod/refine-chakra-ui";\nimport { useSelect } from "@pankod/refine-core";\nimport { useForm } from "@pankod/refine-react-hook-form";\n\nimport { IPost } from "../../interfaces";\n\nexport const PostEdit = () => {\n    const {\n        refineCore: { formLoading, queryResult },\n        saveButtonProps,\n        register,\n        formState: { errors },\n        resetField,\n    } = useForm<IPost>();\n\n    const { options } = useSelect({\n        resource: "categories",\n        defaultValue: queryResult?.data?.data.category.id,\n        queryOptions: { enabled: !!queryResult?.data?.data.category.id },\n    });\n\n    useEffect(() => {\n        resetField("category.id");\n    }, [options]);\n\n    return (\n        <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.title}>\n                <FormLabel>Title</FormLabel>\n                <Input\n                    id="title"\n                    type="text"\n                    {...register("title", { required: "Title is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.title?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.status}>\n                <FormLabel>Status</FormLabel>\n                <Select\n                    id="content"\n                    placeholder="Select Post Status"\n                    {...register("status", {\n                        required: "Status is required",\n                    })}\n                >\n                    <option>published</option>\n                    <option>draft</option>\n                    <option>rejected</option>\n                </Select>\n                <FormErrorMessage>\n                    {`${errors.status?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.categoryId}>\n                <FormLabel>Category</FormLabel>\n                <Select\n                    id="category"\n                    placeholder="Select Category"\n                    {...register("category.id", {\n                        required: true,\n                    })}\n                >\n                    {options?.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </Select>\n                <FormErrorMessage>\n                    {`${errors.categoryId?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Edit>\n    );\n};\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Let's see what's going on our ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component in detail:"),(0,r.kt)("p",null,"\u2733\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," is a refine hook for handling form data. In edit page, ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook initializes the form with current record values."),(0,r.kt)("admonition",{title:"Attention",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u2733\ufe0f ",(0,r.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/input/usage"},(0,r.kt)("inlineCode",{parentName:"a"},"<Input>"))," is Chakra UI components to build form inputs."),(0,r.kt)("p",{parentName:"admonition"},"\u2733\ufe0f Save button submits the form by executing the ",(0,r.kt)("inlineCode",{parentName:"p"},"useUpdate")," method provided by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"dataProvider")),". After a successful response, the application will be redirected to the listing page.")),(0,r.kt)("p",null,"Now we can add the newly created component to our resource with ",(0,r.kt)("inlineCode",{parentName:"p"},"edit")," prop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    ChakraProvider,\n    ErrorComponent,\n    Layout,\n    refineTheme,\n    ReadyPage,\n    notificationProvider,\n} from "@pankod/refine-chakra-ui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\n// highlight-next-line\nimport { PostList, PostShow, PostEdit } from "./pages";\n\nconst App: React.FC = () => {\n    return (\n        <ChakraProvider theme={refineTheme}>\n            <Refine\n                notificationProvider={notificationProvider()}\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostList,\n                        show: PostShow,\n                        // highlight-next-line\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n        </ChakraProvider>\n    );\n};\n')),(0,r.kt)("p",null,"We are going to need an ",(0,r.kt)("em",{parentName:"p"},"edit")," button on each row to display the ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component. ",(0,r.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add one, so we have to update our ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostList>")," component to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"<EditButton>")," for each record:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n    ...\n    ShowButton,\n    // highlight-start\n    EditButton\n    HStack,\n    // highlight-end\n} from "@pankod/refine-chakra-ui";\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n           ...\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        // highlight-start\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                        //highlight-end\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n\n    const { ... } = useTable<IPost>({ columns });\n\n    return (\n        ...\n    );\n};\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/edit-button"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"<EditButton>")," documentation for detailed usage information. ","\u2192")),(0,r.kt)("p",null,"You can try using edit buttons which will trigger the edit forms for each record, allowing you to update the record data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    Select,\n    ShowButton,\n    EditButton,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\n\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                enableColumnFilter: false,\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                enableColumnFilter: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    show: PostShow,\n                    edit: PostEdit,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"creating-a-record"},"Creating a record"),(0,r.kt)("p",null,"Creating a record in ",(0,r.kt)("strong",{parentName:"p"},"refine")," follows a similar flow as ",(0,r.kt)("inlineCode",{parentName:"p"},"editing")," records."),(0,r.kt)("p",null,"First, we'll create a ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostCreate>")," page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},'import {\n    Create,\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Select,\n} from "@pankod/refine-chakra-ui";\nimport { useSelect } from "@pankod/refine-core";\nimport { useForm } from "@pankod/refine-react-hook-form";\n\nimport { IPost } from "../../interfaces";\n\nexport const PostCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm<IPost>();\n\n    const { options } = useSelect({\n        resource: "categories",\n    });\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.title}>\n                <FormLabel>Title</FormLabel>\n                <Input\n                    id="title"\n                    type="text"\n                    {...register("title", { required: "Title is required" })}\n                />\n                <FormErrorMessage>\n                    {`${errors.title?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.status}>\n                <FormLabel>Status</FormLabel>\n                <Select\n                    id="content"\n                    placeholder="Select Post Status"\n                    {...register("status", {\n                        required: "Status is required",\n                    })}\n                >\n                    <option>published</option>\n                    <option>draft</option>\n                    <option>rejected</option>\n                </Select>\n                <FormErrorMessage>\n                    {`${errors.status?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.categoryId}>\n                <FormLabel>Category</FormLabel>\n                <Select\n                    id="categoryId"\n                    placeholder="Select Category"\n                    {...register("categoryId", {\n                        required: "Category is required",\n                    })}\n                >\n                    {options?.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </Select>\n                <FormErrorMessage>\n                    {`${errors.categoryId?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Create>\n    );\n};\n')),(0,r.kt)("p",null,"We should notice some minor differences from the edit example:"),(0,r.kt)("p",null,"\u2733\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"<form>")," is wrapped with ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," component."),(0,r.kt)("p",null,"\u2733\ufe0f Save button submits the form by executing the ",(0,r.kt)("inlineCode",{parentName:"p"},"useCreate")," method provided by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"dataProvider")),"."),(0,r.kt)("p",null,"\u2733\ufe0f No ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"useSelect"),"."),(0,r.kt)("br",null),(0,r.kt)("p",null,"After creating the ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostCreate>")," component, add it to resource with ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," prop:"),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    ChakraProvider,\n    ErrorComponent,\n    Layout,\n    refineTheme,\n    ReadyPage,\n    notificationProvider,\n} from "@pankod/refine-chakra-ui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\n// highlight-next-line\nimport { PostList, PostShow, PostEdit, PostCreate } from "./pages";\n\nconst App: React.FC = () => {\n    return (\n        <ChakraProvider theme={refineTheme}>\n            <Refine\n                notificationProvider={notificationProvider()}\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostList,\n                        show: PostShow,\n                        edit: PostEdit,\n                        // highlight-next-line\n                        create: PostCreate,\n                    },\n                ]}\n            />\n        </ChakraProvider>\n    );\n};\n')),(0,r.kt)("p",null,"And that's it! Try it on the browser and see if you can create new posts from scratch."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/create previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts/create",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    Select,\n    ShowButton,\n    EditButton,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\n\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                enableColumnFilter: false,\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                enableColumnFilter: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    show: PostShow,\n                    edit: PostEdit,\n                    create: PostCreate,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"deleting-a-record"},"Deleting a record"),(0,r.kt)("p",null,"Deleting a record can be done in two ways."),(0,r.kt)("p",null,"The first way is adding a delete button on each row since ",(0,r.kt)("em",{parentName:"p"},"refine")," doesn't automatically add one, so we have to update our ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostList>")," component to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," for each record:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n    ...\n    ShowButton,\n    EditButton\n    HStack,\n    // highlight-next-line\n    DeleteButton,\n} from "@pankod/refine-chakra-ui";\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n           ...\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        \n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            // highlight-start\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            //highlight-end\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n\n    const { ... } = useTable<IPost>({ columns });\n\n    return (\n        ...\n    );\n};\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/delete-button"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation for detailed usage information. ","\u2192")),(0,r.kt)("p",null,"Now you can try deleting records yourself. Just click on the delete button of the record you want to delete and confirm."),(0,r.kt)("p",null,"The second way is showing delete button in ",(0,r.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component. To show delete button in edit page, ",(0,r.kt)("inlineCode",{parentName:"p"},"canDelete")," prop needs to be passed to resource object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n    ChakraProvider,\n    ErrorComponent,\n    Layout,\n    refineTheme,\n    ReadyPage,\n    notificationProvider,\n} from "@pankod/refine-chakra-ui";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { PostList, PostShow, PostEdit, PostCreate } from "./pages";\n\nconst App: React.FC = () => {\n    return (\n        <ChakraProvider theme={refineTheme}>\n            <Refine\n                notificationProvider={notificationProvider()}\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                catchAll={<ErrorComponent />}\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostList,\n                        show: PostShow,\n                        edit: PostEdit,\n                        create: PostCreate,\n                        // highlight-next-line\n                        canDelete: true,\n                    },\n                ]}\n            />\n        </ChakraProvider>\n    );\n};\n')),(0,r.kt)("p",null,"After adding ",(0,r.kt)("inlineCode",{parentName:"p"},"canDelete")," prop, ",(0,r.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," will appear in edit form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px previewOnly",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px",previewOnly:!0},'setInitialRoutes(["/posts"]);\n\nimport { Refine } from "@pankod/refine-core";\nimport { useTable, ColumnDef, flexRender } from "@pankod/refine-react-table";\nimport {\n    List,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n    DateField,\n    Select,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n} from "@pankod/refine-chakra-ui";\nimport { GetManyResponse, useMany } from "@pankod/refine-core";\n\nimport { ColumnFilter, ColumnSorter } from "../../components/table";\n\n\nconst PostList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                enableColumnFilter: false,\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select defaultValue="published" {...props}>\n                                <option value="published">Published</option>\n                                <option value="draft">Draft</option>\n                                <option value="rejected">Rejected</option>\n                            </Select>\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "category.id",\n                header: "Category",\n                enableColumnFilter: false,\n                accessorKey: "category.id",\n                cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        categoriesData: GetManyResponse<ICategory>;\n                    };\n                    const category = meta.categoriesData?.data.find(\n                        (item) => item.id === getValue(),\n                    );\n                    return category?.title ?? "Loading...";\n                },\n            },\n            {\n                id: "createdAt",\n                header: "Created At",\n                accessorKey: "createdAt",\n                enableColumnFilter: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <DateField value={getValue() as string} format="LLL" />\n                    );\n                },\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <HStack>\n                            <ShowButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <EditButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="sm"\n                                recordItemId={getValue() as number}\n                            />\n                        </HStack>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n    const { data: categoriesData } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n            categoriesData,\n        },\n    }));\n\n    return (\n        <List>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                current={current}\n                pageCount={pageCount}\n                setCurrent={setCurrent}\n            />\n        </List>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    show: PostShow,\n                    edit: PostEdit,\n                    create: PostCreate,\n                    canDelete: true,\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Our tutorial is complete. Below you'll find a Live StackBlitz Example displaying what we have done so far:"),(0,r.kt)(u,{path:"tutorial-chakra-ui",mdxType:"StackblitzExample"}),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"Read about the authProvider to implement authentication for your refine application. ","\u2192"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},"Read about the dataProvider to consume custom API's ","\u2192"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/i18n-provider"},"Read about the i18nProvider to add language support. ","\u2192"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/advanced-tutorials/upload/multipart-upload"},"Check the Guides & Concept section to learn generic solutions to common problems ","\u2192"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/examples/customization/topMenuLayout"},"Check example section for code snippets ","\u2192")))))}g.isMDXComponent=!0}}]);