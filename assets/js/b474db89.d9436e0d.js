"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[381],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,k=u["".concat(i,".").concat(c)]||u[c]||d[c]||o;return n?r.createElement(k,l(l({ref:t},m),{},{components:n})):r.createElement(k,l({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},64171:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"useStepsForm",title:"useStepsForm"},l=void 0,s={unversionedId:"api-reference/antd/hooks/form/useStepsForm",id:"api-reference/antd/hooks/form/useStepsForm",title:"useStepsForm",description:"useStepsForm hook allows you to split your form under an Ant Design based Steps component and provides you with a few useful functionalities that will help you manage your form.",source:"@site/docs/api-reference/antd/hooks/form/useStepsForm.md",sourceDirName:"api-reference/antd/hooks/form",slug:"/api-reference/antd/hooks/form/useStepsForm",permalink:"/docs/api-reference/antd/hooks/form/useStepsForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/form/useStepsForm.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{id:"useStepsForm",title:"useStepsForm"},sidebar:"someSidebar",previous:{title:"useModalForm",permalink:"/docs/api-reference/antd/hooks/form/useModalForm"},next:{title:"useImport",permalink:"/docs/api-reference/antd/hooks/import/useImport"}},i={},p=[{value:"Usage",id:"usage",level:2},{value:"Create",id:"create",level:3},{value:"Edit",id:"edit",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Return Values",id:"return-values",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Example",id:"example",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=m("PropsTable"),d=m("StackblitzExample"),c={toc:p};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useStepsForm")," hook allows you to split your form under an Ant Design based ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/steps/"},"Steps")," component and provides you with a few useful functionalities that will help you manage your form."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useStepsForm } from "@pankod/refine-antd";\n\nconst { stepsProps, formProps } = useStepsForm<IPost>();\n')),(0,a.kt)("p",null,"All we have to do is to pass the props it returns to our ",(0,a.kt)("inlineCode",{parentName:"p"},"<Steps>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," components."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"We'll do two examples, one for creating and one for editing a post. Let's see how ",(0,a.kt)("inlineCode",{parentName:"p"},"useStepsForm")," is used in both."),(0,a.kt)("h3",{id:"create"},"Create"),(0,a.kt)("p",null,"For the sake of simplicity, in this example we're going to build a ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," create form that consists of only a ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," and a relational ",(0,a.kt)("inlineCode",{parentName:"p"},"category")," field."),(0,a.kt)("p",null,"To split your form items under a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Steps>")," component, first import and use ",(0,a.kt)("inlineCode",{parentName:"p"},"useStepsForm")," hook in your page:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import { useStepsForm } from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n// highlight-start\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n    } = useStepsForm<IPost>();\n// highlight-end\n\n    return null;\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useStepsForm")," is generic over the type form data to help you type check your code."),(0,a.kt)("p",null,"This hook returns a set of useful values to render steps form. Given ",(0,a.kt)("inlineCode",{parentName:"p"},"current")," value, you should have a way to render your form items conditionally with this index value. You can use an array to achieve this."),(0,a.kt)("p",null,"Here, each item of ",(0,a.kt)("inlineCode",{parentName:"p"},"formList")," corresponds to one step in form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'// highlight-next-line\nimport { useStepsForm, useSelect, Form, Input, Select } from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    // highlight-start\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n    } = useStepsForm<IPost>();\n    // highlight-end\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n\n// highlight-start\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n        </>,\n    ];\n// highlight-end\n\n    return null;\n};\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Since ",(0,a.kt)("inlineCode",{parentName:"p"},"category")," is a relational data, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"useSelect")," to fetch its data."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/field/useSelect"},"Refer to ",(0,a.kt)("inlineCode",{parentName:"a"},"useSelect")," documentation for detailed usage. ","\u2192"))),(0,a.kt)("br",null),(0,a.kt)("p",null,"You should use ",(0,a.kt)("inlineCode",{parentName:"p"},"stepsProps")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"<Steps>")," component, ",(0,a.kt)("inlineCode",{parentName:"p"},"formProps")," on the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," component respectively. And as the last step, you should render the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Steps>")," component besides the form like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import {\n    useStepsForm,\n    useSelect,\n    Form,\n    Input,\n    Select,\n// highlight-start\n    Create,\n    Steps,\n// highlight-end\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n    } = useStepsForm<IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n        </>,\n    ];\n\n    return (\n        <Create saveButtonProps={saveButtonProps}>\n// highlight-start\n            <Steps {...stepsProps}>\n                <Steps.Step title="First Step" />\n                <Steps.Step title="Second Step" />\n            </Steps>\n            <Form {...formProps} layout="vertical">\n                {formList[current]}\n            </Form>\n// highlight-end\n        </Create>\n    );\n};\n')),(0,a.kt)("admonition",{title:"Important",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Make sure to add as much ",(0,a.kt)("inlineCode",{parentName:"p"},"<Steps.Step>")," components as the number of steps in the ",(0,a.kt)("inlineCode",{parentName:"p"},"formList")," array.")),(0,a.kt)("br",null),(0,a.kt)("p",null,"To help users navigate between steps in the form, you can use action buttons. Your navigation buttons should use the ",(0,a.kt)("inlineCode",{parentName:"p"},"gotoStep")," function that was previously returned from the the ",(0,a.kt)("inlineCode",{parentName:"p"},"useStepsForm")," hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import {\n    useStepsForm,\n    useSelect,\n    Form,\n    Input,\n    Select,\n    Create,\n    Steps,\n// highlight-start\n    Button,\n    SaveButton,\n// highlight-end\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n        submit,\n    } = useStepsForm<IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n        </>,\n    ];\n\n    return (\n        <Create\n// highlight-start\n            actionButtons={\n                <>\n                    {current > 0 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current - 1);\n                            }}\n                        >\n                            Previous\n                        </Button>\n                    )}\n                    {current < formList.length - 1 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current + 1);\n                            }}\n                        >\n                            Next\n                        </Button>\n                    )}\n                    {current === formList.length - 1 && (\n                        <SaveButton\n                            {...saveButtonProps}\n                            style={{ marginRight: 10 }}\n                            onClick={() => submit()}\n                        />\n                    )}\n                </>\n            }\n// highlight-end\n        >\n            <Steps {...stepsProps}>\n                <Steps.Step title="First Step" />\n                <Steps.Step title="Second Step" />\n            </Steps>\n            <Form {...formProps} layout="vertical">\n                {formList[current]}\n            </Form>\n        </Create>\n    );\n};\n')),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/hooks/useStepsForm/example.gif",alt:"Steps form example"})),(0,a.kt)("h3",{id:"edit"},"Edit"),(0,a.kt)("p",null,"In this example, we'll just look at what's different from the example above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/edit.tsx"',title:'"pages/posts/edit.tsx"'},'import {\n    useStepsForm,\n    useSelect,\n    Form,\n    Input,\n    Select,\n    Steps,\n    Button,\n    SaveButton,\n// highlight-next-line\n    Edit,\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n        submit,\n    } = useStepsForm<IPost>();\n\n// highlight-start\n    const postData = queryResult?.data?.data;\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n        defaultValue: postData?.category.id,\n    });\n// highlight-end\n\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n        </>,\n    ];\n\n    return (\n// highlight-start\n        <Edit\n            actionButtons={\n                <>\n                    {current > 0 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current - 1);\n                            }}\n                        >\n                            Previous\n                        </Button>\n                    )}\n                    {current < formList.length - 1 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current + 1);\n                            }}\n                        >\n                            Next\n                        </Button>\n                    )}\n                    {current === formList.length - 1 && (\n                        <SaveButton\n                            {...saveButtonProps}\n                            style={{ marginRight: 10 }}\n                            onClick={() => submit()}\n                        />\n                    )}\n                </>\n            }\n        >\n            <Steps {...stepsProps}>\n                <Steps.Step title="First Step" />\n                <Steps.Step title="Second Step" />\n            </Steps>\n            <Form {...formProps} layout="vertical">\n                {formList[current]}\n            </Form>\n        </Edit>\n// highlight-end\n    );\n};\n')),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)(u,{module:"@pankod/refine-antd/useStepsForm",mdxType:"PropsTable"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,a.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,a.kt)("strong",{parentName:"p"},"<",(0,a.kt)("a",{parentName:"strong",href:"/docs/api-reference/core/components/refine-config"},"Refine"),">")," component. ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," will use what is passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect")," depends on which ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," used. If ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). if ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," instead, ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),".")),(0,a.kt)("h3",{id:"return-values"},"Return Values"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"stepsProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design steps props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/steps/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"StepsProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"current"),(0,a.kt)("td",{parentName:"tr",align:null},"Current step, counting from 0."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"gotoStep"),(0,a.kt)("td",{parentName:"tr",align:null},"Go to the target step"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(step: number) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#Form"},(0,a.kt)("inlineCode",{parentName:"a"},"FormProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"form"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,a.kt)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"Loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"submit"),(0,a.kt)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ disabled: boolean; onClick: () => void; loading: boolean; }"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mutationResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the mutation triggered by submitting the form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"UseMutationResult<"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"{ data: TData },"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"TError,"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"}," { resource: string; values: TVariables; },"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"}," unknown>"),"](",(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useMutation"},"https://react-query.tanstack.com/reference/useMutation"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},"Record id for ",(0,a.kt)("inlineCode",{parentName:"td"},"clone")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"create")," action"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseKey")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setId"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")," setter"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Dispatch<SetStateAction<")," ",(0,a.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined>>"))))),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Desription"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data of the query that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Values for params."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(d,{path:"form-antd-use-steps-form",mdxType:"StackblitzExample"}))}k.isMDXComponent=!0}}]);