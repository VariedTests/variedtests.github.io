"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[70093],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76654:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={id:"useTable",title:"useTable"},l=void 0,o={unversionedId:"api-reference/core/hooks/useTable",id:"api-reference/core/hooks/useTable",title:"useTable",description:"useTable allows us to fetch data according to the sorter state, the filter state and the pagination states.",source:"@site/docs/api-reference/core/hooks/useTable.md",sourceDirName:"api-reference/core/hooks",slug:"/api-reference/core/hooks/useTable",permalink:"/docs/api-reference/core/hooks/useTable",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/core/hooks/useTable.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1671163008,formattedLastUpdatedAt:"Dec 16, 2022",frontMatter:{id:"useTable",title:"useTable"},sidebar:"someSidebar",previous:{title:"useShow",permalink:"/docs/api-reference/core/hooks/show/useShow"},next:{title:"useGetLocale",permalink:"/docs/api-reference/core/hooks/translate/useGetLocale"}},s={},p=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Filtering",id:"filtering",level:2},{value:"API",id:"api",level:2},{value:"Properties",id:"properties",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values",level:3}],d=(u="PropsTable",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," allows us to fetch data according to the sorter state, the filter state and the pagination states."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you're looking for a complete table library, Refine supports two table libraries out-of-the-box."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://react-table.tanstack.com/"},"React Table")," (for Headless users) - ",(0,r.kt)("a",{parentName:"li",href:"/docs/packages/documentation/react-table"},"Documentation")," - ",(0,r.kt)("a",{parentName:"li",href:"/docs/examples/table/react-table/react-table"},"Example")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ant.design/components/table/#header"},"Ant Design Table")," (for Ant Design users) - ",(0,r.kt)("a",{parentName:"li",href:"/docs/api-reference/antd/hooks/table/useTable"},"Documentation")," - ",(0,r.kt)("a",{parentName:"li",href:"/docs/examples/table/antd/useTable"},"Example")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mui.com/x/react-data-grid/"},"Material UI Table")," (for Material UI users) - ",(0,r.kt)("a",{parentName:"li",href:"/docs/api-reference/mui/hooks/useDataGrid"},"Documentation")," - ",(0,r.kt)("a",{parentName:"li",href:"/docs/examples/table/mui/useDataGrid"},"Example")))),(0,r.kt)("p",null,"Lets say you have a endpoint that returns the following data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="https://api.fake-rest.refine.dev/posts"',title:'"https://api.fake-rest.refine.dev/posts"'},'[\n    {\n        "id": 182,\n        "title": "A aspernatur rerum molestiae.",\n        "content": "Natus molestias incidunt voluptatibus. Libero delectus facilis...",\n        "status": "published",\n        "createdAt": "2021-04-18T00:09:11.607Z"\n    },\n    {\n        "id": 989,\n        "title": "A molestiae vel voluptatem enim.",\n        "content": "Voluptas consequatur quia beatae. Ipsa est qui culpa deleniti...",\n        "status": "draft",\n        "createdAt": "2020-01-28T02:57:58.892Z"\n    }\n]\n')),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"In basic usage ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," returns the data as it comes from the endpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@pankod/core";\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n}\n\nconst { tableQueryResult } = useTable<IPost>({\n    resource: "posts",\n});\n')),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," has a pagination feature. The pagination is done by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," props. The ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," is the current page and the ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," is the number of records per page."),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," is 1 and the ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," is 10. You can change default values by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialCurrent")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"initialPageSize")," props to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," hook."),(0,r.kt)("p",null,"You can also change the ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," values by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"setCurrent")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setPageSize")," functions that are returned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," hook. Every change will trigger a new fetch."),(0,r.kt)("p",null,"If you want to disable pagination, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," property in ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," config and set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"current"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"setCurrent"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"setPageSize")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pageCount")," will return ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@pankod/core";\n\nconst { pageSize, setPageSize, current, setCurrent } = useTable({\n    resource: "posts",\n    initialCurrent: 1,\n    initialPageSize: 10,\n});\n\nconsole.log(pageSize); // 10\nconsole.log(current); // 1\n\nsetPageSize(20);\nconsole.log(pageSize); // 20\n\nsetCurrent(2);\nconsole.log(current); // 2\n')),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," has a sorter feature. The sorter is done by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorter")," state. The ",(0,r.kt)("inlineCode",{parentName:"p"},"sorter")," state is a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting"))," type that contains the field and the order of the sort. You can change the sorter state by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"setSorter")," function. Every change will trigger a new fetch."),(0,r.kt)("p",null,"Also you can add initial sorter state by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," prop and permanent sorter state by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentSorter")," prop to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," hook. Even if you change the sorter state, the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentSorter")," will be used together with the sorter state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@pankod/core";\n\nconst { sorter, setSorter } = useTable({\n    resource: "posts",\n    initialSorter: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n    permanentSorter: [\n        {\n            field: "id",\n            order: "desc",\n        },\n    ],\n});\n\nconsole.log(sorter); // [{ field: "id", order: "desc" }, { field: "title", order: "asc" }]\n\nsetSorter([\n    {\n        field: "createdAt",\n        order: "desc",\n    },\n]);\n\nconsole.log(sorter); // [{ field: "createdAt", order: "desc" }, { field: "id", order: "desc" }]\n')),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," has a filter feature. The filter is done by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," state. The ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," state is a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters"))," type that contains the field, the operator and the value of the filter. You can change the filter state by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"setFilters")," function. Every change will trigger a new fetch."),(0,r.kt)("p",null,"Also you can add initial filter state by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," prop and permanent filter state by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," prop to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," hook. Even if you change the filter state, the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," will be used together with the filter state."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setFilters")," function can work in two different behaviors; ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")," (default) and ",(0,r.kt)("inlineCode",{parentName:"p"},"replace"),". You can set the behavior by passing it as the 2nd parameter."),(0,r.kt)("p",null,"You can also call ",(0,r.kt)("inlineCode",{parentName:"p"},"setFilters")," with a setter function."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")," behavior and want to remove one of the filters; you should set the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),". For ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," filters, you should set the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to an empty array ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," to remove the filter.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@pankod/core";\n\nconst { filters, setFilters } = useTable({\n    resource: "posts",\n    initialFilter: [\n        {\n            field: "title",\n            operator: "contains",\n            value: "rerum",\n        },\n    ],\n    permanentFilter: [\n        {\n            field: "status",\n            operator: "equals",\n            value: "published",\n        },\n    ],\n});\n\nconsole.log(filters); // [{ field: "title", operator: "contains", value: "rerum" }, { field: "status", operator: "equals", value: "published" }]\n\nsetFilter([\n    {\n        field: "title",\n        operator: "contains",\n        value: "F",\n    },\n]);\n\nconsole.log(filters); // [{ field: "title", operator: "contains", value: "F" }, { field: "status", operator: "equals", value: "published" }]\n\nsetFilter([\n    {\n        field: "author",\n        operator: "contains",\n        value: "Foo",\n    },\n    "merge", // default\n]);\n\nconsole.log(filters);\n/*\n[\n    { field: "title", operator: "contains", value: "F" },\n    { field: "author", operator: "contains", value: "Foo" },\n    { field: "status", operator: "equals", value: "published" }\n]\n*/\n\nsetFilter([\n    {\n        field: "author",\n        operator: "ne",\n        value: "Foo",\n    },\n    "replace",\n]);\n\nconsole.log(filters);\n/*\n[\n    { field: "author", operator: "ne", value: "Foo" },\n    { field: "status", operator: "equals", value: "published" }\n]\n*/\n\nsetFilters((prev) => prev.filter((filter) => filter.field !== "author"));\n\nconsole.log(filters);\n/*\n[\n    { field: "status", operator: "equals", value: "published" }\n]\n*/\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)(d,{module:"@pankod/refine-core/useTable","successNotification-default":'"Successfully created `resource`" or "Successfully updated `resource`"',"errorNotification-default":'"There was an error creating resource (status code: `statusCode`)" or "Error when updating resource (status code:statusCode)"',mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Desription"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data of the query. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))))),(0,r.kt)("h3",{id:"return-values"},"Return values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableQueryResult"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the ",(0,r.kt)("inlineCode",{parentName:"td"},"react-query"),"'s ",(0,r.kt)("inlineCode",{parentName:"td"},"useQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," data: TData[];"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," total: number; },"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," TError>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"current"),(0,r.kt)("td",{parentName:"tr",align:null},"Current page index state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"totalPage"),(0,r.kt)("td",{parentName:"tr",align:null},"Total page count (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setCurrent"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the current (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Current pageSize state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setPageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the pageSize. (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sorter"),(0,r.kt)("td",{parentName:"tr",align:null},"Current sorting state s"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setSorter"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorter state."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(sorter: CrudSorting) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters"),(0,r.kt)("td",{parentName:"tr",align:null},"Current filters state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setFilters"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new filter state"),(0,r.kt)("td",{parentName:"tr",align:null},"- ",(0,r.kt)("inlineCode",{parentName:"td"},'(filters: CrudFilters, behavior?: "merge" \\| "replace" = "merge") => void')," ",(0,r.kt)("br",null)," - ",(0,r.kt)("inlineCode",{parentName:"td"},"(setter: (previousFilters: CrudFilters) => CrudFilters) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"createLinkForSyncWithLocation"),(0,r.kt)("td",{parentName:"tr",align:null},"A function create accessible links for syncWithLocation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(params: "),(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#syncwithlocationparams"},"SyncWithLocationParams"),(0,r.kt)("inlineCode",{parentName:"td"},") => string;"))))),(0,r.kt)("br",null))}m.isMDXComponent=!0}}]);