"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[30184],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"useForm",title:"useForm"},i=void 0,l={unversionedId:"packages/documentation/react-hook-form/useForm",id:"packages/documentation/react-hook-form/useForm",title:"useForm",description:"refine offers a React Hook Form adapter(@pankod/refine-react-hook-form) that allows you to use the React Hook Form library with refine. Thus, you can manage your forms in headless way.",source:"@site/docs/packages/documentation/react-hook-form/useForm.md",sourceDirName:"packages/documentation/react-hook-form",slug:"/packages/documentation/react-hook-form/useForm",permalink:"/docs/packages/documentation/react-hook-form/useForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/packages/documentation/react-hook-form/useForm.md",tags:[],version:"current",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1671163008,formattedLastUpdatedAt:"Dec 16, 2022",frontMatter:{id:"useForm",title:"useForm"},sidebar:"someSidebar",previous:{title:"React Table",permalink:"/docs/packages/documentation/react-table"},next:{title:"useModalForm",permalink:"/docs/packages/documentation/react-hook-form/useModalForm"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Create resource pages",id:"create-resource-pages",level:3},{value:"Create Form",id:"create-form",level:3},{value:"Edit Form",id:"edit-form",level:3},{value:"Multipart File Upload",id:"multipart-file-upload",level:3},{value:"API",id:"api",level:2},{value:"Properties",id:"properties",level:3},{value:"Return values",id:"return-values",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Example",id:"example",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},d=c("PropsTable"),m=c("StackblitzExample"),u={toc:p};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," offers a ",(0,a.kt)("a",{parentName:"p",href:"https://react-hook-form.com"},"React Hook Form")," adapter(",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/react-hook-form"},"@pankod/refine-react-hook-form"),") that allows you to use the React Hook Form library with ",(0,a.kt)("strong",{parentName:"p"},"refine"),". Thus, you can manage your forms in headless way."),(0,a.kt)("p",null,"All of React Hook Form's features are supported and you can use all of the React Hook Form's examples with no changes just copy and paste them into your project."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Install the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/react-hook-form"},(0,a.kt)("inlineCode",{parentName:"a"},"@pankod/refine-react-hook-form"))," library."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-react-hook-form\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In the following example, we will step-by-step create an example of a headless form with React Hook Form capabilities."),(0,a.kt)("h3",{id:"create-resource-pages"},"Create resource pages"),(0,a.kt)("p",null,"We simply create a ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostCreate>"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," components and pass to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," component as a resource."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/list.tsx"',title:'"src/posts/list.tsx"'},"export const PostList: React.FC = () => {\n    return <></>;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/create.tsx"',title:'"src/posts/create.tsx"'},"export const PostCreate: React.FC = () => {\n    return <></>;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/edit.tsx"',title:'"src/posts/edit.tsx"'},"export const PostEdit: React.FC = () => {\n    return <></>;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n//highlight-next-line\nimport { PostList, PostCreate, PostEdit } from "pages/posts";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            routerProvider={routerProvider}\n            //highlight-start\n            resources={[\n                {\n                    name: "posts",\n                    list: PostList,\n                    create: PostCreate,\n                    edit: PostEdit,\n                },\n            ]}\n            //highlight-end\n        />\n    );\n};\n\nexport default App;\n')),(0,a.kt)("p",null,"Let's develop the ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," component for directing to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostCreate>")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostEdit>")," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/list.tsx"',title:'"src/posts/list.tsx"'},'import { useTable, useNavigation } from "@pankod/refine-core";\n\nimport { IPost } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableQueryResult } = useTable<IPost>();\n    const { edit, create } = useNavigation();\n\n    return (\n        <div>\n            <button onClick={() => create("posts")}>Create Post</button>\n            <table>\n                <thead>\n                    <td>ID</td>\n                    <td>Title</td>\n                    <td>Actions</td>\n                </thead>\n                <tbody>\n                    {tableQueryResult.data?.data.map((post) => (\n                        <tr key={post.id}>\n                            <td>{post.id}</td>\n                            <td>{post.title}</td>\n                            <td>\n                                <button onClick={() => edit("posts", post.id)}>\n                                    Edit\n                                </button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n')),(0,a.kt)("div",{class:"img-container",style:{"max-width":"700px"}},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/packages/react-hook-form/list-page.png",alt:"List Page"})),(0,a.kt)("h3",{id:"create-form"},"Create Form"),(0,a.kt)("p",null,"Firts, we need to import the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook from the ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-hook-form")," library. Then we create a basic example of ",(0,a.kt)("inlineCode",{parentName:"p"},"post")," a create form. All we have to do is to pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"onFinish")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"handleSubmit"),"."),(0,a.kt)("p",null,"We also use ",(0,a.kt)("inlineCode",{parentName:"p"},"useSelect")," to fetch category options."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useSelect"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useSelect")," documentation for detailed information. ","\u2192")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/create.tsx"',title:'"src/posts/create.tsx"'},'// highlight-next-line\nimport { useForm } from "@pankod/refine-react-hook-form";\nimport { useSelect } from "@pankod/refine-core";\n\nexport const PostCreate: React.FC = () => {\n    //highlight-start\n    const {\n        refineCore: { onFinish, formLoading },\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm();\n    //highlight-end\n\n    const { options } = useSelect({\n        resource: "categories",\n    });\n\n    return (\n        // highlight-next-line\n        <form onSubmit={handleSubmit(onFinish)}>\n            <label>Title: </label>\n            <input {...register("title", { required: true })} />\n            {errors.title && <span>This field is required</span>}\n            <br />\n            <label>Status: </label>\n            <select {...register("status")}>\n                <option value="published">published</option>\n                <option value="draft">draft</option>\n                <option value="rejected">rejected</option>\n            </select>\n            <br />\n            <label>Category: </label>\n            <select\n                defaultValue={""}\n                {...register("category.id", { required: true })}\n            >\n                <option value={""} disabled>\n                    Please select\n                </option>\n                {options?.map((category) => (\n                    <option key={category.value} value={category.value}>\n                        {category.label}\n                    </option>\n                ))}\n            </select>\n            {errors.category && <span>This field is required</span>}\n            <br />\n            <label>Content: </label>\n            <br />\n            <textarea\n                {...register("content", { required: true })}\n                rows={10}\n                cols={50}\n            />\n            {errors.content && <span>This field is required</span>}\n            <br />\n            <input type="submit" value="Submit" />\n            {formLoading && <p>Loading</p>}\n        </form>\n    );\n};\n')),(0,a.kt)("div",{class:"img-container",style:{"max-width":"500px"}},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/packages/react-hook-form/create-form.gif",alt:"Create Form"})),(0,a.kt)("h3",{id:"edit-form"},"Edit Form"),(0,a.kt)("p",null,"Edit form is very similar to create form. ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-hook-form")," sets the default values for the form fields according to the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the route and fetch the data from the server. By default, it uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," from the route. It can be changed with the ",(0,a.kt)("inlineCode",{parentName:"p"},"setId")," function or ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," property."),(0,a.kt)("p",null,"However, we need to pass ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultValues")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"useSelect")," hook to make sure that the category id from data is in the options. Otherwise, the category will not match the existing options. Since the options are async, we need to reset the relavent field every time the options are changed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/edit.tsx"',title:'"src/posts/edit.tsx"'},'import { useEffect } from "react";\nimport { useForm } from "@pankod/refine-react-hook-form";\nimport { useSelect } from "@pankod/refine-core";\n\nexport const PostEdit: React.FC = () => {\n    const {\n        refineCore: { onFinish, formLoading, queryResult },\n        register,\n        handleSubmit,\n        resetField,\n        formState: { errors },\n    } = useForm();\n\n    // highlight-start\n    const { options } = useSelect({\n        resource: "categories",\n        defaultValue: queryResult?.data?.data.category.id,\n    });\n    // highlight-end\n\n    // highlight-start\n    useEffect(() => {\n        resetField("category.id");\n    }, [options]);\n    // highlight-end\n\n    return (\n        <form onSubmit={handleSubmit(onFinish)}>\n            <label>Title: </label>\n            <input {...register("title", { required: true })} />\n            {errors.title && <span>This field is required</span>}\n            <br />\n            <label>Status: </label>\n            <select {...register("status")}>\n                <option value="published">published</option>\n                <option value="draft">draft</option>\n                <option value="rejected">rejected</option>\n            </select>\n            <br />\n            <label>Category: </label>\n            <select\n                {...register("category.id", {\n                    required: true,\n                })}\n                defaultValue={queryResult?.data?.data.category.id}\n            >\n                {options?.map((category) => (\n                    <option key={category.value} value={category.value}>\n                        {category.label}\n                    </option>\n                ))}\n            </select>\n            {errors.category && <span>This field is required</span>}\n            <br />\n            <label>Content: </label>\n            <br />\n            <textarea\n                {...register("content", { required: true })}\n                rows={10}\n                cols={50}\n            />\n            {errors.content && <span>This field is required</span>}\n            <br />\n            <input type="submit" value="Submit" />\n            {formLoading && <p>Loading</p>}\n        </form>\n    );\n};\n')),(0,a.kt)("div",{class:"img-container",style:{"max-width":"500px"}},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/packages/react-hook-form/edit-form.gif",alt:"Edit Form"})),(0,a.kt)("h3",{id:"multipart-file-upload"},"Multipart File Upload"),(0,a.kt)("p",null,"You can submit files or images to your server in multipart/form-data format using the refine-react-hook-form adapter. First of all, let's create a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"onSubmitFile")," to convert the file from the input to formData type. After placing the selected file in formData, let's upload it to our server. When your form is submitted, the ",(0,a.kt)("strong",{parentName:"p"},"refine")," ",(0,a.kt)("inlineCode",{parentName:"p"},"onFinish")," method automatically saves your file and other data on your server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/create.tsx"',title:'"src/posts/create.tsx"'},'import { useState } from "react";\nimport { useForm } from "@pankod/refine-react-hook-form";\nimport { useSelect, useApiUrl } from "@pankod/refine-core";\n\nimport axios from "axios";\n\nexport const PostCreate: React.FC = () => {\n    const [isUploading, setIsUploading] = useState<boolean>(false);\n\n    const {\n        refineCore: { onFinish, formLoading },\n        register,\n        handleSubmit,\n        formState: { errors },\n        setValue,\n    } = useForm();\n\n    //highlight-next-line\n    const apiURL = useApiUrl();\n\n    const { options } = useSelect({\n        resource: "categories",\n    });\n\n    //highlight-start\n    const onSubmitFile = async () => {\n        setIsUploading(true);\n        const inputFile = document.getElementById(\n            "fileInput",\n        ) as HTMLInputElement;\n\n        const formData = new FormData();\n        formData.append("file", inputFile?.files?.item(0) as File);\n\n        const res = await axios.post<{ url: string }>(\n            `${apiURL}/media/upload`,\n            formData,\n            {\n                withCredentials: false,\n                headers: {\n                    "Access-Control-Allow-Origin": "*",\n                },\n            },\n        );\n\n        setValue("thumbnail", res.data.url);\n        setIsUploading(false);\n    };\n    //highlight-end\n\n    return (\n        <form onSubmit={handleSubmit(onFinish)}>\n            <label>Title: </label>\n            <input {...register("title", { required: true })} />\n            {errors.title && <span>This field is required</span>}\n            <br />\n            <label>Status: </label>\n            <select {...register("status")}>\n                <option value="published">published</option>\n                <option value="draft">draft</option>\n                <option value="rejected">rejected</option>\n            </select>\n            <br />\n            <label>Category: </label>\n            <select\n                defaultValue={""}\n                {...register("category.id", { required: true })}\n            >\n                <option value={""} disabled>\n                    Please select\n                </option>\n                {options?.map((category) => (\n                    <option key={category.value} value={category.value}>\n                        {category.label}\n                    </option>\n                ))}\n            </select>\n            {errors.category && <span>This field is required</span>}\n            <br />\n            <label>Content: </label>\n            <br />\n            <textarea\n                {...register("content", { required: true })}\n                rows={10}\n                cols={50}\n            />\n            {errors.content && <span>This field is required</span>}\n            <br />\n            <br />\n            //highlight-start\n            <label>Image: </label>\n            <input id="fileInput" type="file" onChange={onSubmitFile} />\n            <input\n                type="hidden"\n                {...register("thumbnail", { required: true })}\n            />\n            {errors.thumbnail && <span>This field is required</span>}\n            //highlight-end\n            <br />\n            <br />\n            <input type="submit" disabled={isUploading} value="Submit" />\n            {formLoading && <p>Loading</p>}\n        </form>\n    );\n};\n')),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/packages/react-hook-form/upload.gif",alt:"Multipart File Upload"})),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)(d,{module:"@pankod/refine-react-hook-form/useForm",mdxType:"PropsTable"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"*"),": These properties have default values in ",(0,a.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on the ",(0,a.kt)("strong",{parentName:"p"},"<",(0,a.kt)("a",{parentName:"strong",href:"/docs/api-reference/core/components/refine-config"},"Refine"),">")," component.")),(0,a.kt)("admonition",{title:"External Props",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"It also accepts all props of ",(0,a.kt)("a",{parentName:"p",href:"https://react-hook-form.com/api/useform"},"useForm")," hook available in the  ",(0,a.kt)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form"),".")),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For example, we can define the ",(0,a.kt)("inlineCode",{parentName:"p"},"refineCoreProps")," property in the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook as:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@pankod/refine-react-hook-form";\n\nconst { ... } = useForm({\n    ...,\n    refineCoreProps: {\n        resource: "posts",\n        redirect: false,\n        // You can define all properties provided by refine useForm\n    },\n});\n')),(0,a.kt)("h3",{id:"return-values"},"Return values"),(0,a.kt)("p",null,"Returns all the properties returned by ",(0,a.kt)("a",{parentName:"p",href:"https://react-hook-form.com"},"React Hook Form")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook. Also, we added the following return values:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"refineCore"),": Returns all values returned by ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm")),". You can see all of them in ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useForm##return-values"},"here"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For example, we can access the ",(0,a.kt)("inlineCode",{parentName:"p"},"refineCore")," return value in the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook as:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@pankod/refine-react-hook-form";\n\nconst {\n    refineCore: { queryResult, ... },\n} = useForm({ ... });\n')),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ disabled: boolean; onClick: (e: React.BaseSyntheticEvent) => void; }"))))),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Desription"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data of the query. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Field Values for mutation function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TContext"),(0,a.kt)("td",{parentName:"tr",align:null},"Second generic type of the ",(0,a.kt)("inlineCode",{parentName:"td"},"useForm")," of the React Hook Form."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(m,{path:"form-react-hook-form-use-form",mdxType:"StackblitzExample"}))}f.isMDXComponent=!0}}]);