"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[20582],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41473:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o={id:"strapi-v4",title:"Strapi-v4"},i=void 0,l={unversionedId:"guides-and-concepts/data-provider/strapi-v4",id:"version-2.xx.xx/guides-and-concepts/data-provider/strapi-v4",title:"Strapi-v4",description:"refine supports the features that come with Strapi-v4.",source:"@site/versioned_docs/version-2.xx.xx/guides-and-concepts/data-provider/strapi-v4.md",sourceDirName:"guides-and-concepts/data-provider",slug:"/guides-and-concepts/data-provider/strapi-v4",permalink:"/docs/2.xx.xx/guides-and-concepts/data-provider/strapi-v4",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/versioned_docs/version-2.xx.xx/guides-and-concepts/data-provider/strapi-v4.md",tags:[],version:"2.xx.xx",lastUpdatedBy:"Daniel Monettelli",lastUpdatedAt:1673291592,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{id:"strapi-v4",title:"Strapi-v4"},sidebar:"version-2.xx.xx/someSidebar",previous:{title:"GraphQL",permalink:"/docs/2.xx.xx/guides-and-concepts/data-provider/graphql"},next:{title:"Appwrite",permalink:"/docs/2.xx.xx/guides-and-concepts/data-provider/appwrite"}},s={},d=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"API Parameters",id:"api-parameters",level:2},{value:"Create Collections",id:"create-collections",level:3},{value:"Fields Selection",id:"fields-selection",level:3},{value:"Relations Population",id:"relations-population",level:3},{value:"Publication State",id:"publication-state",level:3},{value:"Locale",id:"locale",level:3},{value:"Live Codesandbox Example",id:"live-codesandbox-example",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," supports the features that come with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"},"Strapi-v4"),"."),(0,r.kt)("p",null,"A few of the Strapi-v4 API features are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fields Selection"),(0,r.kt)("li",{parentName:"ul"},"Relations Population"),(0,r.kt)("li",{parentName:"ul"},"Publication State"),(0,r.kt)("li",{parentName:"ul"},"Locale")),(0,r.kt)("p",null,"You can use these API features with ",(0,r.kt)("strong",{parentName:"p"},"refine"),". Thanks to ",(0,r.kt)("inlineCode",{parentName:"p"},"MetaDataQuery"),", you can simply send queries using these API parameters."),(0,r.kt)("p",null,"Hooks and components that support ",(0,r.kt)("inlineCode",{parentName:"p"},"MetaDataQuery"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Supported data hooks"),(0,r.kt)("th",{parentName:"tr",align:null},"Supported other hooks"),(0,r.kt)("th",{parentName:"tr",align:null},"Supported components"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useUpdate"},(0,r.kt)("inlineCode",{parentName:"a"},"useUpdate")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/form/useForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/components/buttons/delete-button"},(0,r.kt)("inlineCode",{parentName:"a"},"DeleteButton")," ","\u2192"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useUpdateMany"},(0,r.kt)("inlineCode",{parentName:"a"},"useUpdateMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/form/useModalForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useModalForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/components/buttons/refresh-button"},(0,r.kt)("inlineCode",{parentName:"a"},"RefreshButton")," ","\u2192"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useDelete"},(0,r.kt)("inlineCode",{parentName:"a"},"useDelete")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/form/useDrawerForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useDrawerForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useDeleteMany"},(0,r.kt)("inlineCode",{parentName:"a"},"useDeleteMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/form/useStepsForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useStepsForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useCreate"},(0,r.kt)("inlineCode",{parentName:"a"},"useCreate")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/table/useTable"},(0,r.kt)("inlineCode",{parentName:"a"},"useTable")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useCreateMany"},(0,r.kt)("inlineCode",{parentName:"a"},"useCreateMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/table/useEditableTable"},(0,r.kt)("inlineCode",{parentName:"a"},"useEditableTable")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useList"},(0,r.kt)("inlineCode",{parentName:"a"},"useList")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/show/useSimpleList"},(0,r.kt)("inlineCode",{parentName:"a"},"useSimpleList")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useOne"},(0,r.kt)("inlineCode",{parentName:"a"},"useOne")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/show/useShow"},(0,r.kt)("inlineCode",{parentName:"a"},"useShow")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useMany"},(0,r.kt)("inlineCode",{parentName:"a"},"useMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/import-export/useExport"},(0,r.kt)("inlineCode",{parentName:"a"},"useExport")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/data/useCustom"},(0,r.kt)("inlineCode",{parentName:"a"},"useCustom")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/field/useCheckboxGroup"},(0,r.kt)("inlineCode",{parentName:"a"},"useCheckboxGroup")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/field/useSelect"},(0,r.kt)("inlineCode",{parentName:"a"},"useSelect")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/2.xx.xx/api-references/hooks/field/useRadioGroup"},(0,r.kt)("inlineCode",{parentName:"a"},"useRadioGroup")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can handle features such as Sorting, Pagination and Filters with Dataprovider. There is no need to use MetaDataQuery.")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-strapi-v4\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine, AuthProvider } from "@pankod/refine";\n//highlight-start\nimport { DataProvider } from "@pankod/refine-strapi-v4";\n//highlight-end\nimport routerProvider from "@pankod/refine-react-router";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            //highlight-start\n            dataProvider={DataProvider("API_URL")}\n            //highlight-end\n            routerProvider={routerProvider}\n        />\n    );\n};\n')),(0,r.kt)("h2",{id:"api-parameters"},"API Parameters"),(0,r.kt)("p",null,"Let's examine how API parameters that come with Strapi-v4 are used with ",(0,r.kt)("strong",{parentName:"p"},"refine")," metadata. Then, let's see how it is used in the application."),(0,r.kt)("h3",{id:"create-collections"},"Create Collections"),(0,r.kt)("p",null,"We created two collections on ",(0,r.kt)("a",{parentName:"p",href:"https://strapi.io/"},"Strapi")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," and added a relation between them. For detailed information on how to create a collection, you can check ",(0,r.kt)("a",{parentName:"p",href:"https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="posts"',title:'"posts"'},'{\n    id: 3,\n    attributes: {\n        title: "Incidunt tempora ut voluptas est",\n        content: "Soluta voluptatibus rem assumenda id autem possimus dicta molestiae qui. Tenetur corporis sed aliquam et voluptatibus expedita in sunt.",\n        createdAt: "2021-12-15T14:22:52.919Z",\n        updatedAt: "2021-12-15T14:23:07.542Z",\n        publishedAt: "2021-12-15T14:22:54.126Z",\n        locale: "en"\n    }\n}\n')),(0,r.kt)("h3",{id:"fields-selection"},"Fields Selection"),(0,r.kt)("p",null,"To select only some fields, we must specify this fields with metadata."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#fields-selection"},"Refer to the Fields Selection documentation for detailed information. \u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get only id and title of all posts"',title:!0,only:!0,id:!0,and:!0,of:!0,all:!0,'posts"':!0},'const { tableProps } = useTable<IPost>({\n    metaData: {\n        fields: ["id", "title"]\n    },\n}); \n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all fields of all posts(id, title, category, content ...)"',title:'"Get',all:!0,fields:!0,of:!0,"posts(id,":!0,"title,":!0,"category,":!0,content:!0,'...)"':!0},'const { tableProps } = useTable<IPost>({\n    metaData: {\n        fields: "*"\n    },\n});    \n')),(0,r.kt)("p",null,"When sending the request, we can specify which fields will come, so we send ",(0,r.kt)("inlineCode",{parentName:"p"},"fields")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"metaData")," to hooks that we will fetch data from. In this way, you can perform the queries of only the fields you want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PostList.tsx"',title:'"PostList.tsx"'},'import { useState } from "react";\nimport {\n    List,\n    Table,\n    useTable,\n    IResourceComponentsProps,\n    getDefaultSortOrder,\n    FilterDropdown,\n    Select,\n    useSelect,\n    Space,\n    EditButton,\n    DeleteButton,\n} from "@pankod/refine";\n\nimport { IPost } from "interfaces";\n\nimport { API_URL } from "../../constants";\n\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\n    const { tableProps, sorter } = useTable<IPost>({\n        metaData: {\n            // highlight-start\n            fields: ["id", "title"],\n            // highlight-end\n        },\n    });\n\n    return (\n        <List>\n            <Table\n                {...tableProps}\n                rowKey="id"\n                pagination={{\n                    ...tableProps.pagination,\n                    showSizeChanger: true,\n                }}\n            >\n                <Table.Column\n                    dataIndex="id"\n                    key="id"\n                    title="ID"\n                    defaultSortOrder={getDefaultSortOrder("id", sorter)}\n                    sorter={{ multiple: 3 }}\n                />\n                <Table.Column\n                    dataIndex="title"\n                    key="title"\n                    title="Title"\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                    sorter={{ multiple: 2 }}\n                />\n\n                <Table.Column<{ id: string }>\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_, record) => (\n                        <Space>\n                            <EditButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                        </Space>\n                    )}\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/selection.png",alt:"Fields Selection Metadata"})),(0,r.kt)("h3",{id:"relations-population"},"Relations Population"),(0,r.kt)("p",null,"By default, relations are not populated when fetching entries."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"populate")," parameter is used to define which fields will be populated."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#relations-population"},"Refer to the Relations Population documentation for detailed information. \u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all the posts and populate the selected relations"',title:'"Get',all:!0,the:!0,posts:!0,and:!0,populate:!0,selected:!0,'relations"':!0},'const { tableProps } = useTable<IPost>({\n    metaData: {\n        populate: ["category", "cover"]\n    },\n}); \n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all posts and populate all their first-level relations"',title:'"Get',all:!0,posts:!0,and:!0,populate:!0,their:!0,"first-level":!0,'relations"':!0},'const { tableProps } = useTable<IPost>({\n    metaData: {\n        populate: "*"\n    },\n});  \n')),(0,r.kt)("p",null,"In order to pull the ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," related to the posts, we can now show the categories in our list by defining the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," ",(0,r.kt)("inlineCode",{parentName:"p"},"populate")," parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PostList.tsx"',title:'"PostList.tsx"'},'import { useState } from "react";\nimport {\n    List,\n    Table,\n    useTable,\n    IResourceComponentsProps,\n    getDefaultSortOrder,\n    FilterDropdown,\n    Select,\n    useSelect,\n    DateField,\n    Space,\n    EditButton,\n    DeleteButton,\n    ImageField,\n    Form,\n    Radio,\n    Tag,\n} from "@pankod/refine";\n\nimport { IPost } from "interfaces";\n\nimport { API_URL } from "../../constants";\n\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\n    const [locale, setLocale] = useState("en");\n    const [publicationState, setPublicationState] = useState("live");\n\n    const { tableProps, sorter } = useTable<IPost>({\n        metaData: {\n            fields: ["id", "title"],\n            // highlight-start\n            populate: ["category"],\n            // highlight-end\n        },\n    });\n\n    const { selectProps } = useSelect({\n        resource: "categories",\n        optionLabel: "title",\n        optionValue: "id",\n    });\n\n    return (\n        <List>\n            <Table\n                {...tableProps}\n                rowKey="id"\n                pagination={{\n                    ...tableProps.pagination,\n                    showSizeChanger: true,\n                }}\n            >\n                <Table.Column\n                    dataIndex="id"\n                    key="id"\n                    title="ID"\n                    defaultSortOrder={getDefaultSortOrder("id", sorter)}\n                    sorter={{ multiple: 3 }}\n                />\n                <Table.Column\n                    dataIndex="title"\n                    key="title"\n                    title="Title"\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                    sorter={{ multiple: 2 }}\n                />\n                //highlight-start\n                <Table.Column\n                    key="[category][id]"\n                    dataIndex={["category", "data", "attributes", "title"]}\n                    title="Category"\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                placeholder="Select Category"\n                                {...selectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                //highlight-end\n                <Table.Column<{ id: string }>\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_, record) => (\n                        <Space>\n                            <EditButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                        </Space>\n                    )}\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/category.png",alt:"category"})),(0,r.kt)("h3",{id:"publication-state"},"Publication State"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The Draft & Publish feature should be enabled on Strapi.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#publication-state"},"Refer to the Publication State documentation for detailed information. \u2192")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"live"),": returns only published entries"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"preview"),": returns draft and published entries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable<IPost>({\n    metaData: {\n        publicationState: "preview"\n    },\n});\n')),(0,r.kt)("p",null,"We can list the posts separately according to the ",(0,r.kt)("inlineCode",{parentName:"p"},"published")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"draft")," information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PostList"',title:'"PostList"'},'import { useState } from "react";\nimport {\n    List,\n    Table,\n    useTable,\n    IResourceComponentsProps,\n    getDefaultSortOrder,\n    FilterDropdown,\n    Select,\n    useSelect,\n    DateField,\n    Space,\n    EditButton,\n    DeleteButton,\n    ImageField,\n    Form,\n    Radio,\n    Tag,\n} from "@pankod/refine";\n\nimport { IPost } from "interfaces";\n\nimport { API_URL } from "../../constants";\n\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\n    // highlight-start\n    const [publicationState, setPublicationState] = useState("live");\n    //highlight-end\n\n    const { tableProps, sorter } = useTable<IPost>({\n        metaData: {\n            fields: ["id", "title"],\n            populate: ["category"],\n            // highlight-start\n            publicationState,\n            // highlight-end\n        },\n    });\n\n    const { selectProps } = useSelect({\n        resource: "categories",\n        optionLabel: "title",\n        optionValue: "id",\n    });\n\n    return (\n        <List>\n            <Form\n                layout="inline"\n                //highlight-start\n                initialValues={{\n                    publicationState,\n                }}\n                //highlight-end\n            >\n               //highlight-start\n                <Form.Item label="Publication State" name="publicationState">\n                    <Radio.Group\n                        onChange={(e) => setPublicationState(e.target.value)}\n                    >\n                        <Radio.Button value="live">Published</Radio.Button>\n                        <Radio.Button value="preview">\n                            Draft and Published\n                        </Radio.Button>\n                    </Radio.Group>\n                </Form.Item>\n                //highlight-end\n            </Form>\n            <br />\n            <Table\n                {...tableProps}\n                rowKey="id"\n                pagination={{\n                    ...tableProps.pagination,\n                    showSizeChanger: true,\n                }}\n            >\n                <Table.Column\n                    dataIndex="id"\n                    key="id"\n                    title="ID"\n                    defaultSortOrder={getDefaultSortOrder("id", sorter)}\n                    sorter={{ multiple: 3 }}\n                />\n                <Table.Column\n                    dataIndex="title"\n                    key="title"\n                    title="Title"\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                    sorter={{ multiple: 2 }}\n                />\n                <Table.Column\n                    key="[category][id]"\n                    dataIndex={["category", "data", "attributes", "title"]}\n                    title="Category"\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                placeholder="Select Category"\n                                {...selectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column\n                    dataIndex="publishedAt"\n                    title="Status"\n                    render={(value) => {\n                        return (\n                            <Tag color={value ? "green" : "blue"}>\n                                {value ? "Published" : "Draft"}\n                            </Tag>\n                        );\n                    }}\n                />\n                <Table.Column<{ id: string }>\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_, record) => (\n                        <Space>\n                            <EditButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                        </Space>\n                    )}\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/publication.gif",alt:"publication"})),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"locale"},"Locale"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To fetch content for a locale, make sure it has been already ",(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/user-docs/latest/settings/managing-global-settings.html#configuring-internationalization-locales"},"added to Strapi in the admin panel"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#locale"},"Refer to the Locale documentation for detailed information. \u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable<IPost>({\n    metaData: {\n        locale: "de"\n    },\n});\n')),(0,r.kt)("p",null,"With the local parameter feature, we can fetch posts and categories created according to different languages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\nimport {\n    List,\n    Table,\n    useTable,\n    IResourceComponentsProps,\n    getDefaultSortOrder,\n    FilterDropdown,\n    Select,\n    useSelect,\n    Space,\n    EditButton,\n    DeleteButton,\n    Form,\n    Radio,\n    Tag,\n} from "@pankod/refine";\n\nimport { IPost } from "interfaces";\n\nimport { API_URL } from "../../constants";\n\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\n    //highlight-start\n    const [locale, setLocale] = useState("en");\n    //highlight-end\n    const [publicationState, setPublicationState] = useState("live");\n\n    const { tableProps, sorter } = useTable<IPost>({\n        metaData: {\n            populate: ["category", "cover"],\n            //highlight-start\n            locale,\n            //highlight-end\n            publicationState,\n        },\n    });\n\n    const { selectProps } = useSelect({\n        resource: "categories",\n        optionLabel: "title",\n        optionValue: "id",\n        //highlight-start\n        metaData: { locale },\n        //highlight-end\n    });\n\n    return (\n        <List>\n            <Form\n                layout="inline"\n                //highlight-start\n                initialValues={{\n                    locale,\n                    publicationState,\n                }}\n                //highlight-end\n            >\n                //highlight-start\n                <Form.Item label="Locale" name="locale">\n                    <Radio.Group onChange={(e) => setLocale(e.target.value)}>\n                        <Radio.Button value="en">English</Radio.Button>\n                        <Radio.Button value="de">Deutsch</Radio.Button>\n                    </Radio.Group>\n                </Form.Item>\n                //highlight-end\n                <Form.Item label="Publication State" name="publicationState">\n                    <Radio.Group\n                        onChange={(e) => setPublicationState(e.target.value)}\n                    >\n                        <Radio.Button value="live">Published</Radio.Button>\n                        <Radio.Button value="preview">\n                            Draft and Published\n                        </Radio.Button>\n                    </Radio.Group>\n                </Form.Item>\n            </Form>\n            <br />\n            <Table\n                {...tableProps}\n                rowKey="id"\n                pagination={{\n                    ...tableProps.pagination,\n                    showSizeChanger: true,\n                }}\n            >\n                <Table.Column\n                    dataIndex="id"\n                    key="id"\n                    title="ID"\n                    defaultSortOrder={getDefaultSortOrder("id", sorter)}\n                    sorter={{ multiple: 3 }}\n                />\n                <Table.Column\n                    dataIndex="title"\n                    key="title"\n                    title="Title"\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                    sorter={{ multiple: 2 }}\n                />\n                <Table.Column\n                    key="[category][id]"\n                    dataIndex={["category", "data", "attributes", "title"]}\n                    title="Category"\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                placeholder="Select Category"\n                                {...selectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column\n                    dataIndex="publishedAt"\n                    title="Status"\n                    render={(value) => {\n                        return (\n                            <Tag color={value ? "green" : "blue"}>\n                                {value ? "Published" : "Draft"}\n                            </Tag>\n                        );\n                    }}\n                />\n                <Table.Column<{ id: string }>\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_, record) => (\n                        <Space>\n                            <EditButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                            <DeleteButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                        </Space>\n                    )}\n                />\n            </Table>\n        </List>\n    );\n};\n')),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/locale.gif",alt:"locale"})),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When creating and editing posts you can use these API parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"metaData"),". You can look how it is used in EditList and CreateList from Codesandbox."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n    metaData: { publicationState: "preview" },\n});\n')),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="EditList.tsx"',title:'"EditList.tsx"'},'const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n    metaData: { populate: ["category", "cover"] },\n});\n')),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CreateList.tsx"',title:'"CreateList.tsx"'},'const { selectProps } = useSelect({\n    metaData: { locale: "en" },\n});\n'))),(0,r.kt)("h2",{id:"live-codesandbox-example"},"Live Codesandbox Example"),(0,r.kt)("p",null,"Username: ",(0,r.kt)("a",{parentName:"p",href:"mailto:demo@refine.dev"},"demo@refine.dev")),(0,r.kt)("p",null,"Password: demodemo"),(0,r.kt)("iframe",{src:"https://codesandbox.io/embed/refine-strapi-v4-example-n1uy2?autoresize=1&fontsize=14&module=%2Fsrc%2FApp.tsx&theme=dark&view=preview",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-strapi-v4-example",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}c.isMDXComponent=!0}}]);